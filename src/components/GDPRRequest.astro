---
const DEFAULT_ACCEPT = 'Accept';
const DEFAULT_DECLINE = 'Decline';
const DEFAULT_MESSAGE = 'Accept all cookies?';
const { message, accept, decline } = Astro.props;
// TODO: Import ConsentBuddy from 'https://johnhenry.github.io/lib/consent-buddy/0.0.0/index.mjs';
---

<script type="module" is:inline>
  /* Consent Buddy -- should be extracted */
  const DEFAULT_LOCAL_STORAGE_KEY = "consent-buddy";
  const DEFAULT_LOCAL_STORAGE_VALUE_REJECTED = "-";
  const DEFAULT_LOCAL_STORAGE_VALUE_ACCEPTED = "+";
  const DEFAULT_DISPLAY_VALUE_VISIBLE = "block";
  const DEFAULT_DISPLAY_VALUE_NOT_VISIBLE = "none";

  const ConsentBuddy = (ready, options = {}) => {
    const localStorageKey = options.localStorageKey || DEFAULT_LOCAL_STORAGE_KEY;
    const status = globalThis.localStorage.getItem(localStorageKey);
    const localStorageValueRejected =
      options.localStorageValueRejected || DEFAULT_LOCAL_STORAGE_VALUE_REJECTED;
    const customProperty = options.customProperty || `--${localStorageKey}`;
    const providedEventName =
      options.providedEventName || `${localStorageKey}-provided`;
    const witheldEventName =
      options.witheldEventName || `${localStorageKey}-withheld`;
    const localStorageValueAccepted =
      options.localStorageValueAccepted || DEFAULT_LOCAL_STORAGE_VALUE_ACCEPTED;
    const displayValueVisible =
      options.displayValueVisible || DEFAULT_DISPLAY_VALUE_VISIBLE;
    const displayValueNotVisible =
      options.displayValueNotVisible || DEFAULT_DISPLAY_VALUE_NOT_VISIBLE;
    const resolve = (status, event) => {
      globalThis.localStorage.setItem(localStorageKey, status);
      globalThis.document.documentElement.style.setProperty(
        customProperty,
        displayValueNotVisible
      );
      globalThis.removeEventListener(providedEventName, enableConsent);
      globalThis.removeEventListener(witheldEventName, disableConsent);
      if (status !== localStorageValueRejected) {
        ready(status, event);
      }
    };

    // function to enable consent
    const enableConsent = (event) =>
      resolve(event.detail ? event.detail : localStorageValueAccepted, event);
    const disableConsent = (event) => resolve(localStorageValueRejected, event);
    const final = (done = () => {}) => {
      globalThis.localStorage.removeItem(localStorageKey);
      globalThis.document.documentElement.style.removeProperty(customProperty);
      globalThis.removeEventListener(providedEventName, enableConsent);
      globalThis.removeEventListener(witheldEventName, disableConsent);
      done();
    };
    if (status === localStorageValueRejected) {
      // consent has been rejected
      return final;
    }
    if (status != null) {
      // consent has been accepted
      ready(status);
      return final;
    }
    // consent response has not been provided
    globalThis.addEventListener(providedEventName, enableConsent);
    globalThis.addEventListener(witheldEventName, disableConsent);
    globalThis.document.documentElement.style.setProperty(
      customProperty,
      displayValueVisible
    );
    return final;
  };
  /* */
  // "gtag" Function (see: https://stackoverflow.com/questions/61041158/google-analytics-webapp-event-config-error-gtag-is-not-defined)
  const dataLayer = globalThis.dataLayer || [];
  const gtag = globalThis.gtag || function (){dataLayer.push(arguments);}
  gtag('consent', 'default', {
      'analytics_storage': 'denied',
      'ad_storage': 'denied',
      'wait_for_update': 500
  });
  const clear = ConsentBuddy(()=>{
    // https://developers.google.com/gtagjs/devguide/consent
    gtag('consent', 'update', {
      'analytics_storage': 'granted',
      'ad_storage': 'granted',
      'wait_for_update': 500
    });
  }, {
    displayValueVisible:'flex',
    localStorageKey:'gdpr-consent'});
  globalThis.clearconsent = ()=>{
    clear();
    globalThis.location.reload();
  }
</script>
<footer class="fixed bottom-0 flex p-4 justify-end items-center" style="display: var(--gdpr-consent, none);">
  <div class="mr-auto">{message ?? DEFAULT_MESSAGE}</div>
  <a href="#" onclick="globalThis.dispatchEvent(new Event('gdpr-consent-provided'));">{accept ?? DEFAULT_ACCEPT}</a>
  <a href="#" onclick="globalThis.dispatchEvent(new Event('gdpr-consent-withheld'));">{decline ?? DEFAULT_DECLINE}</a>
</footer>