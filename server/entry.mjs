import { Server } from 'https://deno.land/std@0.132.0/http/server.ts';
import { fetch } from 'https://deno.land/x/file_fetch/mod.ts';

globalThis.process = {
  argv: [],
  env: {}
};

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

/**
 * @param typeMap [Object] Map of MIME type -> Array[extensions]
 * @param ...
 */
function Mime$1() {
  this._types = Object.create(null);
  this._extensions = Object.create(null);

  for (let i = 0; i < arguments.length; i++) {
    this.define(arguments[i]);
  }

  this.define = this.define.bind(this);
  this.getType = this.getType.bind(this);
  this.getExtension = this.getExtension.bind(this);
}

/**
 * Define mimetype -> extension mappings.  Each key is a mime-type that maps
 * to an array of extensions associated with the type.  The first extension is
 * used as the default extension for the type.
 *
 * e.g. mime.define({'audio/ogg', ['oga', 'ogg', 'spx']});
 *
 * If a type declares an extension that has already been defined, an error will
 * be thrown.  To suppress this error and force the extension to be associated
 * with the new type, pass `force`=true.  Alternatively, you may prefix the
 * extension with "*" to map the type to extension, without mapping the
 * extension to the type.
 *
 * e.g. mime.define({'audio/wav', ['wav']}, {'audio/x-wav', ['*wav']});
 *
 *
 * @param map (Object) type definitions
 * @param force (Boolean) if true, force overriding of existing definitions
 */
Mime$1.prototype.define = function(typeMap, force) {
  for (let type in typeMap) {
    let extensions = typeMap[type].map(function(t) {
      return t.toLowerCase();
    });
    type = type.toLowerCase();

    for (let i = 0; i < extensions.length; i++) {
      const ext = extensions[i];

      // '*' prefix = not the preferred type for this extension.  So fixup the
      // extension, and skip it.
      if (ext[0] === '*') {
        continue;
      }

      if (!force && (ext in this._types)) {
        throw new Error(
          'Attempt to change mapping for "' + ext +
          '" extension from "' + this._types[ext] + '" to "' + type +
          '". Pass `force=true` to allow this, otherwise remove "' + ext +
          '" from the list of extensions for "' + type + '".'
        );
      }

      this._types[ext] = type;
    }

    // Use first extension as default
    if (force || !this._extensions[type]) {
      const ext = extensions[0];
      this._extensions[type] = (ext[0] !== '*') ? ext : ext.substr(1);
    }
  }
};

/**
 * Lookup a mime type based on extension
 */
Mime$1.prototype.getType = function(path) {
  path = String(path);
  let last = path.replace(/^.*[/\\]/, '').toLowerCase();
  let ext = last.replace(/^.*\./, '').toLowerCase();

  let hasPath = last.length < path.length;
  let hasDot = ext.length < last.length - 1;

  return (hasDot || !hasPath) && this._types[ext] || null;
};

/**
 * Return file extension associated with a mime type
 */
Mime$1.prototype.getExtension = function(type) {
  type = /^\s*([^;\s]*)/.test(type) && RegExp.$1;
  return type && this._extensions[type.toLowerCase()] || null;
};

var Mime_1 = Mime$1;

var standard = {"application/andrew-inset":["ez"],"application/applixware":["aw"],"application/atom+xml":["atom"],"application/atomcat+xml":["atomcat"],"application/atomdeleted+xml":["atomdeleted"],"application/atomsvc+xml":["atomsvc"],"application/atsc-dwd+xml":["dwd"],"application/atsc-held+xml":["held"],"application/atsc-rsat+xml":["rsat"],"application/bdoc":["bdoc"],"application/calendar+xml":["xcs"],"application/ccxml+xml":["ccxml"],"application/cdfx+xml":["cdfx"],"application/cdmi-capability":["cdmia"],"application/cdmi-container":["cdmic"],"application/cdmi-domain":["cdmid"],"application/cdmi-object":["cdmio"],"application/cdmi-queue":["cdmiq"],"application/cu-seeme":["cu"],"application/dash+xml":["mpd"],"application/davmount+xml":["davmount"],"application/docbook+xml":["dbk"],"application/dssc+der":["dssc"],"application/dssc+xml":["xdssc"],"application/ecmascript":["es","ecma"],"application/emma+xml":["emma"],"application/emotionml+xml":["emotionml"],"application/epub+zip":["epub"],"application/exi":["exi"],"application/express":["exp"],"application/fdt+xml":["fdt"],"application/font-tdpfr":["pfr"],"application/geo+json":["geojson"],"application/gml+xml":["gml"],"application/gpx+xml":["gpx"],"application/gxf":["gxf"],"application/gzip":["gz"],"application/hjson":["hjson"],"application/hyperstudio":["stk"],"application/inkml+xml":["ink","inkml"],"application/ipfix":["ipfix"],"application/its+xml":["its"],"application/java-archive":["jar","war","ear"],"application/java-serialized-object":["ser"],"application/java-vm":["class"],"application/javascript":["js","mjs"],"application/json":["json","map"],"application/json5":["json5"],"application/jsonml+json":["jsonml"],"application/ld+json":["jsonld"],"application/lgr+xml":["lgr"],"application/lost+xml":["lostxml"],"application/mac-binhex40":["hqx"],"application/mac-compactpro":["cpt"],"application/mads+xml":["mads"],"application/manifest+json":["webmanifest"],"application/marc":["mrc"],"application/marcxml+xml":["mrcx"],"application/mathematica":["ma","nb","mb"],"application/mathml+xml":["mathml"],"application/mbox":["mbox"],"application/mediaservercontrol+xml":["mscml"],"application/metalink+xml":["metalink"],"application/metalink4+xml":["meta4"],"application/mets+xml":["mets"],"application/mmt-aei+xml":["maei"],"application/mmt-usd+xml":["musd"],"application/mods+xml":["mods"],"application/mp21":["m21","mp21"],"application/mp4":["mp4s","m4p"],"application/msword":["doc","dot"],"application/mxf":["mxf"],"application/n-quads":["nq"],"application/n-triples":["nt"],"application/node":["cjs"],"application/octet-stream":["bin","dms","lrf","mar","so","dist","distz","pkg","bpk","dump","elc","deploy","exe","dll","deb","dmg","iso","img","msi","msp","msm","buffer"],"application/oda":["oda"],"application/oebps-package+xml":["opf"],"application/ogg":["ogx"],"application/omdoc+xml":["omdoc"],"application/onenote":["onetoc","onetoc2","onetmp","onepkg"],"application/oxps":["oxps"],"application/p2p-overlay+xml":["relo"],"application/patch-ops-error+xml":["xer"],"application/pdf":["pdf"],"application/pgp-encrypted":["pgp"],"application/pgp-signature":["asc","sig"],"application/pics-rules":["prf"],"application/pkcs10":["p10"],"application/pkcs7-mime":["p7m","p7c"],"application/pkcs7-signature":["p7s"],"application/pkcs8":["p8"],"application/pkix-attr-cert":["ac"],"application/pkix-cert":["cer"],"application/pkix-crl":["crl"],"application/pkix-pkipath":["pkipath"],"application/pkixcmp":["pki"],"application/pls+xml":["pls"],"application/postscript":["ai","eps","ps"],"application/provenance+xml":["provx"],"application/pskc+xml":["pskcxml"],"application/raml+yaml":["raml"],"application/rdf+xml":["rdf","owl"],"application/reginfo+xml":["rif"],"application/relax-ng-compact-syntax":["rnc"],"application/resource-lists+xml":["rl"],"application/resource-lists-diff+xml":["rld"],"application/rls-services+xml":["rs"],"application/route-apd+xml":["rapd"],"application/route-s-tsid+xml":["sls"],"application/route-usd+xml":["rusd"],"application/rpki-ghostbusters":["gbr"],"application/rpki-manifest":["mft"],"application/rpki-roa":["roa"],"application/rsd+xml":["rsd"],"application/rss+xml":["rss"],"application/rtf":["rtf"],"application/sbml+xml":["sbml"],"application/scvp-cv-request":["scq"],"application/scvp-cv-response":["scs"],"application/scvp-vp-request":["spq"],"application/scvp-vp-response":["spp"],"application/sdp":["sdp"],"application/senml+xml":["senmlx"],"application/sensml+xml":["sensmlx"],"application/set-payment-initiation":["setpay"],"application/set-registration-initiation":["setreg"],"application/shf+xml":["shf"],"application/sieve":["siv","sieve"],"application/smil+xml":["smi","smil"],"application/sparql-query":["rq"],"application/sparql-results+xml":["srx"],"application/srgs":["gram"],"application/srgs+xml":["grxml"],"application/sru+xml":["sru"],"application/ssdl+xml":["ssdl"],"application/ssml+xml":["ssml"],"application/swid+xml":["swidtag"],"application/tei+xml":["tei","teicorpus"],"application/thraud+xml":["tfi"],"application/timestamped-data":["tsd"],"application/toml":["toml"],"application/trig":["trig"],"application/ttml+xml":["ttml"],"application/ubjson":["ubj"],"application/urc-ressheet+xml":["rsheet"],"application/urc-targetdesc+xml":["td"],"application/voicexml+xml":["vxml"],"application/wasm":["wasm"],"application/widget":["wgt"],"application/winhlp":["hlp"],"application/wsdl+xml":["wsdl"],"application/wspolicy+xml":["wspolicy"],"application/xaml+xml":["xaml"],"application/xcap-att+xml":["xav"],"application/xcap-caps+xml":["xca"],"application/xcap-diff+xml":["xdf"],"application/xcap-el+xml":["xel"],"application/xcap-ns+xml":["xns"],"application/xenc+xml":["xenc"],"application/xhtml+xml":["xhtml","xht"],"application/xliff+xml":["xlf"],"application/xml":["xml","xsl","xsd","rng"],"application/xml-dtd":["dtd"],"application/xop+xml":["xop"],"application/xproc+xml":["xpl"],"application/xslt+xml":["*xsl","xslt"],"application/xspf+xml":["xspf"],"application/xv+xml":["mxml","xhvml","xvml","xvm"],"application/yang":["yang"],"application/yin+xml":["yin"],"application/zip":["zip"],"audio/3gpp":["*3gpp"],"audio/adpcm":["adp"],"audio/amr":["amr"],"audio/basic":["au","snd"],"audio/midi":["mid","midi","kar","rmi"],"audio/mobile-xmf":["mxmf"],"audio/mp3":["*mp3"],"audio/mp4":["m4a","mp4a"],"audio/mpeg":["mpga","mp2","mp2a","mp3","m2a","m3a"],"audio/ogg":["oga","ogg","spx","opus"],"audio/s3m":["s3m"],"audio/silk":["sil"],"audio/wav":["wav"],"audio/wave":["*wav"],"audio/webm":["weba"],"audio/xm":["xm"],"font/collection":["ttc"],"font/otf":["otf"],"font/ttf":["ttf"],"font/woff":["woff"],"font/woff2":["woff2"],"image/aces":["exr"],"image/apng":["apng"],"image/avif":["avif"],"image/bmp":["bmp"],"image/cgm":["cgm"],"image/dicom-rle":["drle"],"image/emf":["emf"],"image/fits":["fits"],"image/g3fax":["g3"],"image/gif":["gif"],"image/heic":["heic"],"image/heic-sequence":["heics"],"image/heif":["heif"],"image/heif-sequence":["heifs"],"image/hej2k":["hej2"],"image/hsj2":["hsj2"],"image/ief":["ief"],"image/jls":["jls"],"image/jp2":["jp2","jpg2"],"image/jpeg":["jpeg","jpg","jpe"],"image/jph":["jph"],"image/jphc":["jhc"],"image/jpm":["jpm"],"image/jpx":["jpx","jpf"],"image/jxr":["jxr"],"image/jxra":["jxra"],"image/jxrs":["jxrs"],"image/jxs":["jxs"],"image/jxsc":["jxsc"],"image/jxsi":["jxsi"],"image/jxss":["jxss"],"image/ktx":["ktx"],"image/ktx2":["ktx2"],"image/png":["png"],"image/sgi":["sgi"],"image/svg+xml":["svg","svgz"],"image/t38":["t38"],"image/tiff":["tif","tiff"],"image/tiff-fx":["tfx"],"image/webp":["webp"],"image/wmf":["wmf"],"message/disposition-notification":["disposition-notification"],"message/global":["u8msg"],"message/global-delivery-status":["u8dsn"],"message/global-disposition-notification":["u8mdn"],"message/global-headers":["u8hdr"],"message/rfc822":["eml","mime"],"model/3mf":["3mf"],"model/gltf+json":["gltf"],"model/gltf-binary":["glb"],"model/iges":["igs","iges"],"model/mesh":["msh","mesh","silo"],"model/mtl":["mtl"],"model/obj":["obj"],"model/step+xml":["stpx"],"model/step+zip":["stpz"],"model/step-xml+zip":["stpxz"],"model/stl":["stl"],"model/vrml":["wrl","vrml"],"model/x3d+binary":["*x3db","x3dbz"],"model/x3d+fastinfoset":["x3db"],"model/x3d+vrml":["*x3dv","x3dvz"],"model/x3d+xml":["x3d","x3dz"],"model/x3d-vrml":["x3dv"],"text/cache-manifest":["appcache","manifest"],"text/calendar":["ics","ifb"],"text/coffeescript":["coffee","litcoffee"],"text/css":["css"],"text/csv":["csv"],"text/html":["html","htm","shtml"],"text/jade":["jade"],"text/jsx":["jsx"],"text/less":["less"],"text/markdown":["markdown","md"],"text/mathml":["mml"],"text/mdx":["mdx"],"text/n3":["n3"],"text/plain":["txt","text","conf","def","list","log","in","ini"],"text/richtext":["rtx"],"text/rtf":["*rtf"],"text/sgml":["sgml","sgm"],"text/shex":["shex"],"text/slim":["slim","slm"],"text/spdx":["spdx"],"text/stylus":["stylus","styl"],"text/tab-separated-values":["tsv"],"text/troff":["t","tr","roff","man","me","ms"],"text/turtle":["ttl"],"text/uri-list":["uri","uris","urls"],"text/vcard":["vcard"],"text/vtt":["vtt"],"text/xml":["*xml"],"text/yaml":["yaml","yml"],"video/3gpp":["3gp","3gpp"],"video/3gpp2":["3g2"],"video/h261":["h261"],"video/h263":["h263"],"video/h264":["h264"],"video/iso.segment":["m4s"],"video/jpeg":["jpgv"],"video/jpm":["*jpm","jpgm"],"video/mj2":["mj2","mjp2"],"video/mp2t":["ts"],"video/mp4":["mp4","mp4v","mpg4"],"video/mpeg":["mpeg","mpg","mpe","m1v","m2v"],"video/ogg":["ogv"],"video/quicktime":["qt","mov"],"video/webm":["webm"]};

var other = {"application/prs.cww":["cww"],"application/vnd.1000minds.decision-model+xml":["1km"],"application/vnd.3gpp.pic-bw-large":["plb"],"application/vnd.3gpp.pic-bw-small":["psb"],"application/vnd.3gpp.pic-bw-var":["pvb"],"application/vnd.3gpp2.tcap":["tcap"],"application/vnd.3m.post-it-notes":["pwn"],"application/vnd.accpac.simply.aso":["aso"],"application/vnd.accpac.simply.imp":["imp"],"application/vnd.acucobol":["acu"],"application/vnd.acucorp":["atc","acutc"],"application/vnd.adobe.air-application-installer-package+zip":["air"],"application/vnd.adobe.formscentral.fcdt":["fcdt"],"application/vnd.adobe.fxp":["fxp","fxpl"],"application/vnd.adobe.xdp+xml":["xdp"],"application/vnd.adobe.xfdf":["xfdf"],"application/vnd.ahead.space":["ahead"],"application/vnd.airzip.filesecure.azf":["azf"],"application/vnd.airzip.filesecure.azs":["azs"],"application/vnd.amazon.ebook":["azw"],"application/vnd.americandynamics.acc":["acc"],"application/vnd.amiga.ami":["ami"],"application/vnd.android.package-archive":["apk"],"application/vnd.anser-web-certificate-issue-initiation":["cii"],"application/vnd.anser-web-funds-transfer-initiation":["fti"],"application/vnd.antix.game-component":["atx"],"application/vnd.apple.installer+xml":["mpkg"],"application/vnd.apple.keynote":["key"],"application/vnd.apple.mpegurl":["m3u8"],"application/vnd.apple.numbers":["numbers"],"application/vnd.apple.pages":["pages"],"application/vnd.apple.pkpass":["pkpass"],"application/vnd.aristanetworks.swi":["swi"],"application/vnd.astraea-software.iota":["iota"],"application/vnd.audiograph":["aep"],"application/vnd.balsamiq.bmml+xml":["bmml"],"application/vnd.blueice.multipass":["mpm"],"application/vnd.bmi":["bmi"],"application/vnd.businessobjects":["rep"],"application/vnd.chemdraw+xml":["cdxml"],"application/vnd.chipnuts.karaoke-mmd":["mmd"],"application/vnd.cinderella":["cdy"],"application/vnd.citationstyles.style+xml":["csl"],"application/vnd.claymore":["cla"],"application/vnd.cloanto.rp9":["rp9"],"application/vnd.clonk.c4group":["c4g","c4d","c4f","c4p","c4u"],"application/vnd.cluetrust.cartomobile-config":["c11amc"],"application/vnd.cluetrust.cartomobile-config-pkg":["c11amz"],"application/vnd.commonspace":["csp"],"application/vnd.contact.cmsg":["cdbcmsg"],"application/vnd.cosmocaller":["cmc"],"application/vnd.crick.clicker":["clkx"],"application/vnd.crick.clicker.keyboard":["clkk"],"application/vnd.crick.clicker.palette":["clkp"],"application/vnd.crick.clicker.template":["clkt"],"application/vnd.crick.clicker.wordbank":["clkw"],"application/vnd.criticaltools.wbs+xml":["wbs"],"application/vnd.ctc-posml":["pml"],"application/vnd.cups-ppd":["ppd"],"application/vnd.curl.car":["car"],"application/vnd.curl.pcurl":["pcurl"],"application/vnd.dart":["dart"],"application/vnd.data-vision.rdz":["rdz"],"application/vnd.dbf":["dbf"],"application/vnd.dece.data":["uvf","uvvf","uvd","uvvd"],"application/vnd.dece.ttml+xml":["uvt","uvvt"],"application/vnd.dece.unspecified":["uvx","uvvx"],"application/vnd.dece.zip":["uvz","uvvz"],"application/vnd.denovo.fcselayout-link":["fe_launch"],"application/vnd.dna":["dna"],"application/vnd.dolby.mlp":["mlp"],"application/vnd.dpgraph":["dpg"],"application/vnd.dreamfactory":["dfac"],"application/vnd.ds-keypoint":["kpxx"],"application/vnd.dvb.ait":["ait"],"application/vnd.dvb.service":["svc"],"application/vnd.dynageo":["geo"],"application/vnd.ecowin.chart":["mag"],"application/vnd.enliven":["nml"],"application/vnd.epson.esf":["esf"],"application/vnd.epson.msf":["msf"],"application/vnd.epson.quickanime":["qam"],"application/vnd.epson.salt":["slt"],"application/vnd.epson.ssf":["ssf"],"application/vnd.eszigno3+xml":["es3","et3"],"application/vnd.ezpix-album":["ez2"],"application/vnd.ezpix-package":["ez3"],"application/vnd.fdf":["fdf"],"application/vnd.fdsn.mseed":["mseed"],"application/vnd.fdsn.seed":["seed","dataless"],"application/vnd.flographit":["gph"],"application/vnd.fluxtime.clip":["ftc"],"application/vnd.framemaker":["fm","frame","maker","book"],"application/vnd.frogans.fnc":["fnc"],"application/vnd.frogans.ltf":["ltf"],"application/vnd.fsc.weblaunch":["fsc"],"application/vnd.fujitsu.oasys":["oas"],"application/vnd.fujitsu.oasys2":["oa2"],"application/vnd.fujitsu.oasys3":["oa3"],"application/vnd.fujitsu.oasysgp":["fg5"],"application/vnd.fujitsu.oasysprs":["bh2"],"application/vnd.fujixerox.ddd":["ddd"],"application/vnd.fujixerox.docuworks":["xdw"],"application/vnd.fujixerox.docuworks.binder":["xbd"],"application/vnd.fuzzysheet":["fzs"],"application/vnd.genomatix.tuxedo":["txd"],"application/vnd.geogebra.file":["ggb"],"application/vnd.geogebra.tool":["ggt"],"application/vnd.geometry-explorer":["gex","gre"],"application/vnd.geonext":["gxt"],"application/vnd.geoplan":["g2w"],"application/vnd.geospace":["g3w"],"application/vnd.gmx":["gmx"],"application/vnd.google-apps.document":["gdoc"],"application/vnd.google-apps.presentation":["gslides"],"application/vnd.google-apps.spreadsheet":["gsheet"],"application/vnd.google-earth.kml+xml":["kml"],"application/vnd.google-earth.kmz":["kmz"],"application/vnd.grafeq":["gqf","gqs"],"application/vnd.groove-account":["gac"],"application/vnd.groove-help":["ghf"],"application/vnd.groove-identity-message":["gim"],"application/vnd.groove-injector":["grv"],"application/vnd.groove-tool-message":["gtm"],"application/vnd.groove-tool-template":["tpl"],"application/vnd.groove-vcard":["vcg"],"application/vnd.hal+xml":["hal"],"application/vnd.handheld-entertainment+xml":["zmm"],"application/vnd.hbci":["hbci"],"application/vnd.hhe.lesson-player":["les"],"application/vnd.hp-hpgl":["hpgl"],"application/vnd.hp-hpid":["hpid"],"application/vnd.hp-hps":["hps"],"application/vnd.hp-jlyt":["jlt"],"application/vnd.hp-pcl":["pcl"],"application/vnd.hp-pclxl":["pclxl"],"application/vnd.hydrostatix.sof-data":["sfd-hdstx"],"application/vnd.ibm.minipay":["mpy"],"application/vnd.ibm.modcap":["afp","listafp","list3820"],"application/vnd.ibm.rights-management":["irm"],"application/vnd.ibm.secure-container":["sc"],"application/vnd.iccprofile":["icc","icm"],"application/vnd.igloader":["igl"],"application/vnd.immervision-ivp":["ivp"],"application/vnd.immervision-ivu":["ivu"],"application/vnd.insors.igm":["igm"],"application/vnd.intercon.formnet":["xpw","xpx"],"application/vnd.intergeo":["i2g"],"application/vnd.intu.qbo":["qbo"],"application/vnd.intu.qfx":["qfx"],"application/vnd.ipunplugged.rcprofile":["rcprofile"],"application/vnd.irepository.package+xml":["irp"],"application/vnd.is-xpr":["xpr"],"application/vnd.isac.fcs":["fcs"],"application/vnd.jam":["jam"],"application/vnd.jcp.javame.midlet-rms":["rms"],"application/vnd.jisp":["jisp"],"application/vnd.joost.joda-archive":["joda"],"application/vnd.kahootz":["ktz","ktr"],"application/vnd.kde.karbon":["karbon"],"application/vnd.kde.kchart":["chrt"],"application/vnd.kde.kformula":["kfo"],"application/vnd.kde.kivio":["flw"],"application/vnd.kde.kontour":["kon"],"application/vnd.kde.kpresenter":["kpr","kpt"],"application/vnd.kde.kspread":["ksp"],"application/vnd.kde.kword":["kwd","kwt"],"application/vnd.kenameaapp":["htke"],"application/vnd.kidspiration":["kia"],"application/vnd.kinar":["kne","knp"],"application/vnd.koan":["skp","skd","skt","skm"],"application/vnd.kodak-descriptor":["sse"],"application/vnd.las.las+xml":["lasxml"],"application/vnd.llamagraphics.life-balance.desktop":["lbd"],"application/vnd.llamagraphics.life-balance.exchange+xml":["lbe"],"application/vnd.lotus-1-2-3":["123"],"application/vnd.lotus-approach":["apr"],"application/vnd.lotus-freelance":["pre"],"application/vnd.lotus-notes":["nsf"],"application/vnd.lotus-organizer":["org"],"application/vnd.lotus-screencam":["scm"],"application/vnd.lotus-wordpro":["lwp"],"application/vnd.macports.portpkg":["portpkg"],"application/vnd.mapbox-vector-tile":["mvt"],"application/vnd.mcd":["mcd"],"application/vnd.medcalcdata":["mc1"],"application/vnd.mediastation.cdkey":["cdkey"],"application/vnd.mfer":["mwf"],"application/vnd.mfmp":["mfm"],"application/vnd.micrografx.flo":["flo"],"application/vnd.micrografx.igx":["igx"],"application/vnd.mif":["mif"],"application/vnd.mobius.daf":["daf"],"application/vnd.mobius.dis":["dis"],"application/vnd.mobius.mbk":["mbk"],"application/vnd.mobius.mqy":["mqy"],"application/vnd.mobius.msl":["msl"],"application/vnd.mobius.plc":["plc"],"application/vnd.mobius.txf":["txf"],"application/vnd.mophun.application":["mpn"],"application/vnd.mophun.certificate":["mpc"],"application/vnd.mozilla.xul+xml":["xul"],"application/vnd.ms-artgalry":["cil"],"application/vnd.ms-cab-compressed":["cab"],"application/vnd.ms-excel":["xls","xlm","xla","xlc","xlt","xlw"],"application/vnd.ms-excel.addin.macroenabled.12":["xlam"],"application/vnd.ms-excel.sheet.binary.macroenabled.12":["xlsb"],"application/vnd.ms-excel.sheet.macroenabled.12":["xlsm"],"application/vnd.ms-excel.template.macroenabled.12":["xltm"],"application/vnd.ms-fontobject":["eot"],"application/vnd.ms-htmlhelp":["chm"],"application/vnd.ms-ims":["ims"],"application/vnd.ms-lrm":["lrm"],"application/vnd.ms-officetheme":["thmx"],"application/vnd.ms-outlook":["msg"],"application/vnd.ms-pki.seccat":["cat"],"application/vnd.ms-pki.stl":["*stl"],"application/vnd.ms-powerpoint":["ppt","pps","pot"],"application/vnd.ms-powerpoint.addin.macroenabled.12":["ppam"],"application/vnd.ms-powerpoint.presentation.macroenabled.12":["pptm"],"application/vnd.ms-powerpoint.slide.macroenabled.12":["sldm"],"application/vnd.ms-powerpoint.slideshow.macroenabled.12":["ppsm"],"application/vnd.ms-powerpoint.template.macroenabled.12":["potm"],"application/vnd.ms-project":["mpp","mpt"],"application/vnd.ms-word.document.macroenabled.12":["docm"],"application/vnd.ms-word.template.macroenabled.12":["dotm"],"application/vnd.ms-works":["wps","wks","wcm","wdb"],"application/vnd.ms-wpl":["wpl"],"application/vnd.ms-xpsdocument":["xps"],"application/vnd.mseq":["mseq"],"application/vnd.musician":["mus"],"application/vnd.muvee.style":["msty"],"application/vnd.mynfc":["taglet"],"application/vnd.neurolanguage.nlu":["nlu"],"application/vnd.nitf":["ntf","nitf"],"application/vnd.noblenet-directory":["nnd"],"application/vnd.noblenet-sealer":["nns"],"application/vnd.noblenet-web":["nnw"],"application/vnd.nokia.n-gage.ac+xml":["*ac"],"application/vnd.nokia.n-gage.data":["ngdat"],"application/vnd.nokia.n-gage.symbian.install":["n-gage"],"application/vnd.nokia.radio-preset":["rpst"],"application/vnd.nokia.radio-presets":["rpss"],"application/vnd.novadigm.edm":["edm"],"application/vnd.novadigm.edx":["edx"],"application/vnd.novadigm.ext":["ext"],"application/vnd.oasis.opendocument.chart":["odc"],"application/vnd.oasis.opendocument.chart-template":["otc"],"application/vnd.oasis.opendocument.database":["odb"],"application/vnd.oasis.opendocument.formula":["odf"],"application/vnd.oasis.opendocument.formula-template":["odft"],"application/vnd.oasis.opendocument.graphics":["odg"],"application/vnd.oasis.opendocument.graphics-template":["otg"],"application/vnd.oasis.opendocument.image":["odi"],"application/vnd.oasis.opendocument.image-template":["oti"],"application/vnd.oasis.opendocument.presentation":["odp"],"application/vnd.oasis.opendocument.presentation-template":["otp"],"application/vnd.oasis.opendocument.spreadsheet":["ods"],"application/vnd.oasis.opendocument.spreadsheet-template":["ots"],"application/vnd.oasis.opendocument.text":["odt"],"application/vnd.oasis.opendocument.text-master":["odm"],"application/vnd.oasis.opendocument.text-template":["ott"],"application/vnd.oasis.opendocument.text-web":["oth"],"application/vnd.olpc-sugar":["xo"],"application/vnd.oma.dd2+xml":["dd2"],"application/vnd.openblox.game+xml":["obgx"],"application/vnd.openofficeorg.extension":["oxt"],"application/vnd.openstreetmap.data+xml":["osm"],"application/vnd.openxmlformats-officedocument.presentationml.presentation":["pptx"],"application/vnd.openxmlformats-officedocument.presentationml.slide":["sldx"],"application/vnd.openxmlformats-officedocument.presentationml.slideshow":["ppsx"],"application/vnd.openxmlformats-officedocument.presentationml.template":["potx"],"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":["xlsx"],"application/vnd.openxmlformats-officedocument.spreadsheetml.template":["xltx"],"application/vnd.openxmlformats-officedocument.wordprocessingml.document":["docx"],"application/vnd.openxmlformats-officedocument.wordprocessingml.template":["dotx"],"application/vnd.osgeo.mapguide.package":["mgp"],"application/vnd.osgi.dp":["dp"],"application/vnd.osgi.subsystem":["esa"],"application/vnd.palm":["pdb","pqa","oprc"],"application/vnd.pawaafile":["paw"],"application/vnd.pg.format":["str"],"application/vnd.pg.osasli":["ei6"],"application/vnd.picsel":["efif"],"application/vnd.pmi.widget":["wg"],"application/vnd.pocketlearn":["plf"],"application/vnd.powerbuilder6":["pbd"],"application/vnd.previewsystems.box":["box"],"application/vnd.proteus.magazine":["mgz"],"application/vnd.publishare-delta-tree":["qps"],"application/vnd.pvi.ptid1":["ptid"],"application/vnd.quark.quarkxpress":["qxd","qxt","qwd","qwt","qxl","qxb"],"application/vnd.rar":["rar"],"application/vnd.realvnc.bed":["bed"],"application/vnd.recordare.musicxml":["mxl"],"application/vnd.recordare.musicxml+xml":["musicxml"],"application/vnd.rig.cryptonote":["cryptonote"],"application/vnd.rim.cod":["cod"],"application/vnd.rn-realmedia":["rm"],"application/vnd.rn-realmedia-vbr":["rmvb"],"application/vnd.route66.link66+xml":["link66"],"application/vnd.sailingtracker.track":["st"],"application/vnd.seemail":["see"],"application/vnd.sema":["sema"],"application/vnd.semd":["semd"],"application/vnd.semf":["semf"],"application/vnd.shana.informed.formdata":["ifm"],"application/vnd.shana.informed.formtemplate":["itp"],"application/vnd.shana.informed.interchange":["iif"],"application/vnd.shana.informed.package":["ipk"],"application/vnd.simtech-mindmapper":["twd","twds"],"application/vnd.smaf":["mmf"],"application/vnd.smart.teacher":["teacher"],"application/vnd.software602.filler.form+xml":["fo"],"application/vnd.solent.sdkm+xml":["sdkm","sdkd"],"application/vnd.spotfire.dxp":["dxp"],"application/vnd.spotfire.sfs":["sfs"],"application/vnd.stardivision.calc":["sdc"],"application/vnd.stardivision.draw":["sda"],"application/vnd.stardivision.impress":["sdd"],"application/vnd.stardivision.math":["smf"],"application/vnd.stardivision.writer":["sdw","vor"],"application/vnd.stardivision.writer-global":["sgl"],"application/vnd.stepmania.package":["smzip"],"application/vnd.stepmania.stepchart":["sm"],"application/vnd.sun.wadl+xml":["wadl"],"application/vnd.sun.xml.calc":["sxc"],"application/vnd.sun.xml.calc.template":["stc"],"application/vnd.sun.xml.draw":["sxd"],"application/vnd.sun.xml.draw.template":["std"],"application/vnd.sun.xml.impress":["sxi"],"application/vnd.sun.xml.impress.template":["sti"],"application/vnd.sun.xml.math":["sxm"],"application/vnd.sun.xml.writer":["sxw"],"application/vnd.sun.xml.writer.global":["sxg"],"application/vnd.sun.xml.writer.template":["stw"],"application/vnd.sus-calendar":["sus","susp"],"application/vnd.svd":["svd"],"application/vnd.symbian.install":["sis","sisx"],"application/vnd.syncml+xml":["xsm"],"application/vnd.syncml.dm+wbxml":["bdm"],"application/vnd.syncml.dm+xml":["xdm"],"application/vnd.syncml.dmddf+xml":["ddf"],"application/vnd.tao.intent-module-archive":["tao"],"application/vnd.tcpdump.pcap":["pcap","cap","dmp"],"application/vnd.tmobile-livetv":["tmo"],"application/vnd.trid.tpt":["tpt"],"application/vnd.triscape.mxs":["mxs"],"application/vnd.trueapp":["tra"],"application/vnd.ufdl":["ufd","ufdl"],"application/vnd.uiq.theme":["utz"],"application/vnd.umajin":["umj"],"application/vnd.unity":["unityweb"],"application/vnd.uoml+xml":["uoml"],"application/vnd.vcx":["vcx"],"application/vnd.visio":["vsd","vst","vss","vsw"],"application/vnd.visionary":["vis"],"application/vnd.vsf":["vsf"],"application/vnd.wap.wbxml":["wbxml"],"application/vnd.wap.wmlc":["wmlc"],"application/vnd.wap.wmlscriptc":["wmlsc"],"application/vnd.webturbo":["wtb"],"application/vnd.wolfram.player":["nbp"],"application/vnd.wordperfect":["wpd"],"application/vnd.wqd":["wqd"],"application/vnd.wt.stf":["stf"],"application/vnd.xara":["xar"],"application/vnd.xfdl":["xfdl"],"application/vnd.yamaha.hv-dic":["hvd"],"application/vnd.yamaha.hv-script":["hvs"],"application/vnd.yamaha.hv-voice":["hvp"],"application/vnd.yamaha.openscoreformat":["osf"],"application/vnd.yamaha.openscoreformat.osfpvg+xml":["osfpvg"],"application/vnd.yamaha.smaf-audio":["saf"],"application/vnd.yamaha.smaf-phrase":["spf"],"application/vnd.yellowriver-custom-menu":["cmp"],"application/vnd.zul":["zir","zirz"],"application/vnd.zzazz.deck+xml":["zaz"],"application/x-7z-compressed":["7z"],"application/x-abiword":["abw"],"application/x-ace-compressed":["ace"],"application/x-apple-diskimage":["*dmg"],"application/x-arj":["arj"],"application/x-authorware-bin":["aab","x32","u32","vox"],"application/x-authorware-map":["aam"],"application/x-authorware-seg":["aas"],"application/x-bcpio":["bcpio"],"application/x-bdoc":["*bdoc"],"application/x-bittorrent":["torrent"],"application/x-blorb":["blb","blorb"],"application/x-bzip":["bz"],"application/x-bzip2":["bz2","boz"],"application/x-cbr":["cbr","cba","cbt","cbz","cb7"],"application/x-cdlink":["vcd"],"application/x-cfs-compressed":["cfs"],"application/x-chat":["chat"],"application/x-chess-pgn":["pgn"],"application/x-chrome-extension":["crx"],"application/x-cocoa":["cco"],"application/x-conference":["nsc"],"application/x-cpio":["cpio"],"application/x-csh":["csh"],"application/x-debian-package":["*deb","udeb"],"application/x-dgc-compressed":["dgc"],"application/x-director":["dir","dcr","dxr","cst","cct","cxt","w3d","fgd","swa"],"application/x-doom":["wad"],"application/x-dtbncx+xml":["ncx"],"application/x-dtbook+xml":["dtb"],"application/x-dtbresource+xml":["res"],"application/x-dvi":["dvi"],"application/x-envoy":["evy"],"application/x-eva":["eva"],"application/x-font-bdf":["bdf"],"application/x-font-ghostscript":["gsf"],"application/x-font-linux-psf":["psf"],"application/x-font-pcf":["pcf"],"application/x-font-snf":["snf"],"application/x-font-type1":["pfa","pfb","pfm","afm"],"application/x-freearc":["arc"],"application/x-futuresplash":["spl"],"application/x-gca-compressed":["gca"],"application/x-glulx":["ulx"],"application/x-gnumeric":["gnumeric"],"application/x-gramps-xml":["gramps"],"application/x-gtar":["gtar"],"application/x-hdf":["hdf"],"application/x-httpd-php":["php"],"application/x-install-instructions":["install"],"application/x-iso9660-image":["*iso"],"application/x-iwork-keynote-sffkey":["*key"],"application/x-iwork-numbers-sffnumbers":["*numbers"],"application/x-iwork-pages-sffpages":["*pages"],"application/x-java-archive-diff":["jardiff"],"application/x-java-jnlp-file":["jnlp"],"application/x-keepass2":["kdbx"],"application/x-latex":["latex"],"application/x-lua-bytecode":["luac"],"application/x-lzh-compressed":["lzh","lha"],"application/x-makeself":["run"],"application/x-mie":["mie"],"application/x-mobipocket-ebook":["prc","mobi"],"application/x-ms-application":["application"],"application/x-ms-shortcut":["lnk"],"application/x-ms-wmd":["wmd"],"application/x-ms-wmz":["wmz"],"application/x-ms-xbap":["xbap"],"application/x-msaccess":["mdb"],"application/x-msbinder":["obd"],"application/x-mscardfile":["crd"],"application/x-msclip":["clp"],"application/x-msdos-program":["*exe"],"application/x-msdownload":["*exe","*dll","com","bat","*msi"],"application/x-msmediaview":["mvb","m13","m14"],"application/x-msmetafile":["*wmf","*wmz","*emf","emz"],"application/x-msmoney":["mny"],"application/x-mspublisher":["pub"],"application/x-msschedule":["scd"],"application/x-msterminal":["trm"],"application/x-mswrite":["wri"],"application/x-netcdf":["nc","cdf"],"application/x-ns-proxy-autoconfig":["pac"],"application/x-nzb":["nzb"],"application/x-perl":["pl","pm"],"application/x-pilot":["*prc","*pdb"],"application/x-pkcs12":["p12","pfx"],"application/x-pkcs7-certificates":["p7b","spc"],"application/x-pkcs7-certreqresp":["p7r"],"application/x-rar-compressed":["*rar"],"application/x-redhat-package-manager":["rpm"],"application/x-research-info-systems":["ris"],"application/x-sea":["sea"],"application/x-sh":["sh"],"application/x-shar":["shar"],"application/x-shockwave-flash":["swf"],"application/x-silverlight-app":["xap"],"application/x-sql":["sql"],"application/x-stuffit":["sit"],"application/x-stuffitx":["sitx"],"application/x-subrip":["srt"],"application/x-sv4cpio":["sv4cpio"],"application/x-sv4crc":["sv4crc"],"application/x-t3vm-image":["t3"],"application/x-tads":["gam"],"application/x-tar":["tar"],"application/x-tcl":["tcl","tk"],"application/x-tex":["tex"],"application/x-tex-tfm":["tfm"],"application/x-texinfo":["texinfo","texi"],"application/x-tgif":["*obj"],"application/x-ustar":["ustar"],"application/x-virtualbox-hdd":["hdd"],"application/x-virtualbox-ova":["ova"],"application/x-virtualbox-ovf":["ovf"],"application/x-virtualbox-vbox":["vbox"],"application/x-virtualbox-vbox-extpack":["vbox-extpack"],"application/x-virtualbox-vdi":["vdi"],"application/x-virtualbox-vhd":["vhd"],"application/x-virtualbox-vmdk":["vmdk"],"application/x-wais-source":["src"],"application/x-web-app-manifest+json":["webapp"],"application/x-x509-ca-cert":["der","crt","pem"],"application/x-xfig":["fig"],"application/x-xliff+xml":["*xlf"],"application/x-xpinstall":["xpi"],"application/x-xz":["xz"],"application/x-zmachine":["z1","z2","z3","z4","z5","z6","z7","z8"],"audio/vnd.dece.audio":["uva","uvva"],"audio/vnd.digital-winds":["eol"],"audio/vnd.dra":["dra"],"audio/vnd.dts":["dts"],"audio/vnd.dts.hd":["dtshd"],"audio/vnd.lucent.voice":["lvp"],"audio/vnd.ms-playready.media.pya":["pya"],"audio/vnd.nuera.ecelp4800":["ecelp4800"],"audio/vnd.nuera.ecelp7470":["ecelp7470"],"audio/vnd.nuera.ecelp9600":["ecelp9600"],"audio/vnd.rip":["rip"],"audio/x-aac":["aac"],"audio/x-aiff":["aif","aiff","aifc"],"audio/x-caf":["caf"],"audio/x-flac":["flac"],"audio/x-m4a":["*m4a"],"audio/x-matroska":["mka"],"audio/x-mpegurl":["m3u"],"audio/x-ms-wax":["wax"],"audio/x-ms-wma":["wma"],"audio/x-pn-realaudio":["ram","ra"],"audio/x-pn-realaudio-plugin":["rmp"],"audio/x-realaudio":["*ra"],"audio/x-wav":["*wav"],"chemical/x-cdx":["cdx"],"chemical/x-cif":["cif"],"chemical/x-cmdf":["cmdf"],"chemical/x-cml":["cml"],"chemical/x-csml":["csml"],"chemical/x-xyz":["xyz"],"image/prs.btif":["btif"],"image/prs.pti":["pti"],"image/vnd.adobe.photoshop":["psd"],"image/vnd.airzip.accelerator.azv":["azv"],"image/vnd.dece.graphic":["uvi","uvvi","uvg","uvvg"],"image/vnd.djvu":["djvu","djv"],"image/vnd.dvb.subtitle":["*sub"],"image/vnd.dwg":["dwg"],"image/vnd.dxf":["dxf"],"image/vnd.fastbidsheet":["fbs"],"image/vnd.fpx":["fpx"],"image/vnd.fst":["fst"],"image/vnd.fujixerox.edmics-mmr":["mmr"],"image/vnd.fujixerox.edmics-rlc":["rlc"],"image/vnd.microsoft.icon":["ico"],"image/vnd.ms-dds":["dds"],"image/vnd.ms-modi":["mdi"],"image/vnd.ms-photo":["wdp"],"image/vnd.net-fpx":["npx"],"image/vnd.pco.b16":["b16"],"image/vnd.tencent.tap":["tap"],"image/vnd.valve.source.texture":["vtf"],"image/vnd.wap.wbmp":["wbmp"],"image/vnd.xiff":["xif"],"image/vnd.zbrush.pcx":["pcx"],"image/x-3ds":["3ds"],"image/x-cmu-raster":["ras"],"image/x-cmx":["cmx"],"image/x-freehand":["fh","fhc","fh4","fh5","fh7"],"image/x-icon":["*ico"],"image/x-jng":["jng"],"image/x-mrsid-image":["sid"],"image/x-ms-bmp":["*bmp"],"image/x-pcx":["*pcx"],"image/x-pict":["pic","pct"],"image/x-portable-anymap":["pnm"],"image/x-portable-bitmap":["pbm"],"image/x-portable-graymap":["pgm"],"image/x-portable-pixmap":["ppm"],"image/x-rgb":["rgb"],"image/x-tga":["tga"],"image/x-xbitmap":["xbm"],"image/x-xpixmap":["xpm"],"image/x-xwindowdump":["xwd"],"message/vnd.wfa.wsc":["wsc"],"model/vnd.collada+xml":["dae"],"model/vnd.dwf":["dwf"],"model/vnd.gdl":["gdl"],"model/vnd.gtw":["gtw"],"model/vnd.mts":["mts"],"model/vnd.opengex":["ogex"],"model/vnd.parasolid.transmit.binary":["x_b"],"model/vnd.parasolid.transmit.text":["x_t"],"model/vnd.sap.vds":["vds"],"model/vnd.usdz+zip":["usdz"],"model/vnd.valve.source.compiled-map":["bsp"],"model/vnd.vtu":["vtu"],"text/prs.lines.tag":["dsc"],"text/vnd.curl":["curl"],"text/vnd.curl.dcurl":["dcurl"],"text/vnd.curl.mcurl":["mcurl"],"text/vnd.curl.scurl":["scurl"],"text/vnd.dvb.subtitle":["sub"],"text/vnd.fly":["fly"],"text/vnd.fmi.flexstor":["flx"],"text/vnd.graphviz":["gv"],"text/vnd.in3d.3dml":["3dml"],"text/vnd.in3d.spot":["spot"],"text/vnd.sun.j2me.app-descriptor":["jad"],"text/vnd.wap.wml":["wml"],"text/vnd.wap.wmlscript":["wmls"],"text/x-asm":["s","asm"],"text/x-c":["c","cc","cxx","cpp","h","hh","dic"],"text/x-component":["htc"],"text/x-fortran":["f","for","f77","f90"],"text/x-handlebars-template":["hbs"],"text/x-java-source":["java"],"text/x-lua":["lua"],"text/x-markdown":["mkd"],"text/x-nfo":["nfo"],"text/x-opml":["opml"],"text/x-org":["*org"],"text/x-pascal":["p","pas"],"text/x-processing":["pde"],"text/x-sass":["sass"],"text/x-scss":["scss"],"text/x-setext":["etx"],"text/x-sfv":["sfv"],"text/x-suse-ymp":["ymp"],"text/x-uuencode":["uu"],"text/x-vcalendar":["vcs"],"text/x-vcard":["vcf"],"video/vnd.dece.hd":["uvh","uvvh"],"video/vnd.dece.mobile":["uvm","uvvm"],"video/vnd.dece.pd":["uvp","uvvp"],"video/vnd.dece.sd":["uvs","uvvs"],"video/vnd.dece.video":["uvv","uvvv"],"video/vnd.dvb.file":["dvb"],"video/vnd.fvt":["fvt"],"video/vnd.mpegurl":["mxu","m4u"],"video/vnd.ms-playready.media.pyv":["pyv"],"video/vnd.uvvu.mp4":["uvu","uvvu"],"video/vnd.vivo":["viv"],"video/x-f4v":["f4v"],"video/x-fli":["fli"],"video/x-flv":["flv"],"video/x-m4v":["m4v"],"video/x-matroska":["mkv","mk3d","mks"],"video/x-mng":["mng"],"video/x-ms-asf":["asf","asx"],"video/x-ms-vob":["vob"],"video/x-ms-wm":["wm"],"video/x-ms-wmv":["wmv"],"video/x-ms-wmx":["wmx"],"video/x-ms-wvx":["wvx"],"video/x-msvideo":["avi"],"video/x-sgi-movie":["movie"],"video/x-smv":["smv"],"x-conference/x-cooltalk":["ice"]};

let Mime = Mime_1;
var mime = new Mime(standard, other);

let FORCE_COLOR, NODE_DISABLE_COLORS, NO_COLOR, TERM, isTTY=true;
if (typeof process !== 'undefined') {
	({ FORCE_COLOR, NODE_DISABLE_COLORS, NO_COLOR, TERM } = process.env);
	isTTY = process.stdout && process.stdout.isTTY;
}

const $ = {
	enabled: !NODE_DISABLE_COLORS && NO_COLOR == null && TERM !== 'dumb' && (
		FORCE_COLOR != null && FORCE_COLOR !== '0' || isTTY
	)
};

function init(x, y) {
	let rgx = new RegExp(`\\x1b\\[${y}m`, 'g');
	let open = `\x1b[${x}m`, close = `\x1b[${y}m`;

	return function (txt) {
		if (!$.enabled || txt == null) return txt;
		return open + (!!~(''+txt).indexOf(close) ? txt.replace(rgx, close + open) : txt) + close;
	};
}

// modifiers
const reset = init(0, 0);
const bold = init(1, 22);
const dim = init(2, 22);
const red = init(31, 39);
const yellow = init(33, 39);
const cyan = init(36, 39);

var util$1 = {};

var types = {};

/* eslint complexity: [2, 18], max-statements: [2, 33] */
var shams$1 = function hasSymbols() {
	if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }
	if (typeof Symbol.iterator === 'symbol') { return true; }

	var obj = {};
	var sym = Symbol('test');
	var symObj = Object(sym);
	if (typeof sym === 'string') { return false; }

	if (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }
	if (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }

	// temp disabled per https://github.com/ljharb/object.assign/issues/17
	// if (sym instanceof Symbol) { return false; }
	// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
	// if (!(symObj instanceof Symbol)) { return false; }

	// if (typeof Symbol.prototype.toString !== 'function') { return false; }
	// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }

	var symVal = 42;
	obj[sym] = symVal;
	for (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop
	if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }

	if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }

	var syms = Object.getOwnPropertySymbols(obj);
	if (syms.length !== 1 || syms[0] !== sym) { return false; }

	if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }

	if (typeof Object.getOwnPropertyDescriptor === 'function') {
		var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
		if (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }
	}

	return true;
};

var hasSymbols$2 = shams$1;

var shams = function hasToStringTagShams() {
	return hasSymbols$2() && !!Symbol.toStringTag;
};

var origSymbol = typeof Symbol !== 'undefined' && Symbol;
var hasSymbolSham = shams$1;

var hasSymbols$1 = function hasNativeSymbols() {
	if (typeof origSymbol !== 'function') { return false; }
	if (typeof Symbol !== 'function') { return false; }
	if (typeof origSymbol('foo') !== 'symbol') { return false; }
	if (typeof Symbol('bar') !== 'symbol') { return false; }

	return hasSymbolSham();
};

/* eslint no-invalid-this: 1 */

var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var slice = Array.prototype.slice;
var toStr$1 = Object.prototype.toString;
var funcType = '[object Function]';

var implementation$1 = function bind(that) {
    var target = this;
    if (typeof target !== 'function' || toStr$1.call(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slice.call(arguments, 1);

    var bound;
    var binder = function () {
        if (this instanceof bound) {
            var result = target.apply(
                this,
                args.concat(slice.call(arguments))
            );
            if (Object(result) === result) {
                return result;
            }
            return this;
        } else {
            return target.apply(
                that,
                args.concat(slice.call(arguments))
            );
        }
    };

    var boundLength = Math.max(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0; i < boundLength; i++) {
        boundArgs.push('$' + i);
    }

    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

    if (target.prototype) {
        var Empty = function Empty() {};
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }

    return bound;
};

var implementation = implementation$1;

var functionBind = Function.prototype.bind || implementation;

var bind$1 = functionBind;

var src = bind$1.call(Function.call, Object.prototype.hasOwnProperty);

var undefined$1;

var $SyntaxError = SyntaxError;
var $Function = Function;
var $TypeError = TypeError;

// eslint-disable-next-line consistent-return
var getEvalledConstructor = function (expressionSyntax) {
	try {
		return $Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
	} catch (e) {}
};

var $gOPD$1 = Object.getOwnPropertyDescriptor;
if ($gOPD$1) {
	try {
		$gOPD$1({}, '');
	} catch (e) {
		$gOPD$1 = null; // this is IE 8, which has a broken gOPD
	}
}

var throwTypeError = function () {
	throw new $TypeError();
};
var ThrowTypeError = $gOPD$1
	? (function () {
		try {
			// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
			arguments.callee; // IE 8 does not throw here
			return throwTypeError;
		} catch (calleeThrows) {
			try {
				// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
				return $gOPD$1(arguments, 'callee').get;
			} catch (gOPDthrows) {
				return throwTypeError;
			}
		}
	}())
	: throwTypeError;

var hasSymbols = hasSymbols$1();

var getProto$1 = Object.getPrototypeOf || function (x) { return x.__proto__; }; // eslint-disable-line no-proto

var needsEval = {};

var TypedArray = typeof Uint8Array === 'undefined' ? undefined$1 : getProto$1(Uint8Array);

var INTRINSICS = {
	'%AggregateError%': typeof AggregateError === 'undefined' ? undefined$1 : AggregateError,
	'%Array%': Array,
	'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined$1 : ArrayBuffer,
	'%ArrayIteratorPrototype%': hasSymbols ? getProto$1([][Symbol.iterator]()) : undefined$1,
	'%AsyncFromSyncIteratorPrototype%': undefined$1,
	'%AsyncFunction%': needsEval,
	'%AsyncGenerator%': needsEval,
	'%AsyncGeneratorFunction%': needsEval,
	'%AsyncIteratorPrototype%': needsEval,
	'%Atomics%': typeof Atomics === 'undefined' ? undefined$1 : Atomics,
	'%BigInt%': typeof BigInt === 'undefined' ? undefined$1 : BigInt,
	'%Boolean%': Boolean,
	'%DataView%': typeof DataView === 'undefined' ? undefined$1 : DataView,
	'%Date%': Date,
	'%decodeURI%': decodeURI,
	'%decodeURIComponent%': decodeURIComponent,
	'%encodeURI%': encodeURI,
	'%encodeURIComponent%': encodeURIComponent,
	'%Error%': Error,
	'%eval%': eval, // eslint-disable-line no-eval
	'%EvalError%': EvalError,
	'%Float32Array%': typeof Float32Array === 'undefined' ? undefined$1 : Float32Array,
	'%Float64Array%': typeof Float64Array === 'undefined' ? undefined$1 : Float64Array,
	'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined$1 : FinalizationRegistry,
	'%Function%': $Function,
	'%GeneratorFunction%': needsEval,
	'%Int8Array%': typeof Int8Array === 'undefined' ? undefined$1 : Int8Array,
	'%Int16Array%': typeof Int16Array === 'undefined' ? undefined$1 : Int16Array,
	'%Int32Array%': typeof Int32Array === 'undefined' ? undefined$1 : Int32Array,
	'%isFinite%': isFinite,
	'%isNaN%': isNaN,
	'%IteratorPrototype%': hasSymbols ? getProto$1(getProto$1([][Symbol.iterator]())) : undefined$1,
	'%JSON%': typeof JSON === 'object' ? JSON : undefined$1,
	'%Map%': typeof Map === 'undefined' ? undefined$1 : Map,
	'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols ? undefined$1 : getProto$1(new Map()[Symbol.iterator]()),
	'%Math%': Math,
	'%Number%': Number,
	'%Object%': Object,
	'%parseFloat%': parseFloat,
	'%parseInt%': parseInt,
	'%Promise%': typeof Promise === 'undefined' ? undefined$1 : Promise,
	'%Proxy%': typeof Proxy === 'undefined' ? undefined$1 : Proxy,
	'%RangeError%': RangeError,
	'%ReferenceError%': ReferenceError,
	'%Reflect%': typeof Reflect === 'undefined' ? undefined$1 : Reflect,
	'%RegExp%': RegExp,
	'%Set%': typeof Set === 'undefined' ? undefined$1 : Set,
	'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols ? undefined$1 : getProto$1(new Set()[Symbol.iterator]()),
	'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined$1 : SharedArrayBuffer,
	'%String%': String,
	'%StringIteratorPrototype%': hasSymbols ? getProto$1(''[Symbol.iterator]()) : undefined$1,
	'%Symbol%': hasSymbols ? Symbol : undefined$1,
	'%SyntaxError%': $SyntaxError,
	'%ThrowTypeError%': ThrowTypeError,
	'%TypedArray%': TypedArray,
	'%TypeError%': $TypeError,
	'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined$1 : Uint8Array,
	'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined$1 : Uint8ClampedArray,
	'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined$1 : Uint16Array,
	'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined$1 : Uint32Array,
	'%URIError%': URIError,
	'%WeakMap%': typeof WeakMap === 'undefined' ? undefined$1 : WeakMap,
	'%WeakRef%': typeof WeakRef === 'undefined' ? undefined$1 : WeakRef,
	'%WeakSet%': typeof WeakSet === 'undefined' ? undefined$1 : WeakSet
};

var doEval = function doEval(name) {
	var value;
	if (name === '%AsyncFunction%') {
		value = getEvalledConstructor('async function () {}');
	} else if (name === '%GeneratorFunction%') {
		value = getEvalledConstructor('function* () {}');
	} else if (name === '%AsyncGeneratorFunction%') {
		value = getEvalledConstructor('async function* () {}');
	} else if (name === '%AsyncGenerator%') {
		var fn = doEval('%AsyncGeneratorFunction%');
		if (fn) {
			value = fn.prototype;
		}
	} else if (name === '%AsyncIteratorPrototype%') {
		var gen = doEval('%AsyncGenerator%');
		if (gen) {
			value = getProto$1(gen.prototype);
		}
	}

	INTRINSICS[name] = value;

	return value;
};

var LEGACY_ALIASES = {
	'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],
	'%ArrayPrototype%': ['Array', 'prototype'],
	'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],
	'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],
	'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],
	'%ArrayProto_values%': ['Array', 'prototype', 'values'],
	'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],
	'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],
	'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],
	'%BooleanPrototype%': ['Boolean', 'prototype'],
	'%DataViewPrototype%': ['DataView', 'prototype'],
	'%DatePrototype%': ['Date', 'prototype'],
	'%ErrorPrototype%': ['Error', 'prototype'],
	'%EvalErrorPrototype%': ['EvalError', 'prototype'],
	'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],
	'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],
	'%FunctionPrototype%': ['Function', 'prototype'],
	'%Generator%': ['GeneratorFunction', 'prototype'],
	'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],
	'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],
	'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],
	'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],
	'%JSONParse%': ['JSON', 'parse'],
	'%JSONStringify%': ['JSON', 'stringify'],
	'%MapPrototype%': ['Map', 'prototype'],
	'%NumberPrototype%': ['Number', 'prototype'],
	'%ObjectPrototype%': ['Object', 'prototype'],
	'%ObjProto_toString%': ['Object', 'prototype', 'toString'],
	'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],
	'%PromisePrototype%': ['Promise', 'prototype'],
	'%PromiseProto_then%': ['Promise', 'prototype', 'then'],
	'%Promise_all%': ['Promise', 'all'],
	'%Promise_reject%': ['Promise', 'reject'],
	'%Promise_resolve%': ['Promise', 'resolve'],
	'%RangeErrorPrototype%': ['RangeError', 'prototype'],
	'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],
	'%RegExpPrototype%': ['RegExp', 'prototype'],
	'%SetPrototype%': ['Set', 'prototype'],
	'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],
	'%StringPrototype%': ['String', 'prototype'],
	'%SymbolPrototype%': ['Symbol', 'prototype'],
	'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],
	'%TypedArrayPrototype%': ['TypedArray', 'prototype'],
	'%TypeErrorPrototype%': ['TypeError', 'prototype'],
	'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],
	'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],
	'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],
	'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],
	'%URIErrorPrototype%': ['URIError', 'prototype'],
	'%WeakMapPrototype%': ['WeakMap', 'prototype'],
	'%WeakSetPrototype%': ['WeakSet', 'prototype']
};

var bind = functionBind;
var hasOwn$1 = src;
var $concat = bind.call(Function.call, Array.prototype.concat);
var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
var $replace = bind.call(Function.call, String.prototype.replace);
var $strSlice = bind.call(Function.call, String.prototype.slice);

/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */
var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */
var stringToPath = function stringToPath(string) {
	var first = $strSlice(string, 0, 1);
	var last = $strSlice(string, -1);
	if (first === '%' && last !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected closing `%`');
	} else if (last === '%' && first !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected opening `%`');
	}
	var result = [];
	$replace(string, rePropName, function (match, number, quote, subString) {
		result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;
	});
	return result;
};
/* end adaptation */

var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
	var intrinsicName = name;
	var alias;
	if (hasOwn$1(LEGACY_ALIASES, intrinsicName)) {
		alias = LEGACY_ALIASES[intrinsicName];
		intrinsicName = '%' + alias[0] + '%';
	}

	if (hasOwn$1(INTRINSICS, intrinsicName)) {
		var value = INTRINSICS[intrinsicName];
		if (value === needsEval) {
			value = doEval(intrinsicName);
		}
		if (typeof value === 'undefined' && !allowMissing) {
			throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
		}

		return {
			alias: alias,
			name: intrinsicName,
			value: value
		};
	}

	throw new $SyntaxError('intrinsic ' + name + ' does not exist!');
};

var getIntrinsic = function GetIntrinsic(name, allowMissing) {
	if (typeof name !== 'string' || name.length === 0) {
		throw new $TypeError('intrinsic name must be a non-empty string');
	}
	if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
		throw new $TypeError('"allowMissing" argument must be a boolean');
	}

	var parts = stringToPath(name);
	var intrinsicBaseName = parts.length > 0 ? parts[0] : '';

	var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
	var intrinsicRealName = intrinsic.name;
	var value = intrinsic.value;
	var skipFurtherCaching = false;

	var alias = intrinsic.alias;
	if (alias) {
		intrinsicBaseName = alias[0];
		$spliceApply(parts, $concat([0, 1], alias));
	}

	for (var i = 1, isOwn = true; i < parts.length; i += 1) {
		var part = parts[i];
		var first = $strSlice(part, 0, 1);
		var last = $strSlice(part, -1);
		if (
			(
				(first === '"' || first === "'" || first === '`')
				|| (last === '"' || last === "'" || last === '`')
			)
			&& first !== last
		) {
			throw new $SyntaxError('property names with quotes must have matching quotes');
		}
		if (part === 'constructor' || !isOwn) {
			skipFurtherCaching = true;
		}

		intrinsicBaseName += '.' + part;
		intrinsicRealName = '%' + intrinsicBaseName + '%';

		if (hasOwn$1(INTRINSICS, intrinsicRealName)) {
			value = INTRINSICS[intrinsicRealName];
		} else if (value != null) {
			if (!(part in value)) {
				if (!allowMissing) {
					throw new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');
				}
				return void undefined$1;
			}
			if ($gOPD$1 && (i + 1) >= parts.length) {
				var desc = $gOPD$1(value, part);
				isOwn = !!desc;

				// By convention, when a data property is converted to an accessor
				// property to emulate a data property that does not suffer from
				// the override mistake, that accessor's getter is marked with
				// an `originalValue` property. Here, when we detect this, we
				// uphold the illusion by pretending to see that original data
				// property, i.e., returning the value rather than the getter
				// itself.
				if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
					value = desc.get;
				} else {
					value = value[part];
				}
			} else {
				isOwn = hasOwn$1(value, part);
				value = value[part];
			}

			if (isOwn && !skipFurtherCaching) {
				INTRINSICS[intrinsicRealName] = value;
			}
		}
	}
	return value;
};

var callBind$1 = {exports: {}};

(function (module) {

var bind = functionBind;
var GetIntrinsic = getIntrinsic;

var $apply = GetIntrinsic('%Function.prototype.apply%');
var $call = GetIntrinsic('%Function.prototype.call%');
var $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);

var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);
var $defineProperty = GetIntrinsic('%Object.defineProperty%', true);
var $max = GetIntrinsic('%Math.max%');

if ($defineProperty) {
	try {
		$defineProperty({}, 'a', { value: 1 });
	} catch (e) {
		// IE 8 has a broken defineProperty
		$defineProperty = null;
	}
}

module.exports = function callBind(originalFunction) {
	var func = $reflectApply(bind, $call, arguments);
	if ($gOPD && $defineProperty) {
		var desc = $gOPD(func, 'length');
		if (desc.configurable) {
			// original length, plus the receiver, minus any additional arguments (after the receiver)
			$defineProperty(
				func,
				'length',
				{ value: 1 + $max(0, originalFunction.length - (arguments.length - 1)) }
			);
		}
	}
	return func;
};

var applyBind = function applyBind() {
	return $reflectApply(bind, $apply, arguments);
};

if ($defineProperty) {
	$defineProperty(module.exports, 'apply', { value: applyBind });
} else {
	module.exports.apply = applyBind;
}
}(callBind$1));

var GetIntrinsic$1 = getIntrinsic;

var callBind = callBind$1.exports;

var $indexOf$1 = callBind(GetIntrinsic$1('String.prototype.indexOf'));

var callBound$3 = function callBoundIntrinsic(name, allowMissing) {
	var intrinsic = GetIntrinsic$1(name, !!allowMissing);
	if (typeof intrinsic === 'function' && $indexOf$1(name, '.prototype.') > -1) {
		return callBind(intrinsic);
	}
	return intrinsic;
};

var hasToStringTag$3 = shams();
var callBound$2 = callBound$3;

var $toString$2 = callBound$2('Object.prototype.toString');

var isStandardArguments = function isArguments(value) {
	if (hasToStringTag$3 && value && typeof value === 'object' && Symbol.toStringTag in value) {
		return false;
	}
	return $toString$2(value) === '[object Arguments]';
};

var isLegacyArguments = function isArguments(value) {
	if (isStandardArguments(value)) {
		return true;
	}
	return value !== null &&
		typeof value === 'object' &&
		typeof value.length === 'number' &&
		value.length >= 0 &&
		$toString$2(value) !== '[object Array]' &&
		$toString$2(value.callee) === '[object Function]';
};

var supportsStandardArguments = (function () {
	return isStandardArguments(arguments);
}());

isStandardArguments.isLegacyArguments = isLegacyArguments; // for tests

var isArguments = supportsStandardArguments ? isStandardArguments : isLegacyArguments;

var toStr = Object.prototype.toString;
var fnToStr = Function.prototype.toString;
var isFnRegex = /^\s*(?:function)?\*/;
var hasToStringTag$2 = shams();
var getProto = Object.getPrototypeOf;
var getGeneratorFunc = function () { // eslint-disable-line consistent-return
	if (!hasToStringTag$2) {
		return false;
	}
	try {
		return Function('return function*() {}')();
	} catch (e) {
	}
};
var GeneratorFunction;

var isGeneratorFunction = function isGeneratorFunction(fn) {
	if (typeof fn !== 'function') {
		return false;
	}
	if (isFnRegex.test(fnToStr.call(fn))) {
		return true;
	}
	if (!hasToStringTag$2) {
		var str = toStr.call(fn);
		return str === '[object GeneratorFunction]';
	}
	if (!getProto) {
		return false;
	}
	if (typeof GeneratorFunction === 'undefined') {
		var generatorFunc = getGeneratorFunc();
		GeneratorFunction = generatorFunc ? getProto(generatorFunc) : false;
	}
	return getProto(fn) === GeneratorFunction;
};

var hasOwn = Object.prototype.hasOwnProperty;
var toString = Object.prototype.toString;

var foreach = function forEach (obj, fn, ctx) {
    if (toString.call(fn) !== '[object Function]') {
        throw new TypeError('iterator must be a function');
    }
    var l = obj.length;
    if (l === +l) {
        for (var i = 0; i < l; i++) {
            fn.call(ctx, obj[i], i, obj);
        }
    } else {
        for (var k in obj) {
            if (hasOwn.call(obj, k)) {
                fn.call(ctx, obj[k], k, obj);
            }
        }
    }
};

var possibleNames = [
	'BigInt64Array',
	'BigUint64Array',
	'Float32Array',
	'Float64Array',
	'Int16Array',
	'Int32Array',
	'Int8Array',
	'Uint16Array',
	'Uint32Array',
	'Uint8Array',
	'Uint8ClampedArray'
];

var g$2 = typeof globalThis === 'undefined' ? commonjsGlobal : globalThis;

var availableTypedArrays$2 = function availableTypedArrays() {
	var out = [];
	for (var i = 0; i < possibleNames.length; i++) {
		if (typeof g$2[possibleNames[i]] === 'function') {
			out[out.length] = possibleNames[i];
		}
	}
	return out;
};

var GetIntrinsic = getIntrinsic;

var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);
if ($gOPD) {
	try {
		$gOPD([], 'length');
	} catch (e) {
		// IE 8 has a broken gOPD
		$gOPD = null;
	}
}

var getOwnPropertyDescriptor = $gOPD;

var forEach$1 = foreach;
var availableTypedArrays$1 = availableTypedArrays$2;
var callBound$1 = callBound$3;

var $toString$1 = callBound$1('Object.prototype.toString');
var hasToStringTag$1 = shams();

var g$1 = typeof globalThis === 'undefined' ? commonjsGlobal : globalThis;
var typedArrays$1 = availableTypedArrays$1();

var $indexOf = callBound$1('Array.prototype.indexOf', true) || function indexOf(array, value) {
	for (var i = 0; i < array.length; i += 1) {
		if (array[i] === value) {
			return i;
		}
	}
	return -1;
};
var $slice$1 = callBound$1('String.prototype.slice');
var toStrTags$1 = {};
var gOPD$1 = getOwnPropertyDescriptor;
var getPrototypeOf$1 = Object.getPrototypeOf; // require('getprototypeof');
if (hasToStringTag$1 && gOPD$1 && getPrototypeOf$1) {
	forEach$1(typedArrays$1, function (typedArray) {
		var arr = new g$1[typedArray]();
		if (Symbol.toStringTag in arr) {
			var proto = getPrototypeOf$1(arr);
			var descriptor = gOPD$1(proto, Symbol.toStringTag);
			if (!descriptor) {
				var superProto = getPrototypeOf$1(proto);
				descriptor = gOPD$1(superProto, Symbol.toStringTag);
			}
			toStrTags$1[typedArray] = descriptor.get;
		}
	});
}

var tryTypedArrays$1 = function tryAllTypedArrays(value) {
	var anyTrue = false;
	forEach$1(toStrTags$1, function (getter, typedArray) {
		if (!anyTrue) {
			try {
				anyTrue = getter.call(value) === typedArray;
			} catch (e) { /**/ }
		}
	});
	return anyTrue;
};

var isTypedArray$1 = function isTypedArray(value) {
	if (!value || typeof value !== 'object') { return false; }
	if (!hasToStringTag$1 || !(Symbol.toStringTag in value)) {
		var tag = $slice$1($toString$1(value), 8, -1);
		return $indexOf(typedArrays$1, tag) > -1;
	}
	if (!gOPD$1) { return false; }
	return tryTypedArrays$1(value);
};

var forEach = foreach;
var availableTypedArrays = availableTypedArrays$2;
var callBound = callBound$3;

var $toString = callBound('Object.prototype.toString');
var hasToStringTag = shams();

var g = typeof globalThis === 'undefined' ? commonjsGlobal : globalThis;
var typedArrays = availableTypedArrays();

var $slice = callBound('String.prototype.slice');
var toStrTags = {};
var gOPD = getOwnPropertyDescriptor;
var getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');
if (hasToStringTag && gOPD && getPrototypeOf) {
	forEach(typedArrays, function (typedArray) {
		if (typeof g[typedArray] === 'function') {
			var arr = new g[typedArray]();
			if (Symbol.toStringTag in arr) {
				var proto = getPrototypeOf(arr);
				var descriptor = gOPD(proto, Symbol.toStringTag);
				if (!descriptor) {
					var superProto = getPrototypeOf(proto);
					descriptor = gOPD(superProto, Symbol.toStringTag);
				}
				toStrTags[typedArray] = descriptor.get;
			}
		}
	});
}

var tryTypedArrays = function tryAllTypedArrays(value) {
	var foundName = false;
	forEach(toStrTags, function (getter, typedArray) {
		if (!foundName) {
			try {
				var name = getter.call(value);
				if (name === typedArray) {
					foundName = name;
				}
			} catch (e) {}
		}
	});
	return foundName;
};

var isTypedArray = isTypedArray$1;

var whichTypedArray = function whichTypedArray(value) {
	if (!isTypedArray(value)) { return false; }
	if (!hasToStringTag || !(Symbol.toStringTag in value)) { return $slice($toString(value), 8, -1); }
	return tryTypedArrays(value);
};

(function (exports) {

var isArgumentsObject = isArguments;
var isGeneratorFunction$1 = isGeneratorFunction;
var whichTypedArray$1 = whichTypedArray;
var isTypedArray = isTypedArray$1;

function uncurryThis(f) {
  return f.call.bind(f);
}

var BigIntSupported = typeof BigInt !== 'undefined';
var SymbolSupported = typeof Symbol !== 'undefined';

var ObjectToString = uncurryThis(Object.prototype.toString);

var numberValue = uncurryThis(Number.prototype.valueOf);
var stringValue = uncurryThis(String.prototype.valueOf);
var booleanValue = uncurryThis(Boolean.prototype.valueOf);

if (BigIntSupported) {
  var bigIntValue = uncurryThis(BigInt.prototype.valueOf);
}

if (SymbolSupported) {
  var symbolValue = uncurryThis(Symbol.prototype.valueOf);
}

function checkBoxedPrimitive(value, prototypeValueOf) {
  if (typeof value !== 'object') {
    return false;
  }
  try {
    prototypeValueOf(value);
    return true;
  } catch(e) {
    return false;
  }
}

exports.isArgumentsObject = isArgumentsObject;
exports.isGeneratorFunction = isGeneratorFunction$1;
exports.isTypedArray = isTypedArray;

// Taken from here and modified for better browser support
// https://github.com/sindresorhus/p-is-promise/blob/cda35a513bda03f977ad5cde3a079d237e82d7ef/index.js
function isPromise(input) {
	return (
		(
			typeof Promise !== 'undefined' &&
			input instanceof Promise
		) ||
		(
			input !== null &&
			typeof input === 'object' &&
			typeof input.then === 'function' &&
			typeof input.catch === 'function'
		)
	);
}
exports.isPromise = isPromise;

function isArrayBufferView(value) {
  if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {
    return ArrayBuffer.isView(value);
  }

  return (
    isTypedArray(value) ||
    isDataView(value)
  );
}
exports.isArrayBufferView = isArrayBufferView;


function isUint8Array(value) {
  return whichTypedArray$1(value) === 'Uint8Array';
}
exports.isUint8Array = isUint8Array;

function isUint8ClampedArray(value) {
  return whichTypedArray$1(value) === 'Uint8ClampedArray';
}
exports.isUint8ClampedArray = isUint8ClampedArray;

function isUint16Array(value) {
  return whichTypedArray$1(value) === 'Uint16Array';
}
exports.isUint16Array = isUint16Array;

function isUint32Array(value) {
  return whichTypedArray$1(value) === 'Uint32Array';
}
exports.isUint32Array = isUint32Array;

function isInt8Array(value) {
  return whichTypedArray$1(value) === 'Int8Array';
}
exports.isInt8Array = isInt8Array;

function isInt16Array(value) {
  return whichTypedArray$1(value) === 'Int16Array';
}
exports.isInt16Array = isInt16Array;

function isInt32Array(value) {
  return whichTypedArray$1(value) === 'Int32Array';
}
exports.isInt32Array = isInt32Array;

function isFloat32Array(value) {
  return whichTypedArray$1(value) === 'Float32Array';
}
exports.isFloat32Array = isFloat32Array;

function isFloat64Array(value) {
  return whichTypedArray$1(value) === 'Float64Array';
}
exports.isFloat64Array = isFloat64Array;

function isBigInt64Array(value) {
  return whichTypedArray$1(value) === 'BigInt64Array';
}
exports.isBigInt64Array = isBigInt64Array;

function isBigUint64Array(value) {
  return whichTypedArray$1(value) === 'BigUint64Array';
}
exports.isBigUint64Array = isBigUint64Array;

function isMapToString(value) {
  return ObjectToString(value) === '[object Map]';
}
isMapToString.working = (
  typeof Map !== 'undefined' &&
  isMapToString(new Map())
);

function isMap(value) {
  if (typeof Map === 'undefined') {
    return false;
  }

  return isMapToString.working
    ? isMapToString(value)
    : value instanceof Map;
}
exports.isMap = isMap;

function isSetToString(value) {
  return ObjectToString(value) === '[object Set]';
}
isSetToString.working = (
  typeof Set !== 'undefined' &&
  isSetToString(new Set())
);
function isSet(value) {
  if (typeof Set === 'undefined') {
    return false;
  }

  return isSetToString.working
    ? isSetToString(value)
    : value instanceof Set;
}
exports.isSet = isSet;

function isWeakMapToString(value) {
  return ObjectToString(value) === '[object WeakMap]';
}
isWeakMapToString.working = (
  typeof WeakMap !== 'undefined' &&
  isWeakMapToString(new WeakMap())
);
function isWeakMap(value) {
  if (typeof WeakMap === 'undefined') {
    return false;
  }

  return isWeakMapToString.working
    ? isWeakMapToString(value)
    : value instanceof WeakMap;
}
exports.isWeakMap = isWeakMap;

function isWeakSetToString(value) {
  return ObjectToString(value) === '[object WeakSet]';
}
isWeakSetToString.working = (
  typeof WeakSet !== 'undefined' &&
  isWeakSetToString(new WeakSet())
);
function isWeakSet(value) {
  return isWeakSetToString(value);
}
exports.isWeakSet = isWeakSet;

function isArrayBufferToString(value) {
  return ObjectToString(value) === '[object ArrayBuffer]';
}
isArrayBufferToString.working = (
  typeof ArrayBuffer !== 'undefined' &&
  isArrayBufferToString(new ArrayBuffer())
);
function isArrayBuffer(value) {
  if (typeof ArrayBuffer === 'undefined') {
    return false;
  }

  return isArrayBufferToString.working
    ? isArrayBufferToString(value)
    : value instanceof ArrayBuffer;
}
exports.isArrayBuffer = isArrayBuffer;

function isDataViewToString(value) {
  return ObjectToString(value) === '[object DataView]';
}
isDataViewToString.working = (
  typeof ArrayBuffer !== 'undefined' &&
  typeof DataView !== 'undefined' &&
  isDataViewToString(new DataView(new ArrayBuffer(1), 0, 1))
);
function isDataView(value) {
  if (typeof DataView === 'undefined') {
    return false;
  }

  return isDataViewToString.working
    ? isDataViewToString(value)
    : value instanceof DataView;
}
exports.isDataView = isDataView;

// Store a copy of SharedArrayBuffer in case it's deleted elsewhere
var SharedArrayBufferCopy = typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : undefined;
function isSharedArrayBufferToString(value) {
  return ObjectToString(value) === '[object SharedArrayBuffer]';
}
function isSharedArrayBuffer(value) {
  if (typeof SharedArrayBufferCopy === 'undefined') {
    return false;
  }

  if (typeof isSharedArrayBufferToString.working === 'undefined') {
    isSharedArrayBufferToString.working = isSharedArrayBufferToString(new SharedArrayBufferCopy());
  }

  return isSharedArrayBufferToString.working
    ? isSharedArrayBufferToString(value)
    : value instanceof SharedArrayBufferCopy;
}
exports.isSharedArrayBuffer = isSharedArrayBuffer;

function isAsyncFunction(value) {
  return ObjectToString(value) === '[object AsyncFunction]';
}
exports.isAsyncFunction = isAsyncFunction;

function isMapIterator(value) {
  return ObjectToString(value) === '[object Map Iterator]';
}
exports.isMapIterator = isMapIterator;

function isSetIterator(value) {
  return ObjectToString(value) === '[object Set Iterator]';
}
exports.isSetIterator = isSetIterator;

function isGeneratorObject(value) {
  return ObjectToString(value) === '[object Generator]';
}
exports.isGeneratorObject = isGeneratorObject;

function isWebAssemblyCompiledModule(value) {
  return ObjectToString(value) === '[object WebAssembly.Module]';
}
exports.isWebAssemblyCompiledModule = isWebAssemblyCompiledModule;

function isNumberObject(value) {
  return checkBoxedPrimitive(value, numberValue);
}
exports.isNumberObject = isNumberObject;

function isStringObject(value) {
  return checkBoxedPrimitive(value, stringValue);
}
exports.isStringObject = isStringObject;

function isBooleanObject(value) {
  return checkBoxedPrimitive(value, booleanValue);
}
exports.isBooleanObject = isBooleanObject;

function isBigIntObject(value) {
  return BigIntSupported && checkBoxedPrimitive(value, bigIntValue);
}
exports.isBigIntObject = isBigIntObject;

function isSymbolObject(value) {
  return SymbolSupported && checkBoxedPrimitive(value, symbolValue);
}
exports.isSymbolObject = isSymbolObject;

function isBoxedPrimitive(value) {
  return (
    isNumberObject(value) ||
    isStringObject(value) ||
    isBooleanObject(value) ||
    isBigIntObject(value) ||
    isSymbolObject(value)
  );
}
exports.isBoxedPrimitive = isBoxedPrimitive;

function isAnyArrayBuffer(value) {
  return typeof Uint8Array !== 'undefined' && (
    isArrayBuffer(value) ||
    isSharedArrayBuffer(value)
  );
}
exports.isAnyArrayBuffer = isAnyArrayBuffer;

['isProxy', 'isExternal', 'isModuleNamespaceObject'].forEach(function(method) {
  Object.defineProperty(exports, method, {
    enumerable: false,
    value: function() {
      throw new Error(method + ' is not supported in userland');
    }
  });
});
}(types));

var isBuffer = function isBuffer(arg) {
  return arg instanceof Buffer;
};

var inherits = {exports: {}};

var inherits_browser = {exports: {}};

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  inherits_browser.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor;
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
    }
  };
} else {
  // old school shim for old browsers
  inherits_browser.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor;
      var TempCtor = function () {};
      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    }
  };
}

try {
  var util = require('util');
  /* istanbul ignore next */
  if (typeof util.inherits !== 'function') throw '';
  inherits.exports = util.inherits;
} catch (e) {
  /* istanbul ignore next */
  inherits.exports = inherits_browser.exports;
}

(function (exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||
  function getOwnPropertyDescriptors(obj) {
    var keys = Object.keys(obj);
    var descriptors = {};
    for (var i = 0; i < keys.length; i++) {
      descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
    }
    return descriptors;
  };

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  if (typeof process !== 'undefined' && process.noDeprecation === true) {
    return fn;
  }

  // Allow for deprecating things in the process of starting up.
  if (typeof process === 'undefined') {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnvRegex = /^$/;

if (process.env.NODE_DEBUG) {
  var debugEnv = process.env.NODE_DEBUG;
  debugEnv = debugEnv.replace(/[|\\{}()[\]^$+?.]/g, '\\$&')
    .replace(/\*/g, '.*')
    .replace(/,/g, '$|^')
    .toUpperCase();
  debugEnvRegex = new RegExp('^' + debugEnv + '$', 'i');
}
exports.debuglog = function(set) {
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (debugEnvRegex.test(set)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var length = output.reduce(function(prev, cur) {
    if (cur.indexOf('\n') >= 0) ;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
exports.types = types;

function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;
exports.types.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;
exports.types.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;
exports.types.isNativeError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = inherits.exports;

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

var kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;

exports.promisify = function promisify(original) {
  if (typeof original !== 'function')
    throw new TypeError('The "original" argument must be of type Function');

  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
    var fn = original[kCustomPromisifiedSymbol];
    if (typeof fn !== 'function') {
      throw new TypeError('The "util.promisify.custom" argument must be of type Function');
    }
    Object.defineProperty(fn, kCustomPromisifiedSymbol, {
      value: fn, enumerable: false, writable: false, configurable: true
    });
    return fn;
  }

  function fn() {
    var promiseResolve, promiseReject;
    var promise = new Promise(function (resolve, reject) {
      promiseResolve = resolve;
      promiseReject = reject;
    });

    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }
    args.push(function (err, value) {
      if (err) {
        promiseReject(err);
      } else {
        promiseResolve(value);
      }
    });

    try {
      original.apply(this, args);
    } catch (err) {
      promiseReject(err);
    }

    return promise;
  }

  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));

  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
    value: fn, enumerable: false, writable: false, configurable: true
  });
  return Object.defineProperties(
    fn,
    getOwnPropertyDescriptors(original)
  );
};

exports.promisify.custom = kCustomPromisifiedSymbol;

function callbackifyOnRejected(reason, cb) {
  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
  // Because `null` is a special error value in callbacks which means "no error
  // occurred", we error-wrap so the callback consumer can distinguish between
  // "the promise rejected with null" or "the promise fulfilled with undefined".
  if (!reason) {
    var newReason = new Error('Promise was rejected with a falsy value');
    newReason.reason = reason;
    reason = newReason;
  }
  return cb(reason);
}

function callbackify(original) {
  if (typeof original !== 'function') {
    throw new TypeError('The "original" argument must be of type Function');
  }

  // We DO NOT return the promise as it gives the user a false sense that
  // the promise is actually somehow related to the callback's execution
  // and that the callback throwing will reject the promise.
  function callbackified() {
    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }

    var maybeCb = args.pop();
    if (typeof maybeCb !== 'function') {
      throw new TypeError('The last argument must be of type Function');
    }
    var self = this;
    var cb = function() {
      return maybeCb.apply(self, arguments);
    };
    // In true node style we process the callback on `nextTick` with all the
    // implications (stack, `uncaughtException`, `async_hooks`)
    original.apply(this, args)
      .then(function(ret) { process.nextTick(cb.bind(null, null, ret)); },
            function(rej) { process.nextTick(callbackifyOnRejected.bind(null, rej, cb)); });
  }

  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
  Object.defineProperties(callbackified,
                          getOwnPropertyDescriptors(original));
  return callbackified;
}
exports.callbackify = callbackify;
}(util$1));

var eastasianwidth = {exports: {}};

(function (module) {
var eaw = {};

{
  module.exports = eaw;
}

eaw.eastAsianWidth = function(character) {
  var x = character.charCodeAt(0);
  var y = (character.length == 2) ? character.charCodeAt(1) : 0;
  var codePoint = x;
  if ((0xD800 <= x && x <= 0xDBFF) && (0xDC00 <= y && y <= 0xDFFF)) {
    x &= 0x3FF;
    y &= 0x3FF;
    codePoint = (x << 10) | y;
    codePoint += 0x10000;
  }

  if ((0x3000 == codePoint) ||
      (0xFF01 <= codePoint && codePoint <= 0xFF60) ||
      (0xFFE0 <= codePoint && codePoint <= 0xFFE6)) {
    return 'F';
  }
  if ((0x20A9 == codePoint) ||
      (0xFF61 <= codePoint && codePoint <= 0xFFBE) ||
      (0xFFC2 <= codePoint && codePoint <= 0xFFC7) ||
      (0xFFCA <= codePoint && codePoint <= 0xFFCF) ||
      (0xFFD2 <= codePoint && codePoint <= 0xFFD7) ||
      (0xFFDA <= codePoint && codePoint <= 0xFFDC) ||
      (0xFFE8 <= codePoint && codePoint <= 0xFFEE)) {
    return 'H';
  }
  if ((0x1100 <= codePoint && codePoint <= 0x115F) ||
      (0x11A3 <= codePoint && codePoint <= 0x11A7) ||
      (0x11FA <= codePoint && codePoint <= 0x11FF) ||
      (0x2329 <= codePoint && codePoint <= 0x232A) ||
      (0x2E80 <= codePoint && codePoint <= 0x2E99) ||
      (0x2E9B <= codePoint && codePoint <= 0x2EF3) ||
      (0x2F00 <= codePoint && codePoint <= 0x2FD5) ||
      (0x2FF0 <= codePoint && codePoint <= 0x2FFB) ||
      (0x3001 <= codePoint && codePoint <= 0x303E) ||
      (0x3041 <= codePoint && codePoint <= 0x3096) ||
      (0x3099 <= codePoint && codePoint <= 0x30FF) ||
      (0x3105 <= codePoint && codePoint <= 0x312D) ||
      (0x3131 <= codePoint && codePoint <= 0x318E) ||
      (0x3190 <= codePoint && codePoint <= 0x31BA) ||
      (0x31C0 <= codePoint && codePoint <= 0x31E3) ||
      (0x31F0 <= codePoint && codePoint <= 0x321E) ||
      (0x3220 <= codePoint && codePoint <= 0x3247) ||
      (0x3250 <= codePoint && codePoint <= 0x32FE) ||
      (0x3300 <= codePoint && codePoint <= 0x4DBF) ||
      (0x4E00 <= codePoint && codePoint <= 0xA48C) ||
      (0xA490 <= codePoint && codePoint <= 0xA4C6) ||
      (0xA960 <= codePoint && codePoint <= 0xA97C) ||
      (0xAC00 <= codePoint && codePoint <= 0xD7A3) ||
      (0xD7B0 <= codePoint && codePoint <= 0xD7C6) ||
      (0xD7CB <= codePoint && codePoint <= 0xD7FB) ||
      (0xF900 <= codePoint && codePoint <= 0xFAFF) ||
      (0xFE10 <= codePoint && codePoint <= 0xFE19) ||
      (0xFE30 <= codePoint && codePoint <= 0xFE52) ||
      (0xFE54 <= codePoint && codePoint <= 0xFE66) ||
      (0xFE68 <= codePoint && codePoint <= 0xFE6B) ||
      (0x1B000 <= codePoint && codePoint <= 0x1B001) ||
      (0x1F200 <= codePoint && codePoint <= 0x1F202) ||
      (0x1F210 <= codePoint && codePoint <= 0x1F23A) ||
      (0x1F240 <= codePoint && codePoint <= 0x1F248) ||
      (0x1F250 <= codePoint && codePoint <= 0x1F251) ||
      (0x20000 <= codePoint && codePoint <= 0x2F73F) ||
      (0x2B740 <= codePoint && codePoint <= 0x2FFFD) ||
      (0x30000 <= codePoint && codePoint <= 0x3FFFD)) {
    return 'W';
  }
  if ((0x0020 <= codePoint && codePoint <= 0x007E) ||
      (0x00A2 <= codePoint && codePoint <= 0x00A3) ||
      (0x00A5 <= codePoint && codePoint <= 0x00A6) ||
      (0x00AC == codePoint) ||
      (0x00AF == codePoint) ||
      (0x27E6 <= codePoint && codePoint <= 0x27ED) ||
      (0x2985 <= codePoint && codePoint <= 0x2986)) {
    return 'Na';
  }
  if ((0x00A1 == codePoint) ||
      (0x00A4 == codePoint) ||
      (0x00A7 <= codePoint && codePoint <= 0x00A8) ||
      (0x00AA == codePoint) ||
      (0x00AD <= codePoint && codePoint <= 0x00AE) ||
      (0x00B0 <= codePoint && codePoint <= 0x00B4) ||
      (0x00B6 <= codePoint && codePoint <= 0x00BA) ||
      (0x00BC <= codePoint && codePoint <= 0x00BF) ||
      (0x00C6 == codePoint) ||
      (0x00D0 == codePoint) ||
      (0x00D7 <= codePoint && codePoint <= 0x00D8) ||
      (0x00DE <= codePoint && codePoint <= 0x00E1) ||
      (0x00E6 == codePoint) ||
      (0x00E8 <= codePoint && codePoint <= 0x00EA) ||
      (0x00EC <= codePoint && codePoint <= 0x00ED) ||
      (0x00F0 == codePoint) ||
      (0x00F2 <= codePoint && codePoint <= 0x00F3) ||
      (0x00F7 <= codePoint && codePoint <= 0x00FA) ||
      (0x00FC == codePoint) ||
      (0x00FE == codePoint) ||
      (0x0101 == codePoint) ||
      (0x0111 == codePoint) ||
      (0x0113 == codePoint) ||
      (0x011B == codePoint) ||
      (0x0126 <= codePoint && codePoint <= 0x0127) ||
      (0x012B == codePoint) ||
      (0x0131 <= codePoint && codePoint <= 0x0133) ||
      (0x0138 == codePoint) ||
      (0x013F <= codePoint && codePoint <= 0x0142) ||
      (0x0144 == codePoint) ||
      (0x0148 <= codePoint && codePoint <= 0x014B) ||
      (0x014D == codePoint) ||
      (0x0152 <= codePoint && codePoint <= 0x0153) ||
      (0x0166 <= codePoint && codePoint <= 0x0167) ||
      (0x016B == codePoint) ||
      (0x01CE == codePoint) ||
      (0x01D0 == codePoint) ||
      (0x01D2 == codePoint) ||
      (0x01D4 == codePoint) ||
      (0x01D6 == codePoint) ||
      (0x01D8 == codePoint) ||
      (0x01DA == codePoint) ||
      (0x01DC == codePoint) ||
      (0x0251 == codePoint) ||
      (0x0261 == codePoint) ||
      (0x02C4 == codePoint) ||
      (0x02C7 == codePoint) ||
      (0x02C9 <= codePoint && codePoint <= 0x02CB) ||
      (0x02CD == codePoint) ||
      (0x02D0 == codePoint) ||
      (0x02D8 <= codePoint && codePoint <= 0x02DB) ||
      (0x02DD == codePoint) ||
      (0x02DF == codePoint) ||
      (0x0300 <= codePoint && codePoint <= 0x036F) ||
      (0x0391 <= codePoint && codePoint <= 0x03A1) ||
      (0x03A3 <= codePoint && codePoint <= 0x03A9) ||
      (0x03B1 <= codePoint && codePoint <= 0x03C1) ||
      (0x03C3 <= codePoint && codePoint <= 0x03C9) ||
      (0x0401 == codePoint) ||
      (0x0410 <= codePoint && codePoint <= 0x044F) ||
      (0x0451 == codePoint) ||
      (0x2010 == codePoint) ||
      (0x2013 <= codePoint && codePoint <= 0x2016) ||
      (0x2018 <= codePoint && codePoint <= 0x2019) ||
      (0x201C <= codePoint && codePoint <= 0x201D) ||
      (0x2020 <= codePoint && codePoint <= 0x2022) ||
      (0x2024 <= codePoint && codePoint <= 0x2027) ||
      (0x2030 == codePoint) ||
      (0x2032 <= codePoint && codePoint <= 0x2033) ||
      (0x2035 == codePoint) ||
      (0x203B == codePoint) ||
      (0x203E == codePoint) ||
      (0x2074 == codePoint) ||
      (0x207F == codePoint) ||
      (0x2081 <= codePoint && codePoint <= 0x2084) ||
      (0x20AC == codePoint) ||
      (0x2103 == codePoint) ||
      (0x2105 == codePoint) ||
      (0x2109 == codePoint) ||
      (0x2113 == codePoint) ||
      (0x2116 == codePoint) ||
      (0x2121 <= codePoint && codePoint <= 0x2122) ||
      (0x2126 == codePoint) ||
      (0x212B == codePoint) ||
      (0x2153 <= codePoint && codePoint <= 0x2154) ||
      (0x215B <= codePoint && codePoint <= 0x215E) ||
      (0x2160 <= codePoint && codePoint <= 0x216B) ||
      (0x2170 <= codePoint && codePoint <= 0x2179) ||
      (0x2189 == codePoint) ||
      (0x2190 <= codePoint && codePoint <= 0x2199) ||
      (0x21B8 <= codePoint && codePoint <= 0x21B9) ||
      (0x21D2 == codePoint) ||
      (0x21D4 == codePoint) ||
      (0x21E7 == codePoint) ||
      (0x2200 == codePoint) ||
      (0x2202 <= codePoint && codePoint <= 0x2203) ||
      (0x2207 <= codePoint && codePoint <= 0x2208) ||
      (0x220B == codePoint) ||
      (0x220F == codePoint) ||
      (0x2211 == codePoint) ||
      (0x2215 == codePoint) ||
      (0x221A == codePoint) ||
      (0x221D <= codePoint && codePoint <= 0x2220) ||
      (0x2223 == codePoint) ||
      (0x2225 == codePoint) ||
      (0x2227 <= codePoint && codePoint <= 0x222C) ||
      (0x222E == codePoint) ||
      (0x2234 <= codePoint && codePoint <= 0x2237) ||
      (0x223C <= codePoint && codePoint <= 0x223D) ||
      (0x2248 == codePoint) ||
      (0x224C == codePoint) ||
      (0x2252 == codePoint) ||
      (0x2260 <= codePoint && codePoint <= 0x2261) ||
      (0x2264 <= codePoint && codePoint <= 0x2267) ||
      (0x226A <= codePoint && codePoint <= 0x226B) ||
      (0x226E <= codePoint && codePoint <= 0x226F) ||
      (0x2282 <= codePoint && codePoint <= 0x2283) ||
      (0x2286 <= codePoint && codePoint <= 0x2287) ||
      (0x2295 == codePoint) ||
      (0x2299 == codePoint) ||
      (0x22A5 == codePoint) ||
      (0x22BF == codePoint) ||
      (0x2312 == codePoint) ||
      (0x2460 <= codePoint && codePoint <= 0x24E9) ||
      (0x24EB <= codePoint && codePoint <= 0x254B) ||
      (0x2550 <= codePoint && codePoint <= 0x2573) ||
      (0x2580 <= codePoint && codePoint <= 0x258F) ||
      (0x2592 <= codePoint && codePoint <= 0x2595) ||
      (0x25A0 <= codePoint && codePoint <= 0x25A1) ||
      (0x25A3 <= codePoint && codePoint <= 0x25A9) ||
      (0x25B2 <= codePoint && codePoint <= 0x25B3) ||
      (0x25B6 <= codePoint && codePoint <= 0x25B7) ||
      (0x25BC <= codePoint && codePoint <= 0x25BD) ||
      (0x25C0 <= codePoint && codePoint <= 0x25C1) ||
      (0x25C6 <= codePoint && codePoint <= 0x25C8) ||
      (0x25CB == codePoint) ||
      (0x25CE <= codePoint && codePoint <= 0x25D1) ||
      (0x25E2 <= codePoint && codePoint <= 0x25E5) ||
      (0x25EF == codePoint) ||
      (0x2605 <= codePoint && codePoint <= 0x2606) ||
      (0x2609 == codePoint) ||
      (0x260E <= codePoint && codePoint <= 0x260F) ||
      (0x2614 <= codePoint && codePoint <= 0x2615) ||
      (0x261C == codePoint) ||
      (0x261E == codePoint) ||
      (0x2640 == codePoint) ||
      (0x2642 == codePoint) ||
      (0x2660 <= codePoint && codePoint <= 0x2661) ||
      (0x2663 <= codePoint && codePoint <= 0x2665) ||
      (0x2667 <= codePoint && codePoint <= 0x266A) ||
      (0x266C <= codePoint && codePoint <= 0x266D) ||
      (0x266F == codePoint) ||
      (0x269E <= codePoint && codePoint <= 0x269F) ||
      (0x26BE <= codePoint && codePoint <= 0x26BF) ||
      (0x26C4 <= codePoint && codePoint <= 0x26CD) ||
      (0x26CF <= codePoint && codePoint <= 0x26E1) ||
      (0x26E3 == codePoint) ||
      (0x26E8 <= codePoint && codePoint <= 0x26FF) ||
      (0x273D == codePoint) ||
      (0x2757 == codePoint) ||
      (0x2776 <= codePoint && codePoint <= 0x277F) ||
      (0x2B55 <= codePoint && codePoint <= 0x2B59) ||
      (0x3248 <= codePoint && codePoint <= 0x324F) ||
      (0xE000 <= codePoint && codePoint <= 0xF8FF) ||
      (0xFE00 <= codePoint && codePoint <= 0xFE0F) ||
      (0xFFFD == codePoint) ||
      (0x1F100 <= codePoint && codePoint <= 0x1F10A) ||
      (0x1F110 <= codePoint && codePoint <= 0x1F12D) ||
      (0x1F130 <= codePoint && codePoint <= 0x1F169) ||
      (0x1F170 <= codePoint && codePoint <= 0x1F19A) ||
      (0xE0100 <= codePoint && codePoint <= 0xE01EF) ||
      (0xF0000 <= codePoint && codePoint <= 0xFFFFD) ||
      (0x100000 <= codePoint && codePoint <= 0x10FFFD)) {
    return 'A';
  }

  return 'N';
};

eaw.characterLength = function(character) {
  var code = this.eastAsianWidth(character);
  if (code == 'F' || code == 'W' || code == 'A') {
    return 2;
  } else {
    return 1;
  }
};

// Split a string considering surrogate-pairs.
function stringToArray(string) {
  return string.match(/[\uD800-\uDBFF][\uDC00-\uDFFF]|[^\uD800-\uDFFF]/g) || [];
}

eaw.length = function(string) {
  var characters = stringToArray(string);
  var len = 0;
  for (var i = 0; i < characters.length; i++) {
    len = len + this.characterLength(characters[i]);
  }
  return len;
};

eaw.slice = function(text, start, end) {
  textLen = eaw.length(text);
  start = start ? start : 0;
  end = end ? end : 1;
  if (start < 0) {
      start = textLen + start;
  }
  if (end < 0) {
      end = textLen + end;
  }
  var result = '';
  var eawLen = 0;
  var chars = stringToArray(text);
  for (var i = 0; i < chars.length; i++) {
    var char = chars[i];
    var charLen = eaw.length(char);
    if (eawLen >= start - (charLen == 2 ? 1 : 0)) {
        if (eawLen + charLen <= end) {
            result += char;
        } else {
            break;
        }
    }
    eawLen += charLen;
  }
  return result;
};
}(eastasianwidth));

function getLoggerLocale() {
  const defaultLocale = "en-US";
  if (process.env.LANG) {
    const extractedLocale = process.env.LANG.split(".")[0].replace(/_/g, "-");
    if (extractedLocale.length < 2)
      return defaultLocale;
    else
      return extractedLocale.substring(0, 5);
  } else
    return defaultLocale;
}
const dateTimeFormat = new Intl.DateTimeFormat(getLoggerLocale(), {
  hour: "2-digit",
  minute: "2-digit",
  second: "2-digit"
});
const levels = {
  debug: 20,
  info: 30,
  warn: 40,
  error: 50,
  silent: 90
};
function log(opts, level, type, ...args) {
  const logLevel = opts.level;
  const dest = opts.dest;
  const event = {
    type,
    level,
    args,
    message: ""
  };
  if (levels[logLevel] > levels[level]) {
    return;
  }
  dest.write(event);
}
function warn(opts, type, ...messages) {
  return log(opts, "warn", type, ...messages);
}
function debug(...args) {
  if ("_astroGlobalDebug" in globalThis) {
    globalThis._astroGlobalDebug(...args);
  }
}
if (typeof process !== "undefined") {
  if (process.argv.includes("--verbose")) ; else if (process.argv.includes("--silent")) ; else ;
}

let lastMessage;
let lastMessageCount = 1;
const consoleLogDestination = {
  write(event) {
    let dest = console.error;
    if (levels[event.level] < levels["error"]) {
      dest = console.log;
    }
    function getPrefix() {
      let prefix = "";
      let type = event.type;
      if (type) {
        prefix += dim(dateTimeFormat.format(new Date()) + " ");
        if (event.level === "info") {
          type = bold(cyan(`[${type}]`));
        } else if (event.level === "warn") {
          type = bold(yellow(`[${type}]`));
        } else if (event.level === "error") {
          type = bold(red(`[${type}]`));
        }
        prefix += `${type} `;
      }
      return reset(prefix);
    }
    let message = util$1.format(...event.args);
    if (message === lastMessage) {
      lastMessageCount++;
      message = `${message} ${yellow(`(x${lastMessageCount})`)}`;
    } else {
      lastMessage = message;
      lastMessageCount = 1;
    }
    const outMessage = getPrefix() + message;
    dest(outMessage);
    return true;
  }
};

function createRouteData(pattern, params, component, pathname, type, segments) {
  return {
    type,
    pattern,
    params,
    component,
    generate: () => "",
    pathname: pathname || void 0,
    segments
  };
}
function deserializeRouteData(rawRouteData) {
  const { component, params, pathname, type, segments } = rawRouteData;
  const pattern = new RegExp(rawRouteData.pattern);
  return createRouteData(pattern, params, component, pathname, type, segments);
}

var __defProp$a = Object.defineProperty;
var __defProps$3 = Object.defineProperties;
var __getOwnPropDescs$3 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$5 = Object.getOwnPropertySymbols;
var __hasOwnProp$5 = Object.prototype.hasOwnProperty;
var __propIsEnum$5 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$5 = (obj, key, value) => key in obj ? __defProp$a(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues$5 = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$5.call(b, prop))
      __defNormalProp$5(a, prop, b[prop]);
  if (__getOwnPropSymbols$5)
    for (var prop of __getOwnPropSymbols$5(b)) {
      if (__propIsEnum$5.call(b, prop))
        __defNormalProp$5(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps$3 = (a, b) => __defProps$3(a, __getOwnPropDescs$3(b));
function deserializeManifest(serializedManifest) {
  const routes = [];
  for (const serializedRoute of serializedManifest.routes) {
    routes.push(__spreadProps$3(__spreadValues$5({}, serializedRoute), {
      routeData: deserializeRouteData(serializedRoute.routeData)
    }));
    const route = serializedRoute;
    route.routeData = deserializeRouteData(serializedRoute.routeData);
  }
  return __spreadProps$3(__spreadValues$5({}, serializedManifest), {
    routes
  });
}

function matchRoute(pathname, manifest) {
  return manifest.routes.find((route) => route.pattern.test(pathname));
}

var shorthash$1 = {};

/*
	shorthash
	(c) 2013 Bibig
	
	https://github.com/bibig/node-shorthash
	shorthash may be freely distributed under the MIT license.
*/

shorthash$1.bitwise = bitwise;
shorthash$1.binaryTransfer = binaryTransfer;
shorthash$1.unique = unique;
shorthash$1.random = random;

// refer to: http://werxltd.com/wp/2010/05/13/javascript-implementation-of-javas-string-hashcode-method/
function bitwise(str){
	var hash = 0;
	if (str.length == 0) return hash;
	for (var i = 0; i < str.length; i++) {
		var ch = str.charCodeAt(i);
		hash = ((hash<<5)-hash) + ch;
		hash = hash & hash; // Convert to 32bit integer
	}
	return hash;
}

// 10进制转化成62进制以内的进制
// convert 10 binary to customized binary, max is 62
function binaryTransfer(integer, binary) {
	binary = binary || 62;
	var stack = [];
	var num;
	var result = '';
	var sign = integer < 0 ? '-' : '';
	
	function table (num) {
		var t = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
		return t[num];
	}
	
	integer = Math.abs(integer);
	
	while (integer >= binary) {
		num = integer % binary;
		integer = Math.floor(integer / binary);
		stack.push(table(num));
	}
	
	if (integer > 0) {
		stack.push(table(integer));
	}
	
	for (var i = stack.length - 1; i >= 0; i--) {
		result += stack[i];
	} 
	
	return sign + result;
}


/**
 * why choose 61 binary, because we need the last element char to replace the minus sign
 * eg: -aGtzd will be ZaGtzd
 */
function unique (text) {
	var id = binaryTransfer(bitwise(text), 61);
	return id.replace('-', 'Z');
}

function random (_len) {
	/*
	var len = _len || 8 ;
	return require('crypto').randomBytes(len).toString('hex');
	*/
	
	var chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz";
	var rs = '';
	var len = _len || 8 ;
	for (var i=0; i< len; i++) {
		var pos = Math.floor( Math.random() * chars.length);
		rs += chars.substring(pos, pos + 1);
	}
	return rs;
}

var shorthash = shorthash$1;

/**
 * Copyright (C) 2017-present by Andrea Giammarchi - @WebReflection
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

const {replace} = '';
const ca = /[&<>'"]/g;

const esca = {
  '&': '&amp;',
  '<': '&lt;',
  '>': '&gt;',
  "'": '&#39;',
  '"': '&quot;'
};
const pe = m => esca[m];

/**
 * Safely escape HTML entities such as `&`, `<`, `>`, `"`, and `'`.
 * @param {string} es the input to safely escape
 * @returns {string} the escaped input, and it **throws** an error if
 *  the input type is unexpected, except for boolean and numbers,
 *  converted as string.
 */
const escape = es => replace.call(es, ca, pe);

const escapeHTML = escape;
class HTMLString extends String {
}
const markHTMLString = (value) => {
  if (value instanceof HTMLString) {
    return value;
  }
  if (typeof value === "string") {
    return new HTMLString(value);
  }
  return value;
};

function serializeListValue(value) {
  const hash = {};
  push(value);
  return Object.keys(hash).join(" ");
  function push(item) {
    if (item && typeof item.forEach === "function")
      item.forEach(push);
    else if (item === Object(item))
      Object.keys(item).forEach((name) => {
        if (item[name])
          push(name);
      });
    else {
      item = item == null ? "" : String(item).trim();
      if (item) {
        item.split(/\s+/).forEach((name) => {
          hash[name] = true;
        });
      }
    }
  }
}
function hydrationSpecifier(hydrate) {
  return `astro/client/${hydrate}.js`;
}

var browser = {exports: {}};

var safeBuffer = {exports: {}};

var buffer = {};

var base64Js = {};

base64Js.byteLength = byteLength;
base64Js.toByteArray = toByteArray;
base64Js.fromByteArray = fromByteArray;

var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i];
  revLookup[code.charCodeAt(i)] = i;
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62;
revLookup['_'.charCodeAt(0)] = 63;

function getLens (b64) {
  var len = b64.length;

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=');
  if (validLen === -1) validLen = len;

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4);

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64);
  var validLen = lens[0];
  var placeHoldersLen = lens[1];
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp;
  var lens = getLens(b64);
  var validLen = lens[0];
  var placeHoldersLen = lens[1];

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));

  var curByte = 0;

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen;

  var i;
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)];
    arr[curByte++] = (tmp >> 16) & 0xFF;
    arr[curByte++] = (tmp >> 8) & 0xFF;
    arr[curByte++] = tmp & 0xFF;
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4);
    arr[curByte++] = tmp & 0xFF;
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2);
    arr[curByte++] = (tmp >> 8) & 0xFF;
    arr[curByte++] = tmp & 0xFF;
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp;
  var output = [];
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF);
    output.push(tripletToBase64(tmp));
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp;
  var len = uint8.length;
  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
  var parts = [];
  var maxChunkLength = 16383; // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1];
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    );
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1];
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    );
  }

  return parts.join('')
}

var ieee754 = {};

/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */

ieee754.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m;
  var eLen = (nBytes * 8) - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = -7;
  var i = isLE ? (nBytes - 1) : 0;
  var d = isLE ? -1 : 1;
  var s = buffer[offset + i];

  i += d;

  e = s & ((1 << (-nBits)) - 1);
  s >>= (-nBits);
  nBits += eLen;
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1);
  e >>= (-nBits);
  nBits += mLen;
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
};

ieee754.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c;
  var eLen = (nBytes * 8) - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
  var i = isLE ? 0 : (nBytes - 1);
  var d = isLE ? 1 : -1;
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

  value = Math.abs(value);

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }

    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m;
  eLen += mLen;
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128;
};

/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

(function (exports) {

var base64 = base64Js;
var ieee754$1 = ieee754;
var customInspectSymbol =
  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation
    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation
    : null;

exports.Buffer = Buffer;
exports.SlowBuffer = SlowBuffer;
exports.INSPECT_MAX_BYTES = 50;

var K_MAX_LENGTH = 0x7fffffff;
exports.kMaxLength = K_MAX_LENGTH;

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  );
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1);
    var proto = { foo: function () { return 42 } };
    Object.setPrototypeOf(proto, Uint8Array.prototype);
    Object.setPrototypeOf(arr, proto);
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.buffer
  }
});

Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.byteOffset
  }
});

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length);
  Object.setPrototypeOf(buf, Buffer.prototype);
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError(
        'The "string" argument must be of type string. Received type number'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192; // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  if (ArrayBuffer.isView(value)) {
    return fromArrayView(value)
  }

  if (value == null) {
    throw new TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }

  if (isInstance(value, ArrayBuffer) ||
      (value && isInstance(value.buffer, ArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof SharedArrayBuffer !== 'undefined' &&
      (isInstance(value, SharedArrayBuffer) ||
      (value && isInstance(value.buffer, SharedArrayBuffer)))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'number') {
    throw new TypeError(
      'The "value" argument must not be of type number. Received type number'
    )
  }

  var valueOf = value.valueOf && value.valueOf();
  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length)
  }

  var b = fromObject(value);
  if (b) return b

  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
      typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(
      value[Symbol.toPrimitive]('string'), encodingOrOffset, length
    )
  }

  throw new TypeError(
    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
    'or Array-like Object. Received type ' + (typeof value)
  )
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
};

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);
Object.setPrototypeOf(Buffer, Uint8Array);

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size);
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpreted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
};

function allocUnsafe (size) {
  assertSize(size);
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
};

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8';
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  var length = byteLength(string, encoding) | 0;
  var buf = createBuffer(length);

  var actual = buf.write(string, encoding);

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual);
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0;
  var buf = createBuffer(length);
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255;
  }
  return buf
}

function fromArrayView (arrayView) {
  if (isInstance(arrayView, Uint8Array)) {
    var copy = new Uint8Array(arrayView);
    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)
  }
  return fromArrayLike(arrayView)
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  var buf;
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array);
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset);
  } else {
    buf = new Uint8Array(array, byteOffset, length);
  }

  // Return an augmented `Uint8Array` instance
  Object.setPrototypeOf(buf, Buffer.prototype);

  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0;
    var buf = createBuffer(len);

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len);
    return buf
  }

  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0)
    }
    return fromArrayLike(obj)
  }

  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data)
  }
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0;
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true &&
    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
};

Buffer.compare = function compare (a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError(
      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
    )
  }

  if (a === b) return 0

  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
};

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
};

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i;
  if (length === undefined) {
    length = 0;
    for (i = 0; i < list.length; ++i) {
      length += list[i].length;
    }
  }

  var buffer = Buffer.allocUnsafe(length);
  var pos = 0;
  for (i = 0; i < list.length; ++i) {
    var buf = list[i];
    if (isInstance(buf, Uint8Array)) {
      if (pos + buf.length > buffer.length) {
        Buffer.from(buf).copy(buffer, pos);
      } else {
        Uint8Array.prototype.set.call(
          buffer,
          buf,
          pos
        );
      }
    } else if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    } else {
      buf.copy(buffer, pos);
    }
    pos += buf.length;
  }
  return buffer
};

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    throw new TypeError(
      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
      'Received type ' + typeof string
    )
  }

  var len = string.length;
  var mustMatch = (arguments.length > 2 && arguments[2] === true);
  if (!mustMatch && len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false;
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
        }
        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
}
Buffer.byteLength = byteLength;

function slowToString (encoding, start, end) {
  var loweredCase = false;

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0;
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length;
  }

  if (end <= 0) {
    return ''
  }

  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0;
  start >>>= 0;

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8';

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase();
        loweredCase = true;
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true;

function swap (b, n, m) {
  var i = b[n];
  b[n] = b[m];
  b[m] = i;
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length;
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1);
  }
  return this
};

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length;
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3);
    swap(this, i + 1, i + 2);
  }
  return this
};

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length;
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7);
    swap(this, i + 1, i + 6);
    swap(this, i + 2, i + 5);
    swap(this, i + 3, i + 4);
  }
  return this
};

Buffer.prototype.toString = function toString () {
  var length = this.length;
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
};

Buffer.prototype.toLocaleString = Buffer.prototype.toString;

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
};

Buffer.prototype.inspect = function inspect () {
  var str = '';
  var max = exports.INSPECT_MAX_BYTES;
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim();
  if (this.length > max) str += ' ... ';
  return '<Buffer ' + str + '>'
};
if (customInspectSymbol) {
  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength);
  }
  if (!Buffer.isBuffer(target)) {
    throw new TypeError(
      'The "target" argument must be one of type Buffer or Uint8Array. ' +
      'Received type ' + (typeof target)
    )
  }

  if (start === undefined) {
    start = 0;
  }
  if (end === undefined) {
    end = target ? target.length : 0;
  }
  if (thisStart === undefined) {
    thisStart = 0;
  }
  if (thisEnd === undefined) {
    thisEnd = this.length;
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0;
  end >>>= 0;
  thisStart >>>= 0;
  thisEnd >>>= 0;

  if (this === target) return 0

  var x = thisEnd - thisStart;
  var y = end - start;
  var len = Math.min(x, y);

  var thisCopy = this.slice(thisStart, thisEnd);
  var targetCopy = target.slice(start, end);

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i];
      y = targetCopy[i];
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
};

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset;
    byteOffset = 0;
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff;
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000;
  }
  byteOffset = +byteOffset; // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1);
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1;
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0;
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding);
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF; // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1;
  var arrLength = arr.length;
  var valLength = val.length;

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase();
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2;
      arrLength /= 2;
      valLength /= 2;
      byteOffset /= 2;
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i;
  if (dir) {
    var foundIndex = -1;
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i;
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex;
        foundIndex = -1;
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
    for (i = byteOffset; i >= 0; i--) {
      var found = true;
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false;
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
};

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
};

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
};

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0;
  var remaining = buf.length - offset;
  if (!length) {
    length = remaining;
  } else {
    length = Number(length);
    if (length > remaining) {
      length = remaining;
    }
  }

  var strLen = string.length;

  if (length > strLen / 2) {
    length = strLen / 2;
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16);
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed;
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8';
    length = this.length;
    offset = 0;
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset;
    length = this.length;
    offset = 0;
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0;
    if (isFinite(length)) {
      length = length >>> 0;
      if (encoding === undefined) encoding = 'utf8';
    } else {
      encoding = length;
      length = undefined;
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset;
  if (length === undefined || length > remaining) length = remaining;

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8';

  var loweredCase = false;
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
      case 'latin1':
      case 'binary':
        return asciiWrite(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
};

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
};

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end);
  var res = [];

  var i = start;
  while (i < end) {
    var firstByte = buf[i];
    var codePoint = null;
    var bytesPerSequence = (firstByte > 0xEF)
      ? 4
      : (firstByte > 0xDF)
          ? 3
          : (firstByte > 0xBF)
              ? 2
              : 1;

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint;

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte;
          }
          break
        case 2:
          secondByte = buf[i + 1];
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint;
            }
          }
          break
        case 3:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint;
            }
          }
          break
        case 4:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          fourthByte = buf[i + 3];
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint;
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD;
      bytesPerSequence = 1;
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000;
      res.push(codePoint >>> 10 & 0x3FF | 0xD800);
      codePoint = 0xDC00 | codePoint & 0x3FF;
    }

    res.push(codePoint);
    i += bytesPerSequence;
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000;

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length;
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = '';
  var i = 0;
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    );
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F);
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i]);
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length;

  if (!start || start < 0) start = 0;
  if (!end || end < 0 || end > len) end = len;

  var out = '';
  for (var i = start; i < end; ++i) {
    out += hexSliceLookupTable[buf[i]];
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end);
  var res = '';
  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
  for (var i = 0; i < bytes.length - 1; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256));
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length;
  start = ~~start;
  end = end === undefined ? len : ~~end;

  if (start < 0) {
    start += len;
    if (start < 0) start = 0;
  } else if (start > len) {
    start = len;
  }

  if (end < 0) {
    end += len;
    if (end < 0) end = 0;
  } else if (end > len) {
    end = len;
  }

  if (end < start) end = start;

  var newBuf = this.subarray(start, end);
  // Return an augmented `Uint8Array` instance
  Object.setPrototypeOf(newBuf, Buffer.prototype);

  return newBuf
};

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUintLE =
Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0;
  byteLength = byteLength >>> 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);

  var val = this[offset];
  var mul = 1;
  var i = 0;
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }

  return val
};

Buffer.prototype.readUintBE =
Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0;
  byteLength = byteLength >>> 0;
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length);
  }

  var val = this[offset + --byteLength];
  var mul = 1;
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul;
  }

  return val
};

Buffer.prototype.readUint8 =
Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 1, this.length);
  return this[offset]
};

Buffer.prototype.readUint16LE =
Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 2, this.length);
  return this[offset] | (this[offset + 1] << 8)
};

Buffer.prototype.readUint16BE =
Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 2, this.length);
  return (this[offset] << 8) | this[offset + 1]
};

Buffer.prototype.readUint32LE =
Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 4, this.length);

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
};

Buffer.prototype.readUint32BE =
Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 4, this.length);

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
};

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0;
  byteLength = byteLength >>> 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);

  var val = this[offset];
  var mul = 1;
  var i = 0;
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }
  mul *= 0x80;

  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

  return val
};

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0;
  byteLength = byteLength >>> 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);

  var i = byteLength;
  var mul = 1;
  var val = this[offset + --i];
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul;
  }
  mul *= 0x80;

  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

  return val
};

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 1, this.length);
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
};

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset] | (this[offset + 1] << 8);
  return (val & 0x8000) ? val | 0xFFFF0000 : val
};

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset + 1] | (this[offset] << 8);
  return (val & 0x8000) ? val | 0xFFFF0000 : val
};

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 4, this.length);

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
};

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 4, this.length);

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
};

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 4, this.length);
  return ieee754$1.read(this, offset, true, 23, 4)
};

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 4, this.length);
  return ieee754$1.read(this, offset, false, 23, 4)
};

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 8, this.length);
  return ieee754$1.read(this, offset, true, 52, 8)
};

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 8, this.length);
  return ieee754$1.read(this, offset, false, 52, 8)
};

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUintLE =
Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset >>> 0;
  byteLength = byteLength >>> 0;
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }

  var mul = 1;
  var i = 0;
  this[offset] = value & 0xFF;
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF;
  }

  return offset + byteLength
};

Buffer.prototype.writeUintBE =
Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset >>> 0;
  byteLength = byteLength >>> 0;
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }

  var i = byteLength - 1;
  var mul = 1;
  this[offset + i] = value & 0xFF;
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF;
  }

  return offset + byteLength
};

Buffer.prototype.writeUint8 =
Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
  this[offset] = (value & 0xff);
  return offset + 1
};

Buffer.prototype.writeUint16LE =
Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
  this[offset] = (value & 0xff);
  this[offset + 1] = (value >>> 8);
  return offset + 2
};

Buffer.prototype.writeUint16BE =
Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
  this[offset] = (value >>> 8);
  this[offset + 1] = (value & 0xff);
  return offset + 2
};

Buffer.prototype.writeUint32LE =
Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
  this[offset + 3] = (value >>> 24);
  this[offset + 2] = (value >>> 16);
  this[offset + 1] = (value >>> 8);
  this[offset] = (value & 0xff);
  return offset + 4
};

Buffer.prototype.writeUint32BE =
Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
  this[offset] = (value >>> 24);
  this[offset + 1] = (value >>> 16);
  this[offset + 2] = (value >>> 8);
  this[offset + 3] = (value & 0xff);
  return offset + 4
};

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1);

    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }

  var i = 0;
  var mul = 1;
  var sub = 0;
  this[offset] = value & 0xFF;
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1;
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
  }

  return offset + byteLength
};

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1);

    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }

  var i = byteLength - 1;
  var mul = 1;
  var sub = 0;
  this[offset + i] = value & 0xFF;
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1;
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
  }

  return offset + byteLength
};

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
  if (value < 0) value = 0xff + value + 1;
  this[offset] = (value & 0xff);
  return offset + 1
};

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
  this[offset] = (value & 0xff);
  this[offset + 1] = (value >>> 8);
  return offset + 2
};

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
  this[offset] = (value >>> 8);
  this[offset + 1] = (value & 0xff);
  return offset + 2
};

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
  this[offset] = (value & 0xff);
  this[offset + 1] = (value >>> 8);
  this[offset + 2] = (value >>> 16);
  this[offset + 3] = (value >>> 24);
  return offset + 4
};

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
  if (value < 0) value = 0xffffffff + value + 1;
  this[offset] = (value >>> 24);
  this[offset + 1] = (value >>> 16);
  this[offset + 2] = (value >>> 8);
  this[offset + 3] = (value & 0xff);
  return offset + 4
};

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4);
  }
  ieee754$1.write(buf, value, offset, littleEndian, 23, 4);
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
};

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
};

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8);
  }
  ieee754$1.write(buf, value, offset, littleEndian, 52, 8);
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
};

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
};

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0;
  if (!end && end !== 0) end = this.length;
  if (targetStart >= target.length) targetStart = target.length;
  if (!targetStart) targetStart = 0;
  if (end > 0 && end < start) end = start;

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length;
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start;
  }

  var len = end - start;

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end);
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    );
  }

  return len
};

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start;
      start = 0;
      end = this.length;
    } else if (typeof end === 'string') {
      encoding = end;
      end = this.length;
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0);
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code;
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255;
  } else if (typeof val === 'boolean') {
    val = Number(val);
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0;
  end = end === undefined ? this.length : end >>> 0;

  if (!val) val = 0;

  var i;
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val;
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : Buffer.from(val, encoding);
    var len = bytes.length;
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len];
    }
  }

  return this
};

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0];
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '');
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '=';
  }
  return str
}

function utf8ToBytes (string, units) {
  units = units || Infinity;
  var codePoint;
  var length = string.length;
  var leadSurrogate = null;
  var bytes = [];

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i);

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue
        }

        // valid lead
        leadSurrogate = codePoint;

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        leadSurrogate = codePoint;
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
    }

    leadSurrogate = null;

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint);
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      );
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      );
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      );
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = [];
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo;
  var byteArray = [];
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i);
    hi = c >> 8;
    lo = c % 256;
    byteArray.push(lo);
    byteArray.push(hi);
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i];
  }
  return i
}

// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance (obj, type) {
  return obj instanceof type ||
    (obj != null && obj.constructor != null && obj.constructor.name != null &&
      obj.constructor.name === type.name)
}
function numberIsNaN (obj) {
  // For IE11 support
  return obj !== obj // eslint-disable-line no-self-compare
}

// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
var hexSliceLookupTable = (function () {
  var alphabet = '0123456789abcdef';
  var table = new Array(256);
  for (var i = 0; i < 16; ++i) {
    var i16 = i * 16;
    for (var j = 0; j < 16; ++j) {
      table[i16 + j] = alphabet[i] + alphabet[j];
    }
  }
  return table
})();
}(buffer));

/* eslint-disable node/no-deprecated-api */

(function (module, exports) {
var buffer$1 = buffer;
var Buffer = buffer$1.Buffer;

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key];
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer$1;
} else {
  // Copy properties from require('buffer')
  copyProps(buffer$1, exports);
  exports.Buffer = SafeBuffer;
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer);

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
};

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size);
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding);
    } else {
      buf.fill(fill);
    }
  } else {
    buf.fill(0);
  }
  return buf
};

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
};

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer$1.SlowBuffer(size)
};
}(safeBuffer, safeBuffer.exports));

// limit of Crypto.getRandomValues()
// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues
var MAX_BYTES = 65536;

// Node supports requesting up to this number of bytes
// https://github.com/nodejs/node/blob/master/lib/internal/crypto/random.js#L48
var MAX_UINT32 = 4294967295;

function oldBrowser () {
  throw new Error('Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11')
}

var Buffer$1 = safeBuffer.exports.Buffer;
var crypto = commonjsGlobal.crypto || commonjsGlobal.msCrypto;

if (crypto && crypto.getRandomValues) {
  browser.exports = randomBytes$1;
} else {
  browser.exports = oldBrowser;
}

function randomBytes$1 (size, cb) {
  // phantomjs needs to throw
  if (size > MAX_UINT32) throw new RangeError('requested too many random bytes')

  var bytes = Buffer$1.allocUnsafe(size);

  if (size > 0) {  // getRandomValues fails on IE if size == 0
    if (size > MAX_BYTES) { // this is the max bytes crypto.getRandomValues
      // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
      for (var generated = 0; generated < size; generated += MAX_BYTES) {
        // buffer.slice automatically checks if the end is past the end of
        // the buffer so we don't have to here
        crypto.getRandomValues(bytes.slice(generated, generated + MAX_BYTES));
      }
    } else {
      crypto.getRandomValues(bytes);
    }
  }

  if (typeof cb === 'function') {
    return process.nextTick(function () {
      cb(null, bytes);
    })
  }

  return bytes
}

/*
Copyright (c) 2014, Yahoo! Inc. All rights reserved.
Copyrights licensed under the New BSD License.
See the accompanying LICENSE file for terms.
*/

var randomBytes = browser.exports;

// Generate an internal UID to make the regexp pattern harder to guess.
var UID_LENGTH          = 16;
var UID                 = generateUID();
var PLACE_HOLDER_REGEXP = new RegExp('(\\\\)?"@__(F|R|D|M|S|A|U|I|B|L)-' + UID + '-(\\d+)__@"', 'g');

var IS_NATIVE_CODE_REGEXP = /\{\s*\[native code\]\s*\}/g;
var IS_PURE_FUNCTION = /function.*?\(/;
var IS_ARROW_FUNCTION = /.*?=>.*?/;
var UNSAFE_CHARS_REGEXP   = /[<>\/\u2028\u2029]/g;

var RESERVED_SYMBOLS = ['*', 'async'];

// Mapping of unsafe HTML and invalid JavaScript line terminator chars to their
// Unicode char counterparts which are safe to use in JavaScript strings.
var ESCAPED_CHARS = {
    '<'     : '\\u003C',
    '>'     : '\\u003E',
    '/'     : '\\u002F',
    '\u2028': '\\u2028',
    '\u2029': '\\u2029'
};

function escapeUnsafeChars(unsafeChar) {
    return ESCAPED_CHARS[unsafeChar];
}

function generateUID() {
    var bytes = randomBytes(UID_LENGTH);
    var result = '';
    for(var i=0; i<UID_LENGTH; ++i) {
        result += bytes[i].toString(16);
    }
    return result;
}

function deleteFunctions(obj){
    var functionKeys = [];
    for (var key in obj) {
        if (typeof obj[key] === "function") {
            functionKeys.push(key);
        }
    }
    for (var i = 0; i < functionKeys.length; i++) {
        delete obj[functionKeys[i]];
    }
}

var serializeJavascript = function serialize(obj, options) {
    options || (options = {});

    // Backwards-compatibility for `space` as the second argument.
    if (typeof options === 'number' || typeof options === 'string') {
        options = {space: options};
    }

    var functions = [];
    var regexps   = [];
    var dates     = [];
    var maps      = [];
    var sets      = [];
    var arrays    = [];
    var undefs    = [];
    var infinities= [];
    var bigInts = [];
    var urls = [];

    // Returns placeholders for functions and regexps (identified by index)
    // which are later replaced by their string representation.
    function replacer(key, value) {

        // For nested function
        if(options.ignoreFunction){
            deleteFunctions(value);
        }

        if (!value && value !== undefined) {
            return value;
        }

        // If the value is an object w/ a toJSON method, toJSON is called before
        // the replacer runs, so we use this[key] to get the non-toJSONed value.
        var origValue = this[key];
        var type = typeof origValue;

        if (type === 'object') {
            if(origValue instanceof RegExp) {
                return '@__R-' + UID + '-' + (regexps.push(origValue) - 1) + '__@';
            }

            if(origValue instanceof Date) {
                return '@__D-' + UID + '-' + (dates.push(origValue) - 1) + '__@';
            }

            if(origValue instanceof Map) {
                return '@__M-' + UID + '-' + (maps.push(origValue) - 1) + '__@';
            }

            if(origValue instanceof Set) {
                return '@__S-' + UID + '-' + (sets.push(origValue) - 1) + '__@';
            }

            if(origValue instanceof Array) {
                var isSparse = origValue.filter(function(){return true}).length !== origValue.length;
                if (isSparse) {
                    return '@__A-' + UID + '-' + (arrays.push(origValue) - 1) + '__@';
                }
            }

            if(origValue instanceof URL) {
                return '@__L-' + UID + '-' + (urls.push(origValue) - 1) + '__@';
            }
        }

        if (type === 'function') {
            return '@__F-' + UID + '-' + (functions.push(origValue) - 1) + '__@';
        }

        if (type === 'undefined') {
            return '@__U-' + UID + '-' + (undefs.push(origValue) - 1) + '__@';
        }

        if (type === 'number' && !isNaN(origValue) && !isFinite(origValue)) {
            return '@__I-' + UID + '-' + (infinities.push(origValue) - 1) + '__@';
        }

        if (type === 'bigint') {
            return '@__B-' + UID + '-' + (bigInts.push(origValue) - 1) + '__@';
        }

        return value;
    }

    function serializeFunc(fn) {
      var serializedFn = fn.toString();
      if (IS_NATIVE_CODE_REGEXP.test(serializedFn)) {
          throw new TypeError('Serializing native function: ' + fn.name);
      }

      // pure functions, example: {key: function() {}}
      if(IS_PURE_FUNCTION.test(serializedFn)) {
          return serializedFn;
      }

      // arrow functions, example: arg1 => arg1+5
      if(IS_ARROW_FUNCTION.test(serializedFn)) {
          return serializedFn;
      }

      var argsStartsAt = serializedFn.indexOf('(');
      var def = serializedFn.substr(0, argsStartsAt)
        .trim()
        .split(' ')
        .filter(function(val) { return val.length > 0 });

      var nonReservedSymbols = def.filter(function(val) {
        return RESERVED_SYMBOLS.indexOf(val) === -1
      });

      // enhanced literal objects, example: {key() {}}
      if(nonReservedSymbols.length > 0) {
          return (def.indexOf('async') > -1 ? 'async ' : '') + 'function'
            + (def.join('').indexOf('*') > -1 ? '*' : '')
            + serializedFn.substr(argsStartsAt);
      }

      // arrow functions
      return serializedFn;
    }

    // Check if the parameter is function
    if (options.ignoreFunction && typeof obj === "function") {
        obj = undefined;
    }
    // Protects against `JSON.stringify()` returning `undefined`, by serializing
    // to the literal string: "undefined".
    if (obj === undefined) {
        return String(obj);
    }

    var str;

    // Creates a JSON string representation of the value.
    // NOTE: Node 0.12 goes into slow mode with extra JSON.stringify() args.
    if (options.isJSON && !options.space) {
        str = JSON.stringify(obj);
    } else {
        str = JSON.stringify(obj, options.isJSON ? null : replacer, options.space);
    }

    // Protects against `JSON.stringify()` returning `undefined`, by serializing
    // to the literal string: "undefined".
    if (typeof str !== 'string') {
        return String(str);
    }

    // Replace unsafe HTML and invalid JavaScript line terminator chars with
    // their safe Unicode char counterpart. This _must_ happen before the
    // regexps and functions are serialized and added back to the string.
    if (options.unsafe !== true) {
        str = str.replace(UNSAFE_CHARS_REGEXP, escapeUnsafeChars);
    }

    if (functions.length === 0 && regexps.length === 0 && dates.length === 0 && maps.length === 0 && sets.length === 0 && arrays.length === 0 && undefs.length === 0 && infinities.length === 0 && bigInts.length === 0 && urls.length === 0) {
        return str;
    }

    // Replaces all occurrences of function, regexp, date, map and set placeholders in the
    // JSON string with their string representations. If the original value can
    // not be found, then `undefined` is used.
    return str.replace(PLACE_HOLDER_REGEXP, function (match, backSlash, type, valueIndex) {
        // The placeholder may not be preceded by a backslash. This is to prevent
        // replacing things like `"a\"@__R-<UID>-0__@"` and thus outputting
        // invalid JS.
        if (backSlash) {
            return match;
        }

        if (type === 'D') {
            return "new Date(\"" + dates[valueIndex].toISOString() + "\")";
        }

        if (type === 'R') {
            return "new RegExp(" + serialize(regexps[valueIndex].source) + ", \"" + regexps[valueIndex].flags + "\")";
        }

        if (type === 'M') {
            return "new Map(" + serialize(Array.from(maps[valueIndex].entries()), options) + ")";
        }

        if (type === 'S') {
            return "new Set(" + serialize(Array.from(sets[valueIndex].values()), options) + ")";
        }

        if (type === 'A') {
            return "Array.prototype.slice.call(" + serialize(Object.assign({ length: arrays[valueIndex].length }, arrays[valueIndex]), options) + ")";
        }

        if (type === 'U') {
            return 'undefined'
        }

        if (type === 'I') {
            return infinities[valueIndex];
        }

        if (type === 'B') {
            return "BigInt(\"" + bigInts[valueIndex] + "\")";
        }

        if (type === 'L') {
            return "new URL(\"" + urls[valueIndex].toString() + "\")"; 
        }

        var fn = functions[valueIndex];

        return serializeFunc(fn);
    });
};

function serializeProps(value) {
  return serializeJavascript(value);
}
const HydrationDirectives = ["load", "idle", "media", "visible", "only"];
function extractDirectives(inputProps) {
  let extracted = {
    hydration: null,
    props: {}
  };
  for (const [key, value] of Object.entries(inputProps)) {
    if (key.startsWith("client:")) {
      if (!extracted.hydration) {
        extracted.hydration = {
          directive: "",
          value: "",
          componentUrl: "",
          componentExport: { value: "" }
        };
      }
      switch (key) {
        case "client:component-path": {
          extracted.hydration.componentUrl = value;
          break;
        }
        case "client:component-export": {
          extracted.hydration.componentExport.value = value;
          break;
        }
        case "client:component-hydration": {
          break;
        }
        default: {
          extracted.hydration.directive = key.split(":")[1];
          extracted.hydration.value = value;
          if (HydrationDirectives.indexOf(extracted.hydration.directive) < 0) {
            throw new Error(`Error: invalid hydration directive "${key}". Supported hydration methods: ${HydrationDirectives.map((d) => `"client:${d}"`).join(", ")}`);
          }
          if (extracted.hydration.directive === "media" && typeof extracted.hydration.value !== "string") {
            throw new Error('Error: Media query must be provided for "client:media", similar to client:media="(max-width: 600px)"');
          }
          break;
        }
      }
    } else if (key === "class:list") {
      extracted.props[key.slice(0, -5)] = serializeListValue(value);
    } else {
      extracted.props[key] = value;
    }
  }
  return extracted;
}
async function generateHydrateScript(scriptOptions, metadata) {
  const { renderer, result, astroId, props } = scriptOptions;
  const { hydrate, componentUrl, componentExport } = metadata;
  if (!componentExport) {
    throw new Error(`Unable to resolve a componentExport for "${metadata.displayName}"! Please open an issue.`);
  }
  let hydrationSource = ``;
  hydrationSource += renderer.clientEntrypoint ? `const [{ ${componentExport.value}: Component }, { default: hydrate }] = await Promise.all([import("${await result.resolve(componentUrl)}"), import("${await result.resolve(renderer.clientEntrypoint)}")]);
  return (el, children) => hydrate(el)(Component, ${serializeProps(props)}, children);
` : `await import("${await result.resolve(componentUrl)}");
  return () => {};
`;
  const hydrationScript = {
    props: { type: "module", "data-astro-component-hydration": true },
    children: `import setup from '${await result.resolve(hydrationSpecifier(hydrate))}';
${`import '${await result.resolve("astro:scripts/before-hydration.js")}';`}
setup("${astroId}", {name:"${metadata.displayName}",${metadata.hydrateArgs ? `value: ${JSON.stringify(metadata.hydrateArgs)}` : ""}}, async () => {
  ${hydrationSource}
});
`
  };
  return hydrationScript;
}

class Metadata {
  constructor(filePathname, opts) {
    this.modules = opts.modules;
    this.hoisted = opts.hoisted;
    this.hydratedComponents = opts.hydratedComponents;
    this.clientOnlyComponents = opts.clientOnlyComponents;
    this.hydrationDirectives = opts.hydrationDirectives;
    this.mockURL = new URL(filePathname, "http://example.com");
    this.metadataCache = /* @__PURE__ */ new Map();
  }
  resolvePath(specifier) {
    return specifier.startsWith(".") ? new URL(specifier, this.mockURL).pathname : specifier;
  }
  getPath(Component) {
    const metadata = this.getComponentMetadata(Component);
    return (metadata == null ? void 0 : metadata.componentUrl) || null;
  }
  getExport(Component) {
    const metadata = this.getComponentMetadata(Component);
    return (metadata == null ? void 0 : metadata.componentExport) || null;
  }
  *hydratedComponentPaths() {
    const found = /* @__PURE__ */ new Set();
    for (const metadata of this.deepMetadata()) {
      for (const component of metadata.hydratedComponents) {
        const path = metadata.getPath(component);
        if (path && !found.has(path)) {
          found.add(path);
          yield path;
        }
      }
    }
  }
  *clientOnlyComponentPaths() {
    const found = /* @__PURE__ */ new Set();
    for (const metadata of this.deepMetadata()) {
      for (const component of metadata.clientOnlyComponents) {
        const path = metadata.resolvePath(component);
        if (path && !found.has(path)) {
          found.add(path);
          yield path;
        }
      }
    }
  }
  *hydrationDirectiveSpecifiers() {
    const found = /* @__PURE__ */ new Set();
    for (const metadata of this.deepMetadata()) {
      for (const directive of metadata.hydrationDirectives) {
        if (!found.has(directive)) {
          found.add(directive);
          yield hydrationSpecifier(directive);
        }
      }
    }
  }
  *hoistedScriptPaths() {
    for (const metadata of this.deepMetadata()) {
      let i = 0, pathname = metadata.mockURL.pathname;
      while (i < metadata.hoisted.length) {
        yield `${pathname}?astro&type=script&index=${i}`;
        i++;
      }
    }
  }
  *deepMetadata() {
    yield this;
    const seen = /* @__PURE__ */ new Set();
    for (const { module: mod } of this.modules) {
      if (typeof mod.$$metadata !== "undefined") {
        const md = mod.$$metadata;
        for (const childMetdata of md.deepMetadata()) {
          if (!seen.has(childMetdata)) {
            seen.add(childMetdata);
            yield childMetdata;
          }
        }
      }
    }
  }
  getComponentMetadata(Component) {
    if (this.metadataCache.has(Component)) {
      return this.metadataCache.get(Component);
    }
    const metadata = this.findComponentMetadata(Component);
    this.metadataCache.set(Component, metadata);
    return metadata;
  }
  findComponentMetadata(Component) {
    const isCustomElement = typeof Component === "string";
    for (const { module, specifier } of this.modules) {
      const id = this.resolvePath(specifier);
      for (const [key, value] of Object.entries(module)) {
        if (isCustomElement) {
          if (key === "tagName" && Component === value) {
            return {
              componentExport: key,
              componentUrl: id
            };
          }
        } else if (Component === value) {
          return {
            componentExport: key,
            componentUrl: id
          };
        }
      }
    }
    return null;
  }
}
function createMetadata(filePathname, options) {
  return new Metadata(filePathname, options);
}

var __defProp$9 = Object.defineProperty;
var __defProps$2 = Object.defineProperties;
var __getOwnPropDescs$2 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$4 = Object.getOwnPropertySymbols;
var __hasOwnProp$4 = Object.prototype.hasOwnProperty;
var __propIsEnum$4 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$4 = (obj, key, value) => key in obj ? __defProp$9(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues$4 = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$4.call(b, prop))
      __defNormalProp$4(a, prop, b[prop]);
  if (__getOwnPropSymbols$4)
    for (var prop of __getOwnPropSymbols$4(b)) {
      if (__propIsEnum$4.call(b, prop))
        __defNormalProp$4(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps$2 = (a, b) => __defProps$2(a, __getOwnPropDescs$2(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp$4.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols$4)
    for (var prop of __getOwnPropSymbols$4(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum$4.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const voidElementNames = /^(area|base|br|col|command|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)$/i;
const htmlBooleanAttributes = /^(allowfullscreen|async|autofocus|autoplay|controls|default|defer|disabled|disablepictureinpicture|disableremoteplayback|formnovalidate|hidden|loop|nomodule|novalidate|open|playsinline|readonly|required|reversed|scoped|seamless|itemscope)$/i;
const htmlEnumAttributes = /^(contenteditable|draggable|spellcheck|value)$/i;
const svgEnumAttributes = /^(autoReverse|externalResourcesRequired|focusable|preserveAlpha)$/i;
async function _render(child) {
  child = await child;
  if (child instanceof HTMLString) {
    return child;
  } else if (Array.isArray(child)) {
    return markHTMLString((await Promise.all(child.map((value) => _render(value)))).join(""));
  } else if (typeof child === "function") {
    return _render(child());
  } else if (typeof child === "string") {
    return markHTMLString(escapeHTML(child));
  } else if (!child && child !== 0) ; else if (child instanceof AstroComponent || Object.prototype.toString.call(child) === "[object AstroComponent]") {
    return markHTMLString(await renderAstroComponent(child));
  } else {
    return child;
  }
}
class AstroComponent {
  constructor(htmlParts, expressions) {
    this.htmlParts = htmlParts;
    this.expressions = expressions;
  }
  get [Symbol.toStringTag]() {
    return "AstroComponent";
  }
  *[Symbol.iterator]() {
    const { htmlParts, expressions } = this;
    for (let i = 0; i < htmlParts.length; i++) {
      const html = htmlParts[i];
      const expression = expressions[i];
      yield markHTMLString(html);
      yield _render(expression);
    }
  }
}
function isAstroComponent(obj) {
  return typeof obj === "object" && Object.prototype.toString.call(obj) === "[object AstroComponent]";
}
async function render$1(htmlParts, ...expressions) {
  return new AstroComponent(htmlParts, expressions);
}
function createComponent(cb) {
  cb.isAstroComponentFactory = true;
  return cb;
}
async function renderSlot(_result, slotted, fallback) {
  if (slotted) {
    return await _render(slotted);
  }
  return fallback;
}
const Fragment = Symbol("Astro.Fragment");
function guessRenderers(componentUrl) {
  const extname = componentUrl == null ? void 0 : componentUrl.split(".").pop();
  switch (extname) {
    case "svelte":
      return ["@astrojs/svelte"];
    case "vue":
      return ["@astrojs/vue"];
    case "jsx":
    case "tsx":
      return ["@astrojs/react", "@astrojs/preact"];
    default:
      return ["@astrojs/react", "@astrojs/preact", "@astrojs/vue", "@astrojs/svelte"];
  }
}
function formatList(values) {
  if (values.length === 1) {
    return values[0];
  }
  return `${values.slice(0, -1).join(", ")} or ${values[values.length - 1]}`;
}
async function renderComponent(result, displayName, Component, _props, slots = {}) {
  var _a;
  Component = await Component;
  if (Component === Fragment) {
    const children2 = await renderSlot(result, slots == null ? void 0 : slots.default);
    if (children2 == null) {
      return children2;
    }
    return markHTMLString(children2);
  }
  if (Component && Component.isAstroComponentFactory) {
    const output = await renderToString(result, Component, _props, slots);
    return markHTMLString(output);
  }
  if (Component === null && !_props["client:only"]) {
    throw new Error(`Unable to render ${displayName} because it is ${Component}!
Did you forget to import the component or is it possible there is a typo?`);
  }
  const { renderers } = result._metadata;
  const metadata = { displayName };
  const { hydration, props } = extractDirectives(_props);
  let html = "";
  if (hydration) {
    metadata.hydrate = hydration.directive;
    metadata.hydrateArgs = hydration.value;
    metadata.componentExport = hydration.componentExport;
    metadata.componentUrl = hydration.componentUrl;
  }
  const probableRendererNames = guessRenderers(metadata.componentUrl);
  if (Array.isArray(renderers) && renderers.length === 0 && typeof Component !== "string" && !componentIsHTMLElement(Component)) {
    const message = `Unable to render ${metadata.displayName}!

There are no \`integrations\` set in your \`astro.config.mjs\` file.
Did you mean to add ${formatList(probableRendererNames.map((r) => "`" + r + "`"))}?`;
    throw new Error(message);
  }
  const children = await renderSlot(result, slots == null ? void 0 : slots.default);
  let renderer;
  if (metadata.hydrate !== "only") {
    for (const r of renderers) {
      if (await r.ssr.check(Component, props, children)) {
        renderer = r;
        break;
      }
    }
    if (!renderer && typeof HTMLElement === "function" && componentIsHTMLElement(Component)) {
      const output = renderHTMLElement(result, Component, _props, slots);
      return output;
    }
  } else {
    if (metadata.hydrateArgs) {
      const rendererName = metadata.hydrateArgs;
      renderer = renderers.filter(({ name }) => name === `@astrojs/${rendererName}` || name === rendererName)[0];
    }
    if (!renderer && renderers.length === 1) {
      renderer = renderers[0];
    }
    if (!renderer) {
      const extname = (_a = metadata.componentUrl) == null ? void 0 : _a.split(".").pop();
      renderer = renderers.filter(({ name }) => name === `@astrojs/${extname}` || name === extname)[0];
    }
  }
  if (!renderer) {
    if (metadata.hydrate === "only") {
      throw new Error(`Unable to render ${metadata.displayName}!

Using the \`client:only\` hydration strategy, Astro needs a hint to use the correct renderer.
Did you mean to pass <${metadata.displayName} client:only="${probableRendererNames.map((r) => r.replace("@astrojs/", "")).join("|")}" />
`);
    } else if (typeof Component !== "string") {
      const matchingRenderers = renderers.filter((r) => probableRendererNames.includes(r.name));
      const plural = renderers.length > 1;
      if (matchingRenderers.length === 0) {
        throw new Error(`Unable to render ${metadata.displayName}!

There ${plural ? "are" : "is"} ${renderers.length} renderer${plural ? "s" : ""} configured in your \`astro.config.mjs\` file,
but ${plural ? "none were" : "it was not"} able to server-side render ${metadata.displayName}.

Did you mean to enable ${formatList(probableRendererNames.map((r) => "`" + r + "`"))}?`);
      } else if (matchingRenderers.length === 1) {
        renderer = matchingRenderers[0];
        ({ html } = await renderer.ssr.renderToStaticMarkup(Component, props, children, metadata));
      } else {
        throw new Error(`Unable to render ${metadata.displayName}!

This component likely uses ${formatList(probableRendererNames)},
but Astro encountered an error during server-side rendering.

Please ensure that ${metadata.displayName}:
1. Does not unconditionally access browser-specific globals like \`window\` or \`document\`.
   If this is unavoidable, use the \`client:only\` hydration directive.
2. Does not conditionally return \`null\` or \`undefined\` when rendered on the server.

If you're still stuck, please open an issue on GitHub or join us at https://astro.build/chat.`);
      }
    }
  } else {
    if (metadata.hydrate === "only") {
      html = await renderSlot(result, slots == null ? void 0 : slots.fallback);
    } else {
      ({ html } = await renderer.ssr.renderToStaticMarkup(Component, props, children, metadata));
    }
  }
  if (!html && typeof Component === "string") {
    html = await renderAstroComponent(await render$1`<${Component}${spreadAttributes(props)}${markHTMLString((children == null || children == "") && voidElementNames.test(Component) ? `/>` : `>${children == null ? "" : children}</${Component}>`)}`);
  }
  if (!hydration) {
    return markHTMLString(html.replace(/\<\/?astro-fragment\>/g, ""));
  }
  const astroId = shorthash.unique(`<!--${metadata.componentExport.value}:${metadata.componentUrl}-->
${html}
${serializeProps(props)}`);
  result.scripts.add(await generateHydrateScript({ renderer, result, astroId, props }, metadata));
  const needsAstroTemplate = children && !/<\/?astro-fragment\>/.test(html);
  const template = needsAstroTemplate ? `<template data-astro-template>${children}</template>` : "";
  return markHTMLString(`<astro-root uid="${astroId}"${needsAstroTemplate ? " tmpl" : ""}>${html ?? ""}${template}</astro-root>`);
}
function createDeprecatedFetchContentFn() {
  return () => {
    throw new Error("Deprecated: Astro.fetchContent() has been replaced with Astro.glob().");
  };
}
function createAstroGlobFn() {
  const globHandler = (importMetaGlobResult, globValue) => {
    let allEntries = [...Object.values(importMetaGlobResult)];
    if (allEntries.length === 0) {
      throw new Error(`Astro.glob(${JSON.stringify(globValue())}) - no matches found.`);
    }
    return Promise.all(allEntries.map((fn) => fn()));
  };
  return globHandler;
}
function createAstro(filePathname, _site, projectRootStr) {
  const site = new URL(_site);
  const url = new URL(filePathname, site);
  const projectRoot = new URL(projectRootStr);
  return {
    site,
    fetchContent: createDeprecatedFetchContentFn(),
    glob: createAstroGlobFn(),
    resolve(...segments) {
      let resolved = segments.reduce((u, segment) => new URL(segment, u), url).pathname;
      if (resolved.startsWith(projectRoot.pathname)) {
        resolved = "/" + resolved.substr(projectRoot.pathname.length);
      }
      return resolved;
    }
  };
}
const toAttributeString = (value, shouldEscape = true) => shouldEscape ? String(value).replace(/&/g, "&#38;").replace(/"/g, "&#34;") : value;
const STATIC_DIRECTIVES = /* @__PURE__ */ new Set(["set:html", "set:text"]);
function addAttribute(value, key, shouldEscape = true) {
  if (value == null) {
    return "";
  }
  if (value === false) {
    if (htmlEnumAttributes.test(key) || svgEnumAttributes.test(key)) {
      return markHTMLString(` ${key}="false"`);
    }
    return "";
  }
  if (STATIC_DIRECTIVES.has(key)) {
    console.warn(`[astro] The "${key}" directive cannot be applied dynamically at runtime. It will not be rendered as an attribute.

Make sure to use the static attribute syntax (\`${key}={value}\`) instead of the dynamic spread syntax (\`{...{ "${key}": value }}\`).`);
    return "";
  }
  if (key === "class:list") {
    return markHTMLString(` ${key.slice(0, -5)}="${toAttributeString(serializeListValue(value))}"`);
  }
  if (value === true && (key.startsWith("data-") || htmlBooleanAttributes.test(key))) {
    return markHTMLString(` ${key}`);
  } else {
    return markHTMLString(` ${key}="${toAttributeString(value, shouldEscape)}"`);
  }
}
function spreadAttributes(values, shouldEscape = true) {
  let output = "";
  for (const [key, value] of Object.entries(values)) {
    output += addAttribute(value, key, shouldEscape);
  }
  return markHTMLString(output);
}
function defineStyleVars(selector, vars) {
  let output = "\n";
  for (const [key, value] of Object.entries(vars)) {
    output += `  --${key}: ${value};
`;
  }
  return markHTMLString(`${selector} {${output}}`);
}
function defineScriptVars(vars) {
  let output = "";
  for (const [key, value] of Object.entries(vars)) {
    output += `let ${key} = ${JSON.stringify(value)};
`;
  }
  return markHTMLString(output);
}
function getHandlerFromModule(mod, method) {
  if (mod[method]) {
    return mod[method];
  }
  if (method === "delete" && mod["del"]) {
    return mod["del"];
  }
  if (mod["all"]) {
    return mod["all"];
  }
  return void 0;
}
async function renderEndpoint(mod, request, params) {
  var _a;
  const chosenMethod = (_a = request.method) == null ? void 0 : _a.toLowerCase();
  const handler = getHandlerFromModule(mod, chosenMethod);
  if (!handler || typeof handler !== "function") {
    throw new Error(`Endpoint handler not found! Expected an exported function for "${chosenMethod}"`);
  }
  return await handler.call(mod, params, request);
}
async function replaceHeadInjection(result, html) {
  let template = html;
  if (template.indexOf("<!--astro:head-->") > -1) {
    template = template.replace("<!--astro:head-->", await renderHead(result));
  }
  return template;
}
async function renderToString(result, componentFactory, props, children) {
  const Component = await componentFactory(result, props, children);
  if (!isAstroComponent(Component)) {
    const response = Component;
    throw response;
  }
  let template = await renderAstroComponent(Component);
  return replaceHeadInjection(result, template);
}
async function renderPage(result, componentFactory, props, children) {
  try {
    const response = await componentFactory(result, props, children);
    if (isAstroComponent(response)) {
      let template = await renderAstroComponent(response);
      const html = await replaceHeadInjection(result, template);
      return {
        type: "html",
        html
      };
    } else {
      return {
        type: "response",
        response
      };
    }
  } catch (err) {
    if (err instanceof Response) {
      return {
        type: "response",
        response: err
      };
    } else {
      throw err;
    }
  }
}
const uniqueElements = (item, index, all) => {
  const props = JSON.stringify(item.props);
  const children = item.children;
  return index === all.findIndex((i) => JSON.stringify(i.props) === props && i.children == children);
};
async function renderHead(result) {
  const styles = [];
  let needsHydrationStyles = false;
  const scripts = Array.from(result.scripts).filter(uniqueElements).map((script, i) => {
    if ("data-astro-component-hydration" in script.props) {
      needsHydrationStyles = true;
    }
    return renderElement("script", __spreadProps$2(__spreadValues$4({}, script), {
      props: __spreadProps$2(__spreadValues$4({}, script.props), { "astro-script": result._metadata.pathname + "/script-" + i })
    }));
  });
  if (needsHydrationStyles) {
    styles.push(renderElement("style", {
      props: {},
      children: "astro-root, astro-fragment { display: contents; }"
    }));
  }
  const links = Array.from(result.links).filter(uniqueElements).map((link) => renderElement("link", link, false));
  return markHTMLString(links.join("\n") + styles.join("\n") + scripts.join("\n") + "\n<!--astro:head:injected-->");
}
async function renderAstroComponent(component) {
  let template = [];
  for await (const value of component) {
    if (value || value === 0) {
      template.push(value);
    }
  }
  return markHTMLString(await _render(template));
}
function componentIsHTMLElement(Component) {
  return typeof HTMLElement !== "undefined" && HTMLElement.isPrototypeOf(Component);
}
async function renderHTMLElement(result, constructor, props, slots) {
  const name = getHTMLElementName(constructor);
  let attrHTML = "";
  for (const attr in props) {
    attrHTML += ` ${attr}="${toAttributeString(await props[attr])}"`;
  }
  return markHTMLString(`<${name}${attrHTML}>${await renderSlot(result, slots == null ? void 0 : slots.default)}</${name}>`);
}
function getHTMLElementName(constructor) {
  const definedName = customElements.getName(constructor);
  if (definedName)
    return definedName;
  const assignedName = constructor.name.replace(/^HTML|Element$/g, "").replace(/[A-Z]/g, "-$&").toLowerCase().replace(/^-/, "html-");
  return assignedName;
}
function renderElement(name, { props: _props, children = "" }, shouldEscape = true) {
  const _a = _props, { lang: _, "data-astro-id": astroId, "define:vars": defineVars } = _a, props = __objRest(_a, ["lang", "data-astro-id", "define:vars"]);
  if (defineVars) {
    if (name === "style") {
      if (props["is:global"]) {
        children = defineStyleVars(`:root`, defineVars) + "\n" + children;
      } else {
        children = defineStyleVars(`.astro-${astroId}`, defineVars) + "\n" + children;
      }
      delete props["is:global"];
      delete props["is:scoped"];
    }
    if (name === "script") {
      delete props.hoist;
      children = defineScriptVars(defineVars) + "\n" + children;
    }
  }
  return `<${name}${spreadAttributes(props, shouldEscape)}>${children}</${name}>`;
}

const VALID_PARAM_TYPES = ["string", "number", "undefined"];
function validateGetStaticPathsParameter([key, value]) {
  if (!VALID_PARAM_TYPES.includes(typeof value)) {
    throw new Error(`[getStaticPaths] invalid route parameter for "${key}". Expected a string or number, received \`${value}\` ("${typeof value}")`);
  }
}
function validateGetStaticPathsModule(mod, { ssr }) {
  if (mod.createCollection) {
    throw new Error(`[createCollection] deprecated. Please use getStaticPaths() instead.`);
  }
  if (!mod.getStaticPaths && !ssr) {
    throw new Error(`[getStaticPaths] getStaticPaths() function is required. Make sure that you \`export\` the function from your component.`);
  }
}
function validateGetStaticPathsResult(result, logging) {
  if (!Array.isArray(result)) {
    throw new Error(`[getStaticPaths] invalid return value. Expected an array of path objects, but got \`${JSON.stringify(result)}\`.`);
  }
  result.forEach((pathObject) => {
    if (!pathObject.params) {
      warn(logging, "getStaticPaths", `invalid path object. Expected an object with key \`params\`, but got \`${JSON.stringify(pathObject)}\`. Skipped.`);
      return;
    }
    for (const [key, val] of Object.entries(pathObject.params)) {
      if (!(typeof val === "undefined" || typeof val === "string")) {
        warn(logging, "getStaticPaths", `invalid path param: ${key}. A string value was expected, but got \`${JSON.stringify(val)}\`.`);
      }
      if (val === "") {
        warn(logging, "getStaticPaths", `invalid path param: ${key}. \`undefined\` expected for an optional param, but got empty string.`);
      }
    }
  });
}

function getParams(array) {
  const fn = (match) => {
    const params = {};
    array.forEach((key, i) => {
      if (key.startsWith("...")) {
        params[key.slice(3)] = match[i + 1] ? decodeURIComponent(match[i + 1]) : void 0;
      } else {
        params[key] = decodeURIComponent(match[i + 1]);
      }
    });
    return params;
  };
  return fn;
}
function stringifyParams(params) {
  const validatedParams = Object.entries(params).reduce((acc, next) => {
    validateGetStaticPathsParameter(next);
    const [key, value] = next;
    acc[key] = `${value}`;
    return acc;
  }, {});
  return JSON.stringify(validatedParams, Object.keys(params).sort());
}

function assertPath(path) {
  if (typeof path !== 'string') {
    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));
  }
}

// Resolves . and .. elements in a path with directory names
function normalizeStringPosix(path, allowAboveRoot) {
  var res = '';
  var lastSegmentLength = 0;
  var lastSlash = -1;
  var dots = 0;
  var code;
  for (var i = 0; i <= path.length; ++i) {
    if (i < path.length)
      code = path.charCodeAt(i);
    else if (code === 47 /*/*/)
      break;
    else
      code = 47 /*/*/;
    if (code === 47 /*/*/) {
      if (lastSlash === i - 1 || dots === 1) ; else if (lastSlash !== i - 1 && dots === 2) {
        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 /*.*/ || res.charCodeAt(res.length - 2) !== 46 /*.*/) {
          if (res.length > 2) {
            var lastSlashIndex = res.lastIndexOf('/');
            if (lastSlashIndex !== res.length - 1) {
              if (lastSlashIndex === -1) {
                res = '';
                lastSegmentLength = 0;
              } else {
                res = res.slice(0, lastSlashIndex);
                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');
              }
              lastSlash = i;
              dots = 0;
              continue;
            }
          } else if (res.length === 2 || res.length === 1) {
            res = '';
            lastSegmentLength = 0;
            lastSlash = i;
            dots = 0;
            continue;
          }
        }
        if (allowAboveRoot) {
          if (res.length > 0)
            res += '/..';
          else
            res = '..';
          lastSegmentLength = 2;
        }
      } else {
        if (res.length > 0)
          res += '/' + path.slice(lastSlash + 1, i);
        else
          res = path.slice(lastSlash + 1, i);
        lastSegmentLength = i - lastSlash - 1;
      }
      lastSlash = i;
      dots = 0;
    } else if (code === 46 /*.*/ && dots !== -1) {
      ++dots;
    } else {
      dots = -1;
    }
  }
  return res;
}

function _format(sep, pathObject) {
  var dir = pathObject.dir || pathObject.root;
  var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');
  if (!dir) {
    return base;
  }
  if (dir === pathObject.root) {
    return dir + base;
  }
  return dir + sep + base;
}

var posix = {
  // path.resolve([from ...], to)
  resolve: function resolve() {
    var resolvedPath = '';
    var resolvedAbsolute = false;
    var cwd;

    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
      var path;
      if (i >= 0)
        path = arguments[i];
      else {
        if (cwd === undefined)
          cwd = process.cwd();
        path = cwd;
      }

      assertPath(path);

      // Skip empty entries
      if (path.length === 0) {
        continue;
      }

      resolvedPath = path + '/' + resolvedPath;
      resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/;
    }

    // At this point the path should be resolved to a full absolute path, but
    // handle relative paths to be safe (might happen when process.cwd() fails)

    // Normalize the path
    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);

    if (resolvedAbsolute) {
      if (resolvedPath.length > 0)
        return '/' + resolvedPath;
      else
        return '/';
    } else if (resolvedPath.length > 0) {
      return resolvedPath;
    } else {
      return '.';
    }
  },

  normalize: function normalize(path) {
    assertPath(path);

    if (path.length === 0) return '.';

    var isAbsolute = path.charCodeAt(0) === 47 /*/*/;
    var trailingSeparator = path.charCodeAt(path.length - 1) === 47 /*/*/;

    // Normalize the path
    path = normalizeStringPosix(path, !isAbsolute);

    if (path.length === 0 && !isAbsolute) path = '.';
    if (path.length > 0 && trailingSeparator) path += '/';

    if (isAbsolute) return '/' + path;
    return path;
  },

  isAbsolute: function isAbsolute(path) {
    assertPath(path);
    return path.length > 0 && path.charCodeAt(0) === 47 /*/*/;
  },

  join: function join() {
    if (arguments.length === 0)
      return '.';
    var joined;
    for (var i = 0; i < arguments.length; ++i) {
      var arg = arguments[i];
      assertPath(arg);
      if (arg.length > 0) {
        if (joined === undefined)
          joined = arg;
        else
          joined += '/' + arg;
      }
    }
    if (joined === undefined)
      return '.';
    return posix.normalize(joined);
  },

  relative: function relative(from, to) {
    assertPath(from);
    assertPath(to);

    if (from === to) return '';

    from = posix.resolve(from);
    to = posix.resolve(to);

    if (from === to) return '';

    // Trim any leading backslashes
    var fromStart = 1;
    for (; fromStart < from.length; ++fromStart) {
      if (from.charCodeAt(fromStart) !== 47 /*/*/)
        break;
    }
    var fromEnd = from.length;
    var fromLen = fromEnd - fromStart;

    // Trim any leading backslashes
    var toStart = 1;
    for (; toStart < to.length; ++toStart) {
      if (to.charCodeAt(toStart) !== 47 /*/*/)
        break;
    }
    var toEnd = to.length;
    var toLen = toEnd - toStart;

    // Compare paths to find the longest common path from root
    var length = fromLen < toLen ? fromLen : toLen;
    var lastCommonSep = -1;
    var i = 0;
    for (; i <= length; ++i) {
      if (i === length) {
        if (toLen > length) {
          if (to.charCodeAt(toStart + i) === 47 /*/*/) {
            // We get here if `from` is the exact base path for `to`.
            // For example: from='/foo/bar'; to='/foo/bar/baz'
            return to.slice(toStart + i + 1);
          } else if (i === 0) {
            // We get here if `from` is the root
            // For example: from='/'; to='/foo'
            return to.slice(toStart + i);
          }
        } else if (fromLen > length) {
          if (from.charCodeAt(fromStart + i) === 47 /*/*/) {
            // We get here if `to` is the exact base path for `from`.
            // For example: from='/foo/bar/baz'; to='/foo/bar'
            lastCommonSep = i;
          } else if (i === 0) {
            // We get here if `to` is the root.
            // For example: from='/foo'; to='/'
            lastCommonSep = 0;
          }
        }
        break;
      }
      var fromCode = from.charCodeAt(fromStart + i);
      var toCode = to.charCodeAt(toStart + i);
      if (fromCode !== toCode)
        break;
      else if (fromCode === 47 /*/*/)
        lastCommonSep = i;
    }

    var out = '';
    // Generate the relative path based on the path difference between `to`
    // and `from`
    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {
      if (i === fromEnd || from.charCodeAt(i) === 47 /*/*/) {
        if (out.length === 0)
          out += '..';
        else
          out += '/..';
      }
    }

    // Lastly, append the rest of the destination (`to`) path that comes after
    // the common path parts
    if (out.length > 0)
      return out + to.slice(toStart + lastCommonSep);
    else {
      toStart += lastCommonSep;
      if (to.charCodeAt(toStart) === 47 /*/*/)
        ++toStart;
      return to.slice(toStart);
    }
  },

  _makeLong: function _makeLong(path) {
    return path;
  },

  dirname: function dirname(path) {
    assertPath(path);
    if (path.length === 0) return '.';
    var code = path.charCodeAt(0);
    var hasRoot = code === 47 /*/*/;
    var end = -1;
    var matchedSlash = true;
    for (var i = path.length - 1; i >= 1; --i) {
      code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          if (!matchedSlash) {
            end = i;
            break;
          }
        } else {
        // We saw the first non-path separator
        matchedSlash = false;
      }
    }

    if (end === -1) return hasRoot ? '/' : '.';
    if (hasRoot && end === 1) return '//';
    return path.slice(0, end);
  },

  basename: function basename(path, ext) {
    if (ext !== undefined && typeof ext !== 'string') throw new TypeError('"ext" argument must be a string');
    assertPath(path);

    var start = 0;
    var end = -1;
    var matchedSlash = true;
    var i;

    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {
      if (ext.length === path.length && ext === path) return '';
      var extIdx = ext.length - 1;
      var firstNonSlashEnd = -1;
      for (i = path.length - 1; i >= 0; --i) {
        var code = path.charCodeAt(i);
        if (code === 47 /*/*/) {
            // If we reached a path separator that was not part of a set of path
            // separators at the end of the string, stop now
            if (!matchedSlash) {
              start = i + 1;
              break;
            }
          } else {
          if (firstNonSlashEnd === -1) {
            // We saw the first non-path separator, remember this index in case
            // we need it if the extension ends up not matching
            matchedSlash = false;
            firstNonSlashEnd = i + 1;
          }
          if (extIdx >= 0) {
            // Try to match the explicit extension
            if (code === ext.charCodeAt(extIdx)) {
              if (--extIdx === -1) {
                // We matched the extension, so mark this as the end of our path
                // component
                end = i;
              }
            } else {
              // Extension does not match, so our result is the entire path
              // component
              extIdx = -1;
              end = firstNonSlashEnd;
            }
          }
        }
      }

      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;
      return path.slice(start, end);
    } else {
      for (i = path.length - 1; i >= 0; --i) {
        if (path.charCodeAt(i) === 47 /*/*/) {
            // If we reached a path separator that was not part of a set of path
            // separators at the end of the string, stop now
            if (!matchedSlash) {
              start = i + 1;
              break;
            }
          } else if (end === -1) {
          // We saw the first non-path separator, mark this as the end of our
          // path component
          matchedSlash = false;
          end = i + 1;
        }
      }

      if (end === -1) return '';
      return path.slice(start, end);
    }
  },

  extname: function extname(path) {
    assertPath(path);
    var startDot = -1;
    var startPart = 0;
    var end = -1;
    var matchedSlash = true;
    // Track the state of characters (if any) we see before our first dot and
    // after any path separator we find
    var preDotState = 0;
    for (var i = path.length - 1; i >= 0; --i) {
      var code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          // If we reached a path separator that was not part of a set of path
          // separators at the end of the string, stop now
          if (!matchedSlash) {
            startPart = i + 1;
            break;
          }
          continue;
        }
      if (end === -1) {
        // We saw the first non-path separator, mark this as the end of our
        // extension
        matchedSlash = false;
        end = i + 1;
      }
      if (code === 46 /*.*/) {
          // If this is our first dot, mark it as the start of our extension
          if (startDot === -1)
            startDot = i;
          else if (preDotState !== 1)
            preDotState = 1;
      } else if (startDot !== -1) {
        // We saw a non-dot and non-path separator before our dot, so we should
        // have a good chance at having a non-empty extension
        preDotState = -1;
      }
    }

    if (startDot === -1 || end === -1 ||
        // We saw a non-dot character immediately before the dot
        preDotState === 0 ||
        // The (right-most) trimmed path component is exactly '..'
        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
      return '';
    }
    return path.slice(startDot, end);
  },

  format: function format(pathObject) {
    if (pathObject === null || typeof pathObject !== 'object') {
      throw new TypeError('The "pathObject" argument must be of type Object. Received type ' + typeof pathObject);
    }
    return _format('/', pathObject);
  },

  parse: function parse(path) {
    assertPath(path);

    var ret = { root: '', dir: '', base: '', ext: '', name: '' };
    if (path.length === 0) return ret;
    var code = path.charCodeAt(0);
    var isAbsolute = code === 47 /*/*/;
    var start;
    if (isAbsolute) {
      ret.root = '/';
      start = 1;
    } else {
      start = 0;
    }
    var startDot = -1;
    var startPart = 0;
    var end = -1;
    var matchedSlash = true;
    var i = path.length - 1;

    // Track the state of characters (if any) we see before our first dot and
    // after any path separator we find
    var preDotState = 0;

    // Get non-dir info
    for (; i >= start; --i) {
      code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          // If we reached a path separator that was not part of a set of path
          // separators at the end of the string, stop now
          if (!matchedSlash) {
            startPart = i + 1;
            break;
          }
          continue;
        }
      if (end === -1) {
        // We saw the first non-path separator, mark this as the end of our
        // extension
        matchedSlash = false;
        end = i + 1;
      }
      if (code === 46 /*.*/) {
          // If this is our first dot, mark it as the start of our extension
          if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
        // We saw a non-dot and non-path separator before our dot, so we should
        // have a good chance at having a non-empty extension
        preDotState = -1;
      }
    }

    if (startDot === -1 || end === -1 ||
    // We saw a non-dot character immediately before the dot
    preDotState === 0 ||
    // The (right-most) trimmed path component is exactly '..'
    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
      if (end !== -1) {
        if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);
      }
    } else {
      if (startPart === 0 && isAbsolute) {
        ret.name = path.slice(1, startDot);
        ret.base = path.slice(1, end);
      } else {
        ret.name = path.slice(startPart, startDot);
        ret.base = path.slice(startPart, end);
      }
      ret.ext = path.slice(startDot, end);
    }

    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';

    return ret;
  },

  sep: '/',
  delimiter: ':',
  win32: null,
  posix: null
};

posix.posix = posix;

var pathBrowserify = posix;

function createCanonicalURL(url, base) {
  let pathname = url.replace(/\/index.html$/, "");
  pathname = pathname.replace(/\/1\/?$/, "");
  if (!pathBrowserify.extname(pathname))
    pathname = pathname.replace(/(\/+)?$/, "/");
  pathname = pathname.replace(/\/+/g, "/");
  return new URL(pathname, base);
}
const STYLE_EXTENSIONS = /* @__PURE__ */ new Set([
  ".css",
  ".pcss",
  ".postcss",
  ".scss",
  ".sass",
  ".styl",
  ".stylus",
  ".less"
]);
const cssRe = new RegExp(`\\.(${Array.from(STYLE_EXTENSIONS).map((s) => s.slice(1)).join("|")})($|\\?)`);
const isCSSRequest = (request) => cssRe.test(request);

const SCRIPT_EXTENSIONS = /* @__PURE__ */ new Set([".js", ".ts"]);
const scriptRe = new RegExp(`\\.(${Array.from(SCRIPT_EXTENSIONS).map((s) => s.slice(1)).join("|")})($|\\?)`);
const isScriptRequest = (request) => scriptRe.test(request);

var __defProp$8 = Object.defineProperty;
var __getOwnPropSymbols$3 = Object.getOwnPropertySymbols;
var __hasOwnProp$3 = Object.prototype.hasOwnProperty;
var __propIsEnum$3 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$3 = (obj, key, value) => key in obj ? __defProp$8(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues$3 = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$3.call(b, prop))
      __defNormalProp$3(a, prop, b[prop]);
  if (__getOwnPropSymbols$3)
    for (var prop of __getOwnPropSymbols$3(b)) {
      if (__propIsEnum$3.call(b, prop))
        __defNormalProp$3(a, prop, b[prop]);
    }
  return a;
};
var __accessCheck$1 = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
};
var __privateGet$1 = (obj, member, getter) => {
  __accessCheck$1(obj, member, "read from private field");
  return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd$1 = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet$1 = (obj, member, value, setter) => {
  __accessCheck$1(obj, member, "write to private field");
  setter ? setter.call(obj, value) : member.set(obj, value);
  return value;
};
var _cache, _result, _slots;
function onlyAvailableInSSR(name) {
  return function() {
    throw new Error(`Oops, you are trying to use ${name}, which is only available with SSR.`);
  };
}
function getFunctionExpression(slot) {
  var _a;
  if (!slot)
    return;
  if (((_a = slot.expressions) == null ? void 0 : _a.length) !== 1)
    return;
  return slot.expressions[0];
}
class Slots {
  constructor(result, slots) {
    __privateAdd$1(this, _cache, /* @__PURE__ */ new Map());
    __privateAdd$1(this, _result, void 0);
    __privateAdd$1(this, _slots, void 0);
    __privateSet$1(this, _result, result);
    __privateSet$1(this, _slots, slots);
    if (slots) {
      for (const key of Object.keys(slots)) {
        if (this[key] !== void 0) {
          throw new Error(`Unable to create a slot named "${key}". "${key}" is a reserved slot name!
Please update the name of this slot.`);
        }
        Object.defineProperty(this, key, {
          get() {
            return true;
          },
          enumerable: true
        });
      }
    }
  }
  has(name) {
    if (!__privateGet$1(this, _slots))
      return false;
    return Boolean(__privateGet$1(this, _slots)[name]);
  }
  async render(name, args = []) {
    const cacheable = args.length === 0;
    if (!__privateGet$1(this, _slots))
      return void 0;
    if (cacheable && __privateGet$1(this, _cache).has(name)) {
      const result = __privateGet$1(this, _cache).get(name);
      return result;
    }
    if (!this.has(name))
      return void 0;
    if (!cacheable) {
      const component = await __privateGet$1(this, _slots)[name]();
      const expression = getFunctionExpression(component);
      if (expression) {
        const slot = expression(...args);
        return await renderSlot(__privateGet$1(this, _result), slot).then((res) => res != null ? String(res) : res);
      }
    }
    const content = await renderSlot(__privateGet$1(this, _result), __privateGet$1(this, _slots)[name]).then((res) => res != null ? String(res) : res);
    if (cacheable)
      __privateGet$1(this, _cache).set(name, content);
    return content;
  }
}
_cache = new WeakMap();
_result = new WeakMap();
_slots = new WeakMap();
let renderMarkdown = null;
function createResult(args) {
  const { markdown, params, pathname, renderers, request, resolve, site } = args;
  const url = new URL(request.url);
  const canonicalURL = createCanonicalURL("." + pathname, site ?? url.origin);
  const result = {
    styles: /* @__PURE__ */ new Set(),
    scripts: args.scripts ?? /* @__PURE__ */ new Set(),
    links: args.links ?? /* @__PURE__ */ new Set(),
    createAstro(astroGlobal, props, slots) {
      const astroSlots = new Slots(result, slots);
      const Astro = {
        __proto__: astroGlobal,
        canonicalURL,
        params,
        props,
        request,
        redirect: args.ssr ? (path) => {
          return new Response(null, {
            status: 301,
            headers: {
              Location: path
            }
          });
        } : onlyAvailableInSSR("Astro.redirect"),
        resolve(path) {
          let extra = `This can be replaced with a dynamic import like so: await import("${path}")`;
          if (isCSSRequest(path)) {
            extra = `It looks like you are resolving styles. If you are adding a link tag, replace with this:
---
import "${path}";
---
`;
          } else if (isScriptRequest(path)) {
            extra = `It looks like you are resolving scripts. If you are adding a script tag, replace with this:

<script type="module" src={(await import("${path}?url")).default}><\/script>

or consider make it a module like so:

<script>
	import MyModule from "${path}";
<\/script>
`;
          }
          warn(args.logging, `deprecation`, `${bold("Astro.resolve()")} is deprecated. We see that you are trying to resolve ${path}.
${extra}`);
          return "";
        },
        slots: astroSlots
      };
      Object.defineProperty(Astro, "__renderMarkdown", {
        enumerable: false,
        writable: false,
        value: async function(content, opts) {
          if (typeof Deno !== "undefined") {
            throw new Error("Markdown is not supported in Deno SSR");
          }
          if (!renderMarkdown) {
            let astroRemark = "@astrojs/markdown-remark";
            renderMarkdown = (await import(astroRemark)).renderMarkdown;
          }
          const { code } = await renderMarkdown(content, __spreadValues$3(__spreadValues$3({}, markdown), opts ?? {}));
          return code;
        }
      });
      return Astro;
    },
    resolve,
    _metadata: {
      renderers,
      pathname
    }
  };
  return result;
}

var __defProp$7 = Object.defineProperty;
var __defProps$1 = Object.defineProperties;
var __getOwnPropDescs$1 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$2 = Object.getOwnPropertySymbols;
var __hasOwnProp$2 = Object.prototype.hasOwnProperty;
var __propIsEnum$2 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$2 = (obj, key, value) => key in obj ? __defProp$7(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues$2 = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$2.call(b, prop))
      __defNormalProp$2(a, prop, b[prop]);
  if (__getOwnPropSymbols$2)
    for (var prop of __getOwnPropSymbols$2(b)) {
      if (__propIsEnum$2.call(b, prop))
        __defNormalProp$2(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps$1 = (a, b) => __defProps$1(a, __getOwnPropDescs$1(b));
function generatePaginateFunction(routeMatch) {
  return function paginateUtility(data, args = {}) {
    let { pageSize: _pageSize, params: _params, props: _props } = args;
    const pageSize = _pageSize || 10;
    const paramName = "page";
    const additionalParams = _params || {};
    const additionalProps = _props || {};
    let includesFirstPageNumber;
    if (routeMatch.params.includes(`...${paramName}`)) {
      includesFirstPageNumber = false;
    } else if (routeMatch.params.includes(`${paramName}`)) {
      includesFirstPageNumber = true;
    } else {
      throw new Error(`[paginate()] page number param \`${paramName}\` not found in your filepath.
Rename your file to \`[...page].astro\` or customize the param name via the \`paginate([], {param: '...'}\` option.`);
    }
    const lastPage = Math.max(1, Math.ceil(data.length / pageSize));
    const result = [...Array(lastPage).keys()].map((num) => {
      const pageNum = num + 1;
      const start = pageSize === Infinity ? 0 : (pageNum - 1) * pageSize;
      const end = Math.min(start + pageSize, data.length);
      const params = __spreadProps$1(__spreadValues$2({}, additionalParams), {
        [paramName]: includesFirstPageNumber || pageNum > 1 ? String(pageNum) : void 0
      });
      return {
        params,
        props: __spreadProps$1(__spreadValues$2({}, additionalProps), {
          page: {
            data: data.slice(start, end),
            start,
            end: end - 1,
            size: pageSize,
            total: data.length,
            currentPage: pageNum,
            lastPage,
            url: {
              current: routeMatch.generate(__spreadValues$2({}, params)),
              next: pageNum === lastPage ? void 0 : routeMatch.generate(__spreadProps$1(__spreadValues$2({}, params), { page: String(pageNum + 1) })),
              prev: pageNum === 1 ? void 0 : routeMatch.generate(__spreadProps$1(__spreadValues$2({}, params), {
                page: !includesFirstPageNumber && pageNum - 1 === 1 ? void 0 : String(pageNum - 1)
              }))
            }
          }
        })
      };
    });
    return result;
  };
}

async function callGetStaticPaths({
  isValidate,
  logging,
  mod,
  route,
  ssr
}) {
  validateGetStaticPathsModule(mod, { ssr });
  const resultInProgress = {
    rss: []
  };
  let staticPaths = [];
  if (mod.getStaticPaths) {
    staticPaths = (await mod.getStaticPaths({
      paginate: generatePaginateFunction(route),
      rss: (data) => {
        resultInProgress.rss.push(data);
      }
    })).flat();
  }
  const keyedStaticPaths = staticPaths;
  keyedStaticPaths.keyed = /* @__PURE__ */ new Map();
  for (const sp of keyedStaticPaths) {
    const paramsKey = stringifyParams(sp.params);
    keyedStaticPaths.keyed.set(paramsKey, sp);
  }
  if (isValidate) {
    validateGetStaticPathsResult(keyedStaticPaths, logging);
  }
  return {
    rss: resultInProgress.rss,
    staticPaths: keyedStaticPaths
  };
}
class RouteCache {
  constructor(logging) {
    this.cache = {};
    this.logging = logging;
  }
  clearAll() {
    this.cache = {};
  }
  set(route, entry) {
    if (this.cache[route.component]) {
      warn(this.logging, "routeCache", `Internal Warning: route cache overwritten. (${route.component})`);
    }
    this.cache[route.component] = entry;
  }
  get(route) {
    return this.cache[route.component];
  }
}
function findPathItemByKey(staticPaths, params) {
  const paramsKey = stringifyParams(params);
  let matchedStaticPath = staticPaths.keyed.get(paramsKey);
  if (matchedStaticPath) {
    return matchedStaticPath;
  }
  debug("findPathItemByKey", `Unexpected cache miss looking for ${paramsKey}`);
  matchedStaticPath = staticPaths.find(({ params: _params }) => JSON.stringify(_params) === paramsKey);
}

var __defProp$6 = Object.defineProperty;
var __getOwnPropSymbols$1 = Object.getOwnPropertySymbols;
var __hasOwnProp$1 = Object.prototype.hasOwnProperty;
var __propIsEnum$1 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1 = (obj, key, value) => key in obj ? __defProp$6(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues$1 = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$1.call(b, prop))
      __defNormalProp$1(a, prop, b[prop]);
  if (__getOwnPropSymbols$1)
    for (var prop of __getOwnPropSymbols$1(b)) {
      if (__propIsEnum$1.call(b, prop))
        __defNormalProp$1(a, prop, b[prop]);
    }
  return a;
};
var GetParamsAndPropsError = /* @__PURE__ */ ((GetParamsAndPropsError2) => {
  GetParamsAndPropsError2[GetParamsAndPropsError2["NoMatchingStaticPath"] = 0] = "NoMatchingStaticPath";
  return GetParamsAndPropsError2;
})(GetParamsAndPropsError || {});
async function getParamsAndProps(opts) {
  const { logging, mod, route, routeCache, pathname, ssr } = opts;
  let params = {};
  let pageProps;
  if (route && !route.pathname) {
    if (route.params.length) {
      const paramsMatch = route.pattern.exec(pathname);
      if (paramsMatch) {
        params = getParams(route.params)(paramsMatch);
      }
    }
    let routeCacheEntry = routeCache.get(route);
    if (!routeCacheEntry) {
      routeCacheEntry = await callGetStaticPaths({ mod, route, isValidate: true, logging, ssr });
      routeCache.set(route, routeCacheEntry);
    }
    const matchedStaticPath = findPathItemByKey(routeCacheEntry.staticPaths, params);
    if (!matchedStaticPath && !ssr) {
      return 0 /* NoMatchingStaticPath */;
    }
    pageProps = (matchedStaticPath == null ? void 0 : matchedStaticPath.props) ? __spreadValues$1({}, matchedStaticPath.props) : {};
  } else {
    pageProps = {};
  }
  return [params, pageProps];
}
async function render(opts) {
  const {
    links,
    logging,
    origin,
    markdown,
    mod,
    pathname,
    scripts,
    renderers,
    request,
    resolve,
    route,
    routeCache,
    site,
    ssr
  } = opts;
  const paramsAndPropsRes = await getParamsAndProps({
    logging,
    mod,
    route,
    routeCache,
    pathname,
    ssr
  });
  if (paramsAndPropsRes === 0 /* NoMatchingStaticPath */) {
    throw new Error(`[getStaticPath] route pattern matched, but no matching static path found. (${pathname})`);
  }
  const [params, pageProps] = paramsAndPropsRes;
  const Component = await mod.default;
  if (!Component)
    throw new Error(`Expected an exported Astro component but received typeof ${typeof Component}`);
  if (!Component.isAstroComponentFactory)
    throw new Error(`Unable to SSR non-Astro component (${route == null ? void 0 : route.component})`);
  const result = createResult({
    links,
    logging,
    markdown,
    origin,
    params,
    pathname,
    resolve,
    renderers,
    request,
    site,
    scripts,
    ssr
  });
  let page = await renderPage(result, Component, pageProps, null);
  if (page.type === "response") {
    return page;
  }
  let html = page.html;
  if (html.indexOf("<!--astro:head:injected-->") == -1) {
    html = await renderHead(result) + html;
  }
  html = html.replace("<!--astro:head:injected-->", "");
  if (!/<!doctype html/i.test(html)) {
    html = "<!DOCTYPE html>\n" + html;
  }
  return {
    type: "html",
    html
  };
}

var __defProp$5 = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp$5(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
async function call(mod, opts) {
  const paramsAndPropsResp = await getParamsAndProps(__spreadProps(__spreadValues({}, opts), { mod }));
  if (paramsAndPropsResp === GetParamsAndPropsError.NoMatchingStaticPath) {
    throw new Error(`[getStaticPath] route pattern matched, but no matching static path found. (${opts.pathname})`);
  }
  const [params] = paramsAndPropsResp;
  const response = await renderEndpoint(mod, opts.request, params);
  if (response instanceof Response) {
    return {
      type: "response",
      response
    };
  }
  return {
    type: "simple",
    body: response.body
  };
}

function appendForwardSlash(path) {
  return path.endsWith("/") ? path : path + "/";
}
function prependForwardSlash(path) {
  return path[0] === "/" ? path : "/" + path;
}

function getRootPath(site) {
  return appendForwardSlash(new URL(site || "http://localhost/").pathname);
}
function joinToRoot(href, site) {
  return pathBrowserify.posix.join(getRootPath(site), href);
}
function createLinkStylesheetElement(href, site) {
  return {
    props: {
      rel: "stylesheet",
      href: joinToRoot(href, site)
    },
    children: ""
  };
}
function createLinkStylesheetElementSet(hrefs, site) {
  return new Set(hrefs.map((href) => createLinkStylesheetElement(href, site)));
}
function createModuleScriptElementWithSrc(src, site) {
  return {
    props: {
      type: "module",
      src: joinToRoot(src, site)
    },
    children: ""
  };
}
function createModuleScriptElementWithSrcSet(srces, site) {
  return new Set(srces.map((src) => createModuleScriptElementWithSrc(src, site)));
}

var __accessCheck = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
};
var __privateGet = (obj, member, getter) => {
  __accessCheck(obj, member, "read from private field");
  return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet = (obj, member, value, setter) => {
  __accessCheck(obj, member, "write to private field");
  setter ? setter.call(obj, value) : member.set(obj, value);
  return value;
};
var __privateMethod = (obj, member, method) => {
  __accessCheck(obj, member, "access private method");
  return method;
};
var _manifest$1, _manifestData, _routeDataToRouteInfo, _routeCache, _encoder, _logging, _renderPage, renderPage_fn, _callEndpoint, callEndpoint_fn;
class App {
  constructor(manifest) {
    __privateAdd(this, _renderPage);
    __privateAdd(this, _callEndpoint);
    __privateAdd(this, _manifest$1, void 0);
    __privateAdd(this, _manifestData, void 0);
    __privateAdd(this, _routeDataToRouteInfo, void 0);
    __privateAdd(this, _routeCache, void 0);
    __privateAdd(this, _encoder, new TextEncoder());
    __privateAdd(this, _logging, {
      dest: consoleLogDestination,
      level: "info"
    });
    __privateSet(this, _manifest$1, manifest);
    __privateSet(this, _manifestData, {
      routes: manifest.routes.map((route) => route.routeData)
    });
    __privateSet(this, _routeDataToRouteInfo, new Map(manifest.routes.map((route) => [route.routeData, route])));
    __privateSet(this, _routeCache, new RouteCache(__privateGet(this, _logging)));
  }
  match(request) {
    const url = new URL(request.url);
    return matchRoute(url.pathname, __privateGet(this, _manifestData));
  }
  async render(request, routeData) {
    if (!routeData) {
      routeData = this.match(request);
      if (!routeData) {
        return new Response(null, {
          status: 404,
          statusText: "Not found"
        });
      }
    }
    const mod = __privateGet(this, _manifest$1).pageMap.get(routeData.component);
    if (routeData.type === "page") {
      return __privateMethod(this, _renderPage, renderPage_fn).call(this, request, routeData, mod);
    } else if (routeData.type === "endpoint") {
      return __privateMethod(this, _callEndpoint, callEndpoint_fn).call(this, request, routeData, mod);
    } else {
      throw new Error(`Unsupported route type [${routeData.type}].`);
    }
  }
}
_manifest$1 = new WeakMap();
_manifestData = new WeakMap();
_routeDataToRouteInfo = new WeakMap();
_routeCache = new WeakMap();
_encoder = new WeakMap();
_logging = new WeakMap();
_renderPage = new WeakSet();
renderPage_fn = async function(request, routeData, mod) {
  const url = new URL(request.url);
  const manifest = __privateGet(this, _manifest$1);
  const renderers = manifest.renderers;
  const info = __privateGet(this, _routeDataToRouteInfo).get(routeData);
  const links = createLinkStylesheetElementSet(info.links, manifest.site);
  const scripts = createModuleScriptElementWithSrcSet(info.scripts, manifest.site);
  const result = await render({
    links,
    logging: __privateGet(this, _logging),
    markdown: manifest.markdown,
    mod,
    origin: url.origin,
    pathname: url.pathname,
    scripts,
    renderers,
    async resolve(specifier) {
      if (!(specifier in manifest.entryModules)) {
        throw new Error(`Unable to resolve [${specifier}]`);
      }
      const bundlePath = manifest.entryModules[specifier];
      return bundlePath.startsWith("data:") ? bundlePath : prependForwardSlash(bundlePath);
    },
    route: routeData,
    routeCache: __privateGet(this, _routeCache),
    site: __privateGet(this, _manifest$1).site,
    ssr: true,
    request
  });
  if (result.type === "response") {
    return result.response;
  }
  let html = result.html;
  let bytes = __privateGet(this, _encoder).encode(html);
  return new Response(bytes, {
    status: 200,
    headers: {
      "Content-Type": "text/html",
      "Content-Length": bytes.byteLength.toString()
    }
  });
};
_callEndpoint = new WeakSet();
callEndpoint_fn = async function(request, routeData, mod) {
  const url = new URL(request.url);
  const handler = mod;
  const result = await call(handler, {
    logging: __privateGet(this, _logging),
    origin: url.origin,
    pathname: url.pathname,
    request,
    route: routeData,
    routeCache: __privateGet(this, _routeCache),
    ssr: true
  });
  if (result.type === "response") {
    return result.response;
  } else {
    const body = result.body;
    const headers = new Headers();
    const mimeType = mime.getType(url.pathname);
    if (mimeType) {
      headers.set("Content-Type", mimeType);
    }
    const bytes = __privateGet(this, _encoder).encode(body);
    headers.set("Content-Length", bytes.byteLength.toString());
    return new Response(bytes, {
      status: 200,
      headers
    });
  }
};

let _server = void 0;
let _startPromise = void 0;
function start$1(manifest, options) {
  if (options.start === false) {
    return;
  }
  const clientRoot = new URL("../client/", import.meta.url);
  const app = new App(manifest);
  const handler = async (request) => {
    if (app.match(request)) {
      return await app.render(request);
    }
    const url = new URL(request.url);
    const localPath = new URL("." + url.pathname, clientRoot);
    return fetch(localPath.toString());
  };
  _server = new Server({
    port: options.port ?? 8085,
    hostname: options.hostname ?? "0.0.0.0",
    handler
  });
  _startPromise = _server.listenAndServe();
}
function createExports(manifest, options) {
  const app = new App(manifest);
  return {
    async stop() {
      if (_server) {
        _server.close();
        _server = void 0;
      }
      await Promise.resolve(_startPromise);
    },
    running() {
      return _server !== void 0;
    },
    async start() {
      return start$1(manifest, options);
    },
    async handle(request) {
      return app.render(request);
    }
  };
}

var adapter = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  createExports: createExports,
  start: start$1
}, Symbol.toStringTag, { value: 'Module' }));

var HASH = "f0d347ff91d787b49322110964a4d967333af5c7";

const defaults = {
  SITE_AUTHOR: "John Henry",
  SITE_TITLE: "John Henry",
  SITE_FAVICON_PATH: "image/iajh.png",
  SITE_FAVICON_TYPE: "image/png",
  SITE_SERVICE_WORKER: "",
  SITE_BASE_PATH: "/",
  SITE_BLOG_PAGE_SIZE: 4,
  SITE_LIB_URL: "https://johnhenry.github.io/lib/",
  SITE_CANONICAL_URL: "https://johnhenry.github.io/",
  SITE_DESCRIPTION: "John Henry's Person Portfolio and Blog",
  SITE_KEYWORDS: [],
  TAG_MANAGER_ID: "",
  BUILD_DATE: new Date().toISOString(),
  BUILD_HASH: HASH,
  BUILD_META: "",
};

const SITE_AUTHOR =
  ({}).PUBLIC_SITE_AUTHOR || defaults.SITE_AUTHOR;

const SITE_TITLE =
  ({}).PUBLIC_SITE_TITLE || defaults.SITE_TITLE;

const SITE_FAVICON_PATH =
  ({}).PUBLIC_SITE_FAVICON_PATH || defaults.SITE_FAVICON_PATH;

const SITE_FAVICON_TYPE =
  ({}).PUBLIC_SITE_FAVICON_TYPE || defaults.SITE_FAVICON_TYPE;

const SITE_SERVICE_WORKER =
  ({}).PUBLIC_SITE_SERVICE_WORKER || defaults.SITE_SERVICE_WORKER;

const SITE_BASE_PATH =
  ({}).PUBLIC_SITE_BASE_PATH || defaults.SITE_BASE_PATH;

const SITE_BLOG_PAGE_SIZE =
  Number(({}).PUBLIC_SITE_BLOG_PAGE_SIZE) ||
  defaults.SITE_BLOG_PAGE_SIZE;

const SITE_LIB_URL =
  ({}).PUBLIC_SITE_LIB_URL || defaults.SITE_LIB_URL;

const SITE_CANONICAL_URL =
  ({}).PUBLIC_SITE_CANONICAL_URL || defaults.SITE_CANONICAL_URL;

const SITE_DESCRIPTION =
  ({}).PUBLIC_SITE_DESCRIPTION || defaults.SITE_DESCRIPTION;

const SITE_KEYWORDS = ({}).PUBLIC_SITE_KEYWORDS
  ? ({}).PUBLIC_SITE_KEYWORDS.split(",")
  : defaults.SITE_KEYWORDS;

const TAG_MANAGER_ID =
  ({}).PUBLIC_TAG_MANAGER_ID || defaults.TAG_MANAGER_ID;

const BUILD_DATE =
  ({}).PUBLIC_BUILD_DATE || defaults.BUILD_DATE;
const BUILD_HASH =
  ({}).PUBLIC_BUILD_HASH || defaults.BUILD_HASH;
const BUILD_META =
  ({}).PUBLIC_BUILD_META || defaults.BUILD_META;

//
const SITE_FAVICON = `${SITE_BASE_PATH}${SITE_FAVICON_PATH}`;

var SETTINGS = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  'default': defaults,
  SITE_AUTHOR: SITE_AUTHOR,
  SITE_TITLE: SITE_TITLE,
  SITE_FAVICON_PATH: SITE_FAVICON_PATH,
  SITE_FAVICON_TYPE: SITE_FAVICON_TYPE,
  SITE_SERVICE_WORKER: SITE_SERVICE_WORKER,
  SITE_BASE_PATH: SITE_BASE_PATH,
  SITE_BLOG_PAGE_SIZE: SITE_BLOG_PAGE_SIZE,
  SITE_LIB_URL: SITE_LIB_URL,
  SITE_CANONICAL_URL: SITE_CANONICAL_URL,
  SITE_DESCRIPTION: SITE_DESCRIPTION,
  SITE_KEYWORDS: SITE_KEYWORDS,
  TAG_MANAGER_ID: TAG_MANAGER_ID,
  BUILD_DATE: BUILD_DATE,
  BUILD_HASH: BUILD_HASH,
  BUILD_META: BUILD_META,
  SITE_FAVICON: SITE_FAVICON
}, Symbol.toStringTag, { value: 'Module' }));

var sortPosts = (posts) => {
  const sorted = posts
    .filter((b) => b.frontmatter.date)
    .sort(
      (a, b) => new Date(b.frontmatter.date) - new Date(a.frontmatter.date)
    );
  const tags = new Set();
  const byTag = {};
  for (const post of sorted) {
    for (const tag of post.frontmatter.tags) {
      tags.add(tag);
      if (byTag[tag]) {
        byTag[tag].push(post);
      } else {
        byTag[tag] = [post];
      }
    }
  }
  const latest = sorted[0];
  return {
    byTag: Object.entries(byTag),
    posts,
    sorted,
    latest,
    tags: [...tags],
  };
};

var $$module2$2 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  'default': sortPosts
}, Symbol.toStringTag, { value: 'Module' }));

const $$metadata$q = createMetadata("/src/components/jh/index.astro", { modules: [], hydratedComponents: [], clientOnlyComponents: [], hydrationDirectives: /* @__PURE__ */ new Set([]), hoisted: [] });
const $$Astro$q = createAstro("/src/components/jh/index.astro", "https://astro.build", "file:///home/runner/work/johnhenry.github.io/johnhenry.github.io/");
const $$Index$1 = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$q, $$props, $$slots);
  Astro2.self = $$Index$1;
  return render$1`${renderComponent($$result, "animate-paths", "animate-paths", { "class": "until-load", "stops": "[-1, -1, 0, 0, 1]", "intervals": "[1, 2, 2, 2]", "animate": true, "frac": "1", "animation-duration": "30s", "animation-iteration-count": "infinite", "animation-timing-function": "linear", "path-onclick": "event.preventDefault(),window.cycleMouseChaser()" }, { "default": () => render$1`
    <svg class="logo until-window-load" width="67.733" height="67.733" version="1.1" viewBox="0 0 67.733 67.733" xmlns="http://www.w3.org/2000/svg">
      <path d="m27.252 12.435v23.019a6.6146 6.6146 0 0 1-6.6146 6.6146 6.6146 6.6146
    0 0 1-6.6146-6.6146h-13.229a19.844 19.844 0 0 0 19.844 19.844 19.844 19.844 0
    0 0
    19.192-14.817h13.881v14.817h13.229v-42.862h-13.229v14.817h-13.229v-14.817z" fill="none" stroke="#000" stroke-width="1"></path>
    </svg>
` })}`;
});

var $$module3$2 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  $$metadata: $$metadata$q,
  'default': $$Index$1
}, Symbol.toStringTag, { value: 'Module' }));

const $$metadata$p = createMetadata("/src/components/SEO.astro", { modules: [], hydratedComponents: [], clientOnlyComponents: [], hydrationDirectives: /* @__PURE__ */ new Set([]), hoisted: [] });
const $$Astro$p = createAstro("/src/components/SEO.astro", "https://astro.build", "file:///home/runner/work/johnhenry.github.io/johnhenry.github.io/");
const $$SEO = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$p, $$props, $$slots);
  Astro2.self = $$SEO;
  const { props } = Astro2;
  const {
    title,
    description,
    canonical,
    noindex,
    nofollow,
    openGraph
  } = props;
  function validateProps(props2) {
    const {
      openGraph: openGraph2,
      description: description2
    } = props2;
    if (openGraph2) {
      if (!openGraph2.basic || openGraph2.basic.title == null || openGraph2.basic.type == null || openGraph2.basic.image == null || openGraph2.basic.url == null) {
        throw new Error("If you pass the openGraph prop, you have to define the basic properties title, type, image, and url!");
      }
    }
    if (title && openGraph2?.basic.title) {
      if (title == openGraph2.basic.title) {
        console.warn("WARNING(astro-seo): You passed the same value to `title` and `openGraph.optional.title`. This is most likely not what you want. See docs for more.");
      }
    }
    if (openGraph2?.basic?.image && !openGraph2?.image?.alt) {
      console.warn("WARNING(astro-seo): You defined `openGraph.basic.image`, but didn't define `openGraph.image.alt`. This is stongly discouraged.'");
    }
  }
  validateProps(props);
  return render$1`<!-- { title ? <title>{title}</title> : null }

{ canonical ? (
	<link 
		rel="canonical"
		href={canonical}
	/>
) : null}

{ description ? (
	<meta
  	name="description"
  	content={description}
  />
) : null }

<meta
	name="robots"
	content={\`\${noindex ? 'noindex' : 'index'},\${nofollow ? 'nofollow' : 'follow'}\`}
> --><!-- { generateOpenGraphBasicTags(props) }
{ generateOpenGraphOptionalTags(props) }
{ generateOpenGraphImageTags(props) }
{ generateOpenGraphArticleTags(props) }
{ generateTwitterTags(props) } -->`;
});

var $$module2$1 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  $$metadata: $$metadata$p,
  'default': $$SEO
}, Symbol.toStringTag, { value: 'Module' }));

const $$metadata$o = createMetadata("/src/components/SiteStyles.astro", { modules: [], hydratedComponents: [], clientOnlyComponents: [], hydrationDirectives: /* @__PURE__ */ new Set([]), hoisted: [] });
const $$Astro$o = createAstro("/src/components/SiteStyles.astro", "https://astro.build", "file:///home/runner/work/johnhenry.github.io/johnhenry.github.io/");
const $$SiteStyles = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$o, $$props, $$slots);
  Astro2.self = $$SiteStyles;
  const { hrefs = [], critical = "" } = Astro2.props;
  return render$1`${critical ? `<style>
${critical}
</style>` : null}
${hrefs.map((href) => render$1`<link rel="stylesheet"${addAttribute(href, "href")}>`)}`;
});

var $$module3$1 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  $$metadata: $$metadata$o,
  'default': $$SiteStyles
}, Symbol.toStringTag, { value: 'Module' }));

var __freeze$4 = Object.freeze;
var __defProp$4 = Object.defineProperty;
var __template$4 = (cooked, raw) => __freeze$4(__defProp$4(cooked, "raw", { value: __freeze$4(raw || cooked.slice()) }));
var _a$4;
const $$metadata$n = createMetadata("/src/components/SiteScripts.astro", { modules: [], hydratedComponents: [], clientOnlyComponents: [], hydrationDirectives: /* @__PURE__ */ new Set([]), hoisted: [] });
const $$Astro$n = createAstro("/src/components/SiteScripts.astro", "https://astro.build", "file:///home/runner/work/johnhenry.github.io/johnhenry.github.io/");
const $$SiteScripts = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$n, $$props, $$slots);
  Astro2.self = $$SiteScripts;
  const { srcs = [], critical = ";" } = Astro2.props;
  return render$1`${critical ? "<script>" + critical + "<\/script>" : null}
${srcs.map((src) => render$1(_a$4 || (_a$4 = __template$4(['<script type="module"', "><\/script>"])), addAttribute(src, "src")))}`;
});

var $$module4$2 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  $$metadata: $$metadata$n,
  'default': $$SiteScripts
}, Symbol.toStringTag, { value: 'Module' }));

var __freeze$3 = Object.freeze;
var __defProp$3 = Object.defineProperty;
var __template$3 = (cooked, raw) => __freeze$3(__defProp$3(cooked, "raw", { value: __freeze$3(raw || cooked.slice()) }));
var _a$3;
const $$metadata$m = createMetadata("/src/components/ServiceWorkerScript.astro", { modules: [], hydratedComponents: [], clientOnlyComponents: [], hydrationDirectives: /* @__PURE__ */ new Set([]), hoisted: [] });
const $$Astro$m = createAstro("/src/components/ServiceWorkerScript.astro", "https://astro.build", "file:///home/runner/work/johnhenry.github.io/johnhenry.github.io/");
const $$ServiceWorkerScript = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$m, $$props, $$slots);
  Astro2.self = $$ServiceWorkerScript;
  const { src } = Astro2.props;
  return render$1`${src ? render$1(_a$3 || (_a$3 = __template$3(["<script>", "\n  globalThis.addEventListener('load', () => {\n        globalThis.navigator.serviceWorker.register(src);\n    });\n<\/script>"])), defineScriptVars({ src })) : null}`;
});

var $$module5$3 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  $$metadata: $$metadata$m,
  'default': $$ServiceWorkerScript
}, Symbol.toStringTag, { value: 'Module' }));

var externalStyles = [
  `${SITE_LIB_URL}vendor/css/reset/2.0.0/index.css`,
  `${SITE_LIB_URL}css/universal-unstyled-links/0.0.0/index.css`,
  `${SITE_LIB_URL}css/universal-box-sizing/0.0.0/index.css`,
  `${SITE_LIB_URL}css/universal-no-margins/0.0.0/index.css`,
  `${SITE_LIB_URL}css/hide-n-show/0.0.0/landscape.css`,
];

var $$module6$1 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  'default': externalStyles
}, Symbol.toStringTag, { value: 'Module' }));

var externalScripts = [
  `${SITE_LIB_URL}js/css-variables-mouse/0.0.0/index.mjs`,
  `${SITE_LIB_URL}js/css-variables-scroll/0.0.0/index.mjs`,
  `${SITE_LIB_URL}js/until-window-load/0.0.0/global.mjs`,
  `${SITE_LIB_URL}js/define-component.component/0.0.0/global.mjs`,
];

var $$module7$1 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  'default': externalScripts
}, Symbol.toStringTag, { value: 'Module' }));

var __freeze$2 = Object.freeze;
var __defProp$2 = Object.defineProperty;
var __template$2 = (cooked, raw) => __freeze$2(__defProp$2(cooked, "raw", { value: __freeze$2(raw || cooked.slice()) }));
var _a$2;
const $$metadata$l = createMetadata("/src/components/TagManagerHead.astro", { modules: [], hydratedComponents: [], clientOnlyComponents: [], hydrationDirectives: /* @__PURE__ */ new Set([]), hoisted: [] });
const $$Astro$l = createAstro("/src/components/TagManagerHead.astro", "https://astro.build", "file:///home/runner/work/johnhenry.github.io/johnhenry.github.io/");
const $$TagManagerHead = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$l, $$props, $$slots);
  Astro2.self = $$TagManagerHead;
  const { tmid } = Astro2.props;
  return render$1(_a$2 || (_a$2 = __template$2(["<script>", "\n(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':\nnew Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],\nj=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=\n'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);\n})(window,document,'script','dataLayer', tmid);\n<\/script>"])), defineScriptVars({ tmid }));
});

var $$module8 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  $$metadata: $$metadata$l,
  'default': $$TagManagerHead
}, Symbol.toStringTag, { value: 'Module' }));

const $$metadata$k = createMetadata("/src/components/SiteHead.astro", { modules: [{ module: SETTINGS, specifier: "../SETTINGS.mjs", assert: {} }, { module: $$module2$1, specifier: "./SEO.astro", assert: {} }, { module: $$module3$1, specifier: "./SiteStyles.astro", assert: {} }, { module: $$module4$2, specifier: "./SiteScripts.astro", assert: {} }, { module: $$module5$3, specifier: "./ServiceWorkerScript.astro", assert: {} }, { module: $$module6$1, specifier: "../external/styles.mjs", assert: {} }, { module: $$module7$1, specifier: "../external/scripts.mjs", assert: {} }, { module: $$module8, specifier: "./TagManagerHead.astro", assert: {} }], hydratedComponents: [], clientOnlyComponents: [], hydrationDirectives: /* @__PURE__ */ new Set([]), hoisted: [] });
const $$Astro$k = createAstro("/src/components/SiteHead.astro", "https://astro.build", "file:///home/runner/work/johnhenry.github.io/johnhenry.github.io/");
const $$SiteHead = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$k, $$props, $$slots);
  Astro2.self = $$SiteHead;
  const {
    title = SITE_TITLE,
    subtitle = "",
    author,
    keywords,
    canonical,
    description,
    serviceWorkerScript
  } = Astro2.props;
  const displayTitle = subtitle ? `${title} : ${subtitle}` : title;
  return render$1`<head>
  ${TAG_MANAGER_ID ? render$1`${renderComponent($$result, "TagManagerHead", $$TagManagerHead, { "tmid": TAG_MANAGER_ID })}` : ""}
  ${renderComponent($$result, "SEO", $$SEO, { "title": displayTitle, "description": description, "canonical": canonical })}
  <meta name="theme-color" content="#343233">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta charset="utf-8">
  <meta name="keywords"${addAttribute(keywords, "content")}>
  <meta name="author"${addAttribute(author, "content")}>
  ${renderComponent($$result, "ServiceWorkerScript", $$ServiceWorkerScript, { "src": serviceWorkerScript })}
  <link rel="manifest"${addAttribute(`${SITE_BASE_PATH}manifest.json`, "href")}>
  <link rel="icon"${addAttribute(SITE_FAVICON, "href")}${addAttribute(SITE_FAVICON_TYPE, "type")}>
  ${renderComponent($$result, "SiteStyles", $$SiteStyles, { "hrefs": externalStyles })}
  <link rel="stylesheet"${addAttribute(`${SITE_BASE_PATH}style/index.css`, "href")}>
  ${renderComponent($$result, "SiteScripts", $$SiteScripts, { "srcs": externalScripts })}
  <link rel="apple-touch-icon" sizes="512x512"${addAttribute(`${SITE_BASE_PATH}image/iajh.512.png`, "href")}>
  <link rel="apple-touch-icon" sizes="384x384"${addAttribute(`${SITE_BASE_PATH}image/iajh.384.png`, "href")}>
  <link rel="apple-touch-icon" sizes="256x256"${addAttribute(`${SITE_BASE_PATH}image/iajh.256.png`, "href")}>
  <link rel="apple-touch-icon" sizes="192x192"${addAttribute(`${SITE_BASE_PATH}image/iajh.192.png`, "href")}>
  <link rel="apple-touch-icon" sizes="128x128"${addAttribute(`${SITE_BASE_PATH}image/iajh.128.png`, "href")}>
  <!--astro:head--></head>${renderComponent($$result, "define-component", "define-component", { "name": "animate-paths", "src": `${SITE_LIB_URL}js/animate-paths.component/0.0.0/index.mjs` })}
`;
});

var $$module2 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  $$metadata: $$metadata$k,
  'default': $$SiteHead
}, Symbol.toStringTag, { value: 'Module' }));

var __freeze$1 = Object.freeze;
var __defProp$1 = Object.defineProperty;
var __template$1 = (cooked, raw) => __freeze$1(__defProp$1(cooked, "raw", { value: __freeze$1(raw || cooked.slice()) }));
var _a$1;
const $$metadata$j = createMetadata("/src/components/GDPRRequest.astro", { modules: [], hydratedComponents: [], clientOnlyComponents: [], hydrationDirectives: /* @__PURE__ */ new Set([]), hoisted: [] });
const $$Astro$j = createAstro("/src/components/GDPRRequest.astro", "https://astro.build", "file:///home/runner/work/johnhenry.github.io/johnhenry.github.io/");
const $$GDPRRequest = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$j, $$props, $$slots);
  Astro2.self = $$GDPRRequest;
  const DEFAULT_ACCEPT = "Accept";
  const DEFAULT_DECLINE = "Decline";
  const DEFAULT_MESSAGE = "Accept all cookies?";
  const { message, accept, decline } = Astro2.props;
  return render$1(_a$1 || (_a$1 = __template$1([`<script type="module">
  /* Consent Buddy -- should be extracted */
  const DEFAULT_LOCAL_STORAGE_KEY = "consent-buddy";
  const DEFAULT_LOCAL_STORAGE_VALUE_REJECTED = "-";
  const DEFAULT_LOCAL_STORAGE_VALUE_ACCEPTED = "+";
  const DEFAULT_DISPLAY_VALUE_VISIBLE = "block";
  const DEFAULT_DISPLAY_VALUE_NOT_VISIBLE = "none";

  const ConsentBuddy = (ready, options = {}) => {
    const localStorageKey = options.localStorageKey || DEFAULT_LOCAL_STORAGE_KEY;
    const status = globalThis.localStorage.getItem(localStorageKey);
    const localStorageValueRejected =
      options.localStorageValueRejected || DEFAULT_LOCAL_STORAGE_VALUE_REJECTED;
    const customProperty = options.customProperty || \`--\${localStorageKey}\`;
    const providedEventName =
      options.providedEventName || \`\${localStorageKey}-provided\`;
    const witheldEventName =
      options.witheldEventName || \`\${localStorageKey}-withheld\`;
    const localStorageValueAccepted =
      options.localStorageValueAccepted || DEFAULT_LOCAL_STORAGE_VALUE_ACCEPTED;
    const displayValueVisible =
      options.displayValueVisible || DEFAULT_DISPLAY_VALUE_VISIBLE;
    const displayValueNotVisible =
      options.displayValueNotVisible || DEFAULT_DISPLAY_VALUE_NOT_VISIBLE;
    const resolve = (status, event) => {
      globalThis.localStorage.setItem(localStorageKey, status);
      globalThis.document.documentElement.style.setProperty(
        customProperty,
        displayValueNotVisible
      );
      globalThis.removeEventListener(providedEventName, enableConsent);
      globalThis.removeEventListener(witheldEventName, disableConsent);
      if (status !== localStorageValueRejected) {
        ready(status, event);
      }
    };

    // function to enable consent
    const enableConsent = (event) =>
      resolve(event.detail ? event.detail : localStorageValueAccepted, event);
    const disableConsent = (event) => resolve(localStorageValueRejected, event);
    const final = (done = () => {}) => {
      globalThis.localStorage.removeItem(localStorageKey);
      globalThis.document.documentElement.style.removeProperty(customProperty);
      globalThis.removeEventListener(providedEventName, enableConsent);
      globalThis.removeEventListener(witheldEventName, disableConsent);
      done();
    };
    if (status === localStorageValueRejected) {
      // consent has been rejected
      return final;
    }
    if (status != null) {
      // consent has been accepted
      ready(status);
      return final;
    }
    // consent response has not been provided
    globalThis.addEventListener(providedEventName, enableConsent);
    globalThis.addEventListener(witheldEventName, disableConsent);
    globalThis.document.documentElement.style.setProperty(
      customProperty,
      displayValueVisible
    );
    return final;
  };
  /* */
  // "gtag" Function (see: https://stackoverflow.com/questions/61041158/google-analytics-webapp-event-config-error-gtag-is-not-defined)
  const dataLayer = globalThis.dataLayer || [];
  const gtag = globalThis.gtag || function (){dataLayer.push(arguments);}
  gtag('consent', 'default', {
      'analytics_storage': 'denied',
      'ad_storage': 'denied',
      'wait_for_update': 500
  });
  const clear = ConsentBuddy(()=>{
    // https://developers.google.com/gtagjs/devguide/consent
    gtag('consent', 'update', {
      'analytics_storage': 'granted',
      'ad_storage': 'granted',
      'wait_for_update': 500
    });
  }, {
    displayValueVisible:'flex',
    localStorageKey:'gdpr-consent'});
  globalThis.clearconsent = ()=>{
    clear();
    globalThis.location.reload();
  }
<\/script>
<footer class="fixed bottom-0 flex p-4 justify-end items-center" style="display: var(--gdpr-consent, none);">
  <div class="mr-auto">`, `</div>
  <a href="#" onclick="globalThis.dispatchEvent(new Event('gdpr-consent-provided'));">`, `</a>
  <a href="#" onclick="globalThis.dispatchEvent(new Event('gdpr-consent-withheld'));">`, "</a>\n</footer>"], [`<script type="module">
  /* Consent Buddy -- should be extracted */
  const DEFAULT_LOCAL_STORAGE_KEY = "consent-buddy";
  const DEFAULT_LOCAL_STORAGE_VALUE_REJECTED = "-";
  const DEFAULT_LOCAL_STORAGE_VALUE_ACCEPTED = "+";
  const DEFAULT_DISPLAY_VALUE_VISIBLE = "block";
  const DEFAULT_DISPLAY_VALUE_NOT_VISIBLE = "none";

  const ConsentBuddy = (ready, options = {}) => {
    const localStorageKey = options.localStorageKey || DEFAULT_LOCAL_STORAGE_KEY;
    const status = globalThis.localStorage.getItem(localStorageKey);
    const localStorageValueRejected =
      options.localStorageValueRejected || DEFAULT_LOCAL_STORAGE_VALUE_REJECTED;
    const customProperty = options.customProperty || \\\`--\\\${localStorageKey}\\\`;
    const providedEventName =
      options.providedEventName || \\\`\\\${localStorageKey}-provided\\\`;
    const witheldEventName =
      options.witheldEventName || \\\`\\\${localStorageKey}-withheld\\\`;
    const localStorageValueAccepted =
      options.localStorageValueAccepted || DEFAULT_LOCAL_STORAGE_VALUE_ACCEPTED;
    const displayValueVisible =
      options.displayValueVisible || DEFAULT_DISPLAY_VALUE_VISIBLE;
    const displayValueNotVisible =
      options.displayValueNotVisible || DEFAULT_DISPLAY_VALUE_NOT_VISIBLE;
    const resolve = (status, event) => {
      globalThis.localStorage.setItem(localStorageKey, status);
      globalThis.document.documentElement.style.setProperty(
        customProperty,
        displayValueNotVisible
      );
      globalThis.removeEventListener(providedEventName, enableConsent);
      globalThis.removeEventListener(witheldEventName, disableConsent);
      if (status !== localStorageValueRejected) {
        ready(status, event);
      }
    };

    // function to enable consent
    const enableConsent = (event) =>
      resolve(event.detail ? event.detail : localStorageValueAccepted, event);
    const disableConsent = (event) => resolve(localStorageValueRejected, event);
    const final = (done = () => {}) => {
      globalThis.localStorage.removeItem(localStorageKey);
      globalThis.document.documentElement.style.removeProperty(customProperty);
      globalThis.removeEventListener(providedEventName, enableConsent);
      globalThis.removeEventListener(witheldEventName, disableConsent);
      done();
    };
    if (status === localStorageValueRejected) {
      // consent has been rejected
      return final;
    }
    if (status != null) {
      // consent has been accepted
      ready(status);
      return final;
    }
    // consent response has not been provided
    globalThis.addEventListener(providedEventName, enableConsent);
    globalThis.addEventListener(witheldEventName, disableConsent);
    globalThis.document.documentElement.style.setProperty(
      customProperty,
      displayValueVisible
    );
    return final;
  };
  /* */
  // "gtag" Function (see: https://stackoverflow.com/questions/61041158/google-analytics-webapp-event-config-error-gtag-is-not-defined)
  const dataLayer = globalThis.dataLayer || [];
  const gtag = globalThis.gtag || function (){dataLayer.push(arguments);}
  gtag('consent', 'default', {
      'analytics_storage': 'denied',
      'ad_storage': 'denied',
      'wait_for_update': 500
  });
  const clear = ConsentBuddy(()=>{
    // https://developers.google.com/gtagjs/devguide/consent
    gtag('consent', 'update', {
      'analytics_storage': 'granted',
      'ad_storage': 'granted',
      'wait_for_update': 500
    });
  }, {
    displayValueVisible:'flex',
    localStorageKey:'gdpr-consent'});
  globalThis.clearconsent = ()=>{
    clear();
    globalThis.location.reload();
  }
<\/script>
<footer class="fixed bottom-0 flex p-4 justify-end items-center" style="display: var(--gdpr-consent, none);">
  <div class="mr-auto">`, `</div>
  <a href="#" onclick="globalThis.dispatchEvent(new Event('gdpr-consent-provided'));">`, `</a>
  <a href="#" onclick="globalThis.dispatchEvent(new Event('gdpr-consent-withheld'));">`, "</a>\n</footer>"])), message ?? DEFAULT_MESSAGE, accept ?? DEFAULT_ACCEPT, decline ?? DEFAULT_DECLINE);
});

var $$module3 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  $$metadata: $$metadata$j,
  'default': $$GDPRRequest
}, Symbol.toStringTag, { value: 'Module' }));

const $$metadata$i = createMetadata("/src/components/TagManagerBody.astro", { modules: [], hydratedComponents: [], clientOnlyComponents: [], hydrationDirectives: /* @__PURE__ */ new Set([]), hoisted: [] });
const $$Astro$i = createAstro("/src/components/TagManagerBody.astro", "https://astro.build", "file:///home/runner/work/johnhenry.github.io/johnhenry.github.io/");
const $$TagManagerBody = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$i, $$props, $$slots);
  Astro2.self = $$TagManagerBody;
  const { tmid } = Astro2.props;
  const createBodyTag = (TAG_MANAGER_ID = "") => `<!-- Google Tag Manager (noscript) -->
<noscript><iframe src="https://www.googletagmanager.com/ns.html?id=${TAG_MANAGER_ID}"
height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript>
<!-- End Google Tag Manager (noscript) -->`;
  return render$1`${createBodyTag(tmid)}`;
});

var $$module4$1 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  $$metadata: $$metadata$i,
  'default': $$TagManagerBody
}, Symbol.toStringTag, { value: 'Module' }));

var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", { value: __freeze(raw || cooked.slice()) }));
var _a;
const $$metadata$h = createMetadata("/src/components/BodyClassCycler.astro", { modules: [{ module: SETTINGS, specifier: "../SETTINGS.mjs", assert: {} }], hydratedComponents: [], clientOnlyComponents: [], hydrationDirectives: /* @__PURE__ */ new Set([]), hoisted: [] });
const $$Astro$h = createAstro("/src/components/BodyClassCycler.astro", "https://astro.build", "file:///home/runner/work/johnhenry.github.io/johnhenry.github.io/");
const $$BodyClassCycler = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$h, $$props, $$slots);
  Astro2.self = $$BodyClassCycler;
  const properties = Astro2.props;
  properties.storageKey = properties["storage-key"];
  const {
    global = "cycleBodyClass",
    storageKey = "",
    classes = [],
    parent = "window",
    selector = "body"
  } = properties;
  if (!storageKey) {
    throw new Error("storageKey is required");
  }
  return render$1(_a || (_a = __template(['<script type="module">', "\nconst localStorageCycler = await import(`${SITE_LIB_URL}js/localstorage-cycler/0.0.0/index.mjs`).then(m => m.default);\n  const key = `${storageKey}`;\n  const values = classes;\n  const target = globalThis.document.querySelector(`${selector}`);\n  const emit = ({value, key, index}) => {\n    target.classList.remove(...values.filter(s=>s));\n    if(value){\n      target.classList.add(value);\n    }\n  }\n  globalThis[global] = localStorageCycler(key, emit, ...values);\n<\/script>"], ['<script type="module">', "\nconst localStorageCycler = await import(\\`\\${SITE_LIB_URL}js/localstorage-cycler/0.0.0/index.mjs\\`).then(m => m.default);\n  const key = \\`\\${storageKey}\\`;\n  const values = classes;\n  const target = globalThis.document.querySelector(\\`\\${selector}\\`);\n  const emit = ({value, key, index}) => {\n    target.classList.remove(...values.filter(s=>s));\n    if(value){\n      target.classList.add(value);\n    }\n  }\n  globalThis[global] = localStorageCycler(key, emit, ...values);\n<\/script>"])), defineScriptVars({ SITE_LIB_URL, storageKey, classes, selector, global }));
});

var $$module5$2 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  $$metadata: $$metadata$h,
  'default': $$BodyClassCycler
}, Symbol.toStringTag, { value: 'Module' }));

const $$metadata$g = createMetadata("/src/components/SitePage.astro", { modules: [{ module: SETTINGS, specifier: "../SETTINGS.mjs", assert: {} }, { module: $$module2, specifier: "./SiteHead.astro", assert: {} }, { module: $$module3, specifier: "./GDPRRequest.astro", assert: {} }, { module: $$module4$1, specifier: "./TagManagerBody.astro", assert: {} }, { module: $$module5$2, specifier: "./BodyClassCycler.astro", assert: {} }], hydratedComponents: [], clientOnlyComponents: [], hydrationDirectives: /* @__PURE__ */ new Set([]), hoisted: [] });
const $$Astro$g = createAstro("/src/components/SitePage.astro", "https://astro.build", "file:///home/runner/work/johnhenry.github.io/johnhenry.github.io/");
const $$SitePage = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$g, $$props, $$slots);
  Astro2.self = $$SitePage;
  const {
    title,
    description,
    keywords,
    author,
    canonical,
    headerLinks,
    htmlClass,
    headerClass,
    footerClass,
    serviceWorkerScript
  } = Astro2.props;
  return render$1`<!DOCTYPE html><html lang="en"${addAttribute(htmlClass, "class")}>
  ${renderComponent($$result, "SiteHead", $$SiteHead, { "subtitle": title, "description": description, "keywords": keywords, "author": author, "canonical": canonical, "serviceWorkerScript": serviceWorkerScript })}
  ${renderComponent($$result, "BodyClassCycler", $$BodyClassCycler, { "global": "cycleTheme", "storage-key": "color-theme-preference", "classes": [
    "color-theme-dark",
    "",
    "color-theme-light"
  ] })}
  ${renderComponent($$result, "BodyClassCycler", $$BodyClassCycler, { "global": "cycleMouseChaser", "storage-key": "mouse-chaser-preference", "classes": [
    "",
    "mouse-chaser-logo",
    "mouse-chaser-coordinates"
  ] })}
  <body class="color-theme-dark">
    <header${addAttribute(headerClass, "class")}>
      <a href="/#"><img${addAttribute(`${SITE_BASE_PATH}image/iajh.png`, "src")} width="32" height="32" alt="logo">
      <p class="hide-n-show-landscape-inline">${SITE_TITLE}${" "}${title}</p></a>
      <nav class="hide show-landscape-flex">
        ${headerLinks.map(({ url, text }) => render$1`<a${addAttribute(`${url}`, "href")}>${text}</a>`)}
      </nav>
    </header>
    <!-- the good stuff -->
    ${renderSlot($$result, $$slots["default"])}
    <!-- the good stuff -->
    <span class="mouse-chaser"></span>
    <footer${addAttribute(footerClass, "class")}>
    <a href="#">© ${new Date().getFullYear()}  ${` ${author}`}</a>
      <!-- Todo: Astro whitespace may be fixed in Astro 0.21? -->
      <nav>
        <a href="#" class="mouse-chaser-toggler" onclick="event.preventDefault(),window.cycleMouseChaser()" title="Click to toggle mouse."></a>
        <a href="#" class="color-theme-toggler" onclick="event.preventDefault(),window.cycleTheme()" title="Click to toggle color theme."></a>
      </nav>
    </footer>
    ${TAG_MANAGER_ID ? render$1`${renderComponent($$result, "GDPRRequest", $$GDPRRequest, {})}` : null}
    ${TAG_MANAGER_ID ? render$1`${renderComponent($$result, "TagManagerBody", $$TagManagerBody, { "tmid": `${TAG_MANAGER_ID}` })}` : null}
  </body>
</html>`;
});

var $$module5$1 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  $$metadata: $$metadata$g,
  'default': $$SitePage
}, Symbol.toStringTag, { value: 'Module' }));

const image = `${SITE_BASE_PATH}vendor/img/www.pexels.com/pixabay/turned-on-computer-monitor-displaying-text-300.jpg`;
var projects = [
  {
    title: "Bash Command Line tools",
    description: "A collection of tools that I find useful.",
    href: "https://johnhenry.github.io/lib/bash",
    image: `${SITE_BASE_PATH}personal/image/bufka.karolina/cat-in-sun.jpg`,
  },
  {
    title: "Standard Library -- set of components for building applications.",
    description: "Click here",
    href: SITE_LIB_URL,
    image,
  },
  {
    title: "Forsnaken -- Multiplayer snake game",
    description: "A modular snake game",
    href: "https://johnhenry.github.io/forsnaken",
    image: `${SITE_BASE_PATH}personal/image/bufka.karolina/cat-in-towel.jpg`,
  },
  {
    title: "HTML Builder",
    description: "Build HTML with components",
    href: "https://johnhenry.github.io/htmlbuilder",
    image,
  },
  {
    title: "Actually Serverless",
    description: "Simulate a cluster of servers within your browser",
    href: "https://johnhenry.github.io/actually-serverless",
    image: `${SITE_BASE_PATH}personal/image/bufka.karolina/cat-on-chair.jpg`,
  },
  {
    title: "Blog",
    description: "Thoughts and musings",
    href: "https://johnhenry.github.io/blog",
    image,
  },
];

var $$module5 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  'default': projects
}, Symbol.toStringTag, { value: 'Module' }));

var headerLinks = [
  { url: "/blog", text: "Blog" },
  { url: "/#me", text: "Me" },
  { url: "/#projects", text: "Projects" },
];

var $$module7 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  'default': headerLinks
}, Symbol.toStringTag, { value: 'Module' }));

const $$metadata$f = createMetadata("/src/pages/index.astro", { modules: [{ module: SETTINGS, specifier: "../SETTINGS.mjs", assert: {} }, { module: $$module2$2, specifier: "../utils/sort-posts.mjs", assert: {} }, { module: $$module3$2, specifier: "../components/jh/index.astro", assert: {} }, { module: $$module5$1, specifier: "../components/SitePage.astro", assert: {} }, { module: $$module5, specifier: "../content/projects.mjs", assert: {} }, { module: $$module7, specifier: "../content/headerlinks.mjs", assert: {} }], hydratedComponents: [], clientOnlyComponents: [], hydrationDirectives: /* @__PURE__ */ new Set([]), hoisted: [] });
const $$Astro$f = createAstro("/src/pages/index.astro", "https://astro.build", "file:///home/runner/work/johnhenry.github.io/johnhenry.github.io/");
const $$Index = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$f, $$props, $$slots);
  Astro2.self = $$Index;
  const { latest = void 0, tags = [] } = sortPosts(await Astro2.glob({ "./blog/posts/angular-done-right.md": () => import('./chunks/chunk.dedae6f4.mjs'), "./blog/posts/browsers-servers-and-apis.md": () => import('./chunks/chunk.2dcf8975.mjs'), "./blog/posts/component.md": () => import('./chunks/chunk.1e3bc757.mjs'), "./blog/posts/html-tags-for-data.md": () => import('./chunks/chunk.c5d32592.mjs'), "./blog/posts/manage-websites-like-docker.md": () => import('./chunks/chunk.cf97fcd4.mjs'), "./blog/posts/new-site.md": () => import('./chunks/chunk.c8b43e89.mjs'), "./blog/posts/semantics-vs-accessibility.md": () => import('./chunks/chunk.4281c820.mjs'), "./blog/posts/vscode-on-remote-server.md": () => import('./chunks/chunk.0a3e96ff.mjs'),}, () => "./blog/posts/*.md"));
  return render$1`${renderComponent($$result, "SitePage", $$SitePage, { "description": SITE_DESCRIPTION, "keywords": SITE_KEYWORDS, "author": SITE_AUTHOR, "canonical": SITE_CANONICAL_URL, "headerLinks": headerLinks, "serviceWorkerScript": SITE_SERVICE_WORKER }, { "default": () => render$1`<section class="hero">
    <article>
      ${renderComponent($$result, "JH", $$Index$1, { "class": "logo" })}
      <ul class="widget glowey-background-container">
          ${headerLinks.map(({ url, text }, index) => render$1`${renderComponent($$result, "Fragment", Fragment, {}, { "default": () => render$1`<li${addAttribute(`link-untracked${!(index % 2) ? "" : " link-inverted"}`, "class")}>

            ${text.toUpperCase().split("").map((letter) => render$1`<a${addAttribute(`${url}`, "href")}>${letter}</a>`)}

        </li>${index === 0 ? render$1`${renderComponent($$result, "Fragment", Fragment, {}, { "default": () => render$1`<li class="tags">${tags.map((tag, index2) => render$1`<a${addAttribute(index2 % 2 ? "link-untracked" : "link-untracked link-inverted", "class")}${addAttribute(`/blog/tags/${tag}`, "href")}${addAttribute(`tag: ${tag}`, "title")}> ${tag}</a>`)}
          </li>${latest ? render$1`<li class="blog-preview">
              <a class="link-hidden"${addAttribute(latest.frontmatter.url, "href")}>
                <header>Latest: ${latest.frontmatter.title}</header>
                <p>${latest.frontmatter.description}</p>
              </a>
            </li>` : null}` })}` : null}` })}`)}
      </ul>
    </article>
  </section><section id="me" class="me">
    <header>Me</header>
    <article>
      <div>
        <header><img${addAttribute(`${SITE_BASE_PATH}image/iajh.png`, "src")} alt="logo"></header>
        <article class="glowey-background">
          <p>Hi! My name is John.</p>
          <p>I'm a mathmetician, a scientist, and an engineer (yes, those are different things!). </p>
          <p>I develop websites professionally. In my spare time, I like to work on interesting mathematical and computer science-related experiments.</p>
        </article>
      </div>
      <div>
        <header><img${addAttribute(`${SITE_BASE_PATH}image/iajh.png`, "src")} alt="logo"></header>
        <article class="glowey-background">
          <p>
            <a class="link-surprise" href="mailto:john@iamjohnhenry.com" target="_blank" rel="noreferrer">Send me an email.</a>
          </p>
          <p>
            <a class="link-surprise" href="https://twitter.com/iamjohnhenry" target="_blank" rel="noreferrer">Follow me on twitter.</a>
          </p>
          <p>
            <a class="link-surprise" href="https://github.com/johnhenry" target="_blank" rel="noreferrer">Checkout my github account.</a>
          </p>
        </article>
      </div>
    </article>
  </section><section id="projects" class="projects">
    <header>Projects</header>
    <article class="glowey-background-container link-surprise-container">
      ${projects.map(({ title, description, href, image }) => render$1`<a${addAttribute(href, "href")}>
          <div${addAttribute(image ? `background-image: url('${image}');` : "", "style")}>
            <header>${title}</header>
            <footer>${description}</footer>
          </div>
        </a>`)}
    </article>
  </section>` })}`;
});

var _page0 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  $$metadata: $$metadata$f,
  'default': $$Index
}, Symbol.toStringTag, { value: 'Module' }));

const $$metadata$e = createMetadata("/src/components/BlogPage.astro", { modules: [{ module: SETTINGS, specifier: "../SETTINGS.mjs", assert: {} }, { module: $$module5$1, specifier: "./SitePage.astro", assert: {} }, { module: $$module7, specifier: "../content/headerlinks.mjs", assert: {} }], hydratedComponents: [], clientOnlyComponents: [], hydrationDirectives: /* @__PURE__ */ new Set([]), hoisted: [] });
const $$Astro$e = createAstro("/src/components/BlogPage.astro", "https://astro.build", "file:///home/runner/work/johnhenry.github.io/johnhenry.github.io/");
const $$BlogPage = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$e, $$props, $$slots);
  Astro2.self = $$BlogPage;
  const {
    title,
    description,
    date,
    author,
    heroImage,
    permalink,
    alt,
    tags
  } = Astro2.props.content;
  return render$1`${renderComponent($$result, "SitePage", $$SitePage, { "title": `Blog -- ${title}`, "description": description, "keywords": SITE_KEYWORDS.concat(tags), "author": author, "canonical": SITE_CANONICAL_URL + permalink, "headerLinks": headerLinks }, { "default": () => render$1`<section class="blog-top">
    <header><p>${title}</p></header>
    <a class="link-untracked" href="/blog">back to blog</a>
    ${heroImage && render$1`<img width="360" height="210" loading="lazy"${addAttribute(heroImage, "src")}${addAttribute(alt, "alt")}>`}
    <article class="blog-content">
      <p class="publish-date">${date}</p>
      <h1>${title}</h1>
      <div class="author">
        <p><a href="#">${SITE_AUTHOR}</a></p>
      </div>
      ${renderSlot($$result, $$slots["default"])}
    </article>
    <a class="link-untracked" href="/blog">back to blog</a>
  </section>` })}`;
});

var $$module1$1 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  $$metadata: $$metadata$e,
  'default': $$BlogPage
}, Symbol.toStringTag, { value: 'Module' }));

const metadata$7 = { "headers": [{ "depth": 2, "slug": "workflow", "text": "Workflow" }, { "depth": 2, "slug": "tutorial", "text": "Tutorial" }, { "depth": 3, "slug": "prerequesites", "text": "Prerequesites" }, { "depth": 4, "slug": "go", "text": "go" }, { "depth": 4, "slug": "gen-bundle", "text": "gen-bundle" }, { "depth": 4, "slug": "wasm-to-oci", "text": "wasm-to-oci" }, { "depth": 4, "slug": "docker", "text": "Docker" }, { "depth": 4, "slug": "google-chrome", "text": "Google Chrome" }, { "depth": 4, "slug": "a-github-account", "text": "a Github Account" }, { "depth": 3, "slug": "plan", "text": "Plan" }, { "depth": 3, "slug": "artifact", "text": "Artifact" }, { "depth": 4, "slug": "create-an-artifact", "text": "Create an artifact" }, { "depth": 4, "slug": "view-artifact", "text": "View Artifact" }, { "depth": 3, "slug": "registry", "text": "Registry" }, { "depth": 4, "slug": "login-to-github-with-docker", "text": "Login to Github with Docker" }, { "depth": 4, "slug": "pushing-and-pulling", "text": "Pushing and Pulling" }, { "depth": 3, "slug": "whats-next", "text": "What\u2019s next?" }], "source": '\n_Author\u2019s Note: This is based on **experimental** technologies that aren\'t quite ready for production. Nonetheless, I believe the ideas presented in this article will be useful in the near future._\n\nDid you know that you can manage static websites\nlike you manage images with [Docker](https://docker.com)? You can!\n\nBut I\'m sure you have a few more questions, like:\n\n- What do I mean by "like Docker"?\n- Why would you want to do such a thing?\n- How can you do it yourself?\n\nTo find answers,\nwe will first take a _simplified_ look\nat how management works with Docker.\nWe will then learn how to create\na similar process for static websites.\n\n## Workflow\n\nAt its most basic, Docker works like this:\n\n1. Create an image [(an OCI Image)](https://github.com/opencontainers/image-spec)\n   -- a single artifact that represents a file tree.\n   ```bash\n   docker build -t registry/image:0.0.0 -f - . <<EOF\n   FROM nginx:latest\n   EOF\n   ```\n2. Publish the image to a registry [(an OCI Registry)](https://github.com/opencontainers/distribution-spec).\n   ```bash\n   docker push registry/image:0.0.0\n   ```\n3. When necessary, retrieve said image from the registry to use it.\n   ```bash\n   docker run -it --rm -p 8080:80 registry/image:0.0.0\n   # Note:`docker run` pulls the image from the registry if not locally available\n   ```\n\nWhen we make static websites, the process is similarly simple:\n\n1. Create a file tree.\n\n   ```bash\n   npm run build\n   ...\n   # There are countless technologies -- atom, webpack, rollup, etc. --\n   # that can be used to create a static website.\n   ```\n\n2. When necessary, push file tree to a server.\n   ```bash\n   npm run publish\n   ...\n   # There are similarly a number of options for publishing.\n   # ftp and git (when configured with hooks) are viable options.\n   ```\n\nWhile both processes are simple,\nthe idea of an **image** from the Docker\nworkflow is key.\nAn entire website as a single artifact\nto be versioned, shared, and deployed\nin like an image is enticing.\n\n## Tutorial\n\nNow that we\'ve covered the "what" and the "why", let\'s look at the "how".\n\n### Prerequesites\n\nIn order complete do this tutorial, you\'ll need the following installed:\n\n#### go\n\nTwo CLI tools are based on go,\nso we might as well get this out of the way first.\n\nInstall go according to [instructions here](https://golang.org/doc/install).\n\n#### gen-bundle\n\nInstall gen-bundle according to [instructions here](https://github.com/WICG/webpackage/tree/main/go/bundle).\n\n```bash\n# Install wasm-to-oci https://github.com/engineerd/wasm-to-oci\ngo get -u github.com/WICG/webpackage/go/bundle/cmd/...\n```\n\n#### wasm-to-oci\n\nInstall wasm-to-oci according to [instructions here](https://github.com/engineerd/wasm-to-oci), or run:\n\n```bash\n# Install wasm-to-oci https://github.com/engineerd/wasm-to-oci\ngo get -u github.com/WICG/webpackage/go/bundle/cmd/...\n```\n\n#### Docker\n\nThis is silly;\nbut to authenticate wasm-to-oci,\nyou need Docker.\n\nThis will hopefully change soon --\nI said this was "experimental"!\n\nInstall docker according to [instructions here](https://golang.org/doc/install).\n\n#### Google Chrome\n\nInstall Google Chrome according to [instructions here](https://www.google.com/chrome/).\n\n#### a Github Account\n\nYou\'ll need a Github account to publish the artifact.\n\n[Sign up](https://github.com/) and\n[set up your container registry](https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-container-registry)\nif you haven\'t already.\n\n### Plan\n\nWe want a process\nthat mirrors the one\noutlined above for Docker:\n\n1. Convert a file tree into an "image-like" artifact. (using `gen-bungle`)\n2. Publish said artifact to a registry. (Github via `wasm-to-oci`)\n3. When necessary, retrieve said image from the registry and view it. (with `wasm-to-oci` and Google Chrome)\n\n### Artifact\n\nIn place of an image,\nwe use a [web bundle](https://web.dev/web-bundles/)\n-- an emerging format used to package entire websites.\n\n#### Create an artifact\n\nCreate a empty folder named \'hello-world\'.\n\nIn it, place a file named \'index.html\'\nwith the following contents:\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>My First Web Bundle</title>\n  </head>\n  <body>\n    Hello, World! This is the first page!\n    <a href="/next.html"> See what\'s next... </a>\n  </body>\n</html>\n```\n\nPlace another file named \'next.html\'\nwith the following contents:\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>My first bundle</title>\n  </head>\n  <body>\n    Hello again, World! This is the second page!\n    <a href="/"> See what (or who? \u{1F914}) has come before...</a>\n  </body>\n</html>\n```\n\nOutside of the hello-world folder, run the following command:\n\n```bash\ngen-bundle -dir ./hello-world -baseURL http://localhost/ -o hello-world.wbn -primaryURL http://localhost/\n```\n\nThis creates a bundle file\nnamed "hello-world.wbn".\nThis is equivalent to a Docker image.\n(Note that when you interact with docker,\nyou use commands like `build`, `push`, and `pull`.\nYou do not ususually interact directly\nwith image files themselves.)\n\n#### View Artifact\n\nTo view the artifact,\nwe need to enable\nthe experimental\n"web bundles" browser feature.\n\nUsing Chrome, visit `chrome://flags/#web-bundles`.\nEnable the feature and restart your browser.\n\nUsing Chrome, open the `hello-world.wbn` file\nthat you previoiusly created.\nThe url will look something like\n`file:///.../hello-world.wbn?http://localhost/`.\n\nNotice that you can freely navigate\nbetween pages of the site --\neven though it\'s just single file!\n\nYou can probably imagine\na few uses for this;\nand here are a few:\n\n1. Entire websites can be easily snapped-shotted\n   and archived into a single file.\n\n2. In the past, creating a test deployment for a site\n   used to require spinning up a new server.\n   Now you can do it by sharing a single file.\n\n### Registry\n\nIn place of a registry,\nhow do we manage our bundles?\nThe beautiful thing is that\nwe can actually use an OCI registry!\n\nOCI has a [goal](https://github.com/opencontainers/artifacts)\nto enable the distribution\nof more cloud native artifacts.\n\nThere are no existing tools\nto push bundles (specificaly)\nto OCI registries.\nFortunately, we can ~abuse~ use WASM to OCI\n-- a tool for doing something\nsimilar with web assembly --\nfor our purposes.\n\nWe\'ll use GitHub as a OCI registry\nas it supports unknown images.\nNotably, Docker Hub does not support this.\n\n#### Login to Github with Docker\n\nWe will use Docker )only\\_ to authenticate\n\nFirst obtain a\n[github access token](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token)\nwith, permissions to read and write to the registry.\n\nUser `docker login` to login to the github container registry at `ghcr.io`,\n\n```bash\necho $GITHUB_ACCESS_TOKEN | docker login ghcr.io -u $GITHUB_USERNAME --password-stdin\n```\n\n#### Pushing and Pulling\n\nPush the bundle to the registry with:\n\n```bash\nwasm-to-oci push ./hello-world.wbn ghcr.io/$GITHUB_USERNAME/hello-world:0.0.0\n```\n\nIf the registry at\n`https://github.com/users/$GITHUB_USERNAME/packages/container/package/hello-world`\ndoest not exist, it will be created automatically.\n\nYou can view and manage artifacts in your repository at `https://github.com/$GITHUB_USERNAME?tab=packages`.\n\n```bash\nwasm-to-oci pull ghcr.io/$GITHUB_USERNAME/hello-world:0.0.0 --out hello-world.test.wbn\n```\n\n### What\'s next?\n\nThere are still a few main things missing from this work flow:\n\n1. The `docker images` command provides a way to\n   manage docker images locally.\n\n   I don\'t currently have an equivalent\n   for managing bundles\n   or generic OCI images.\n\n2. The `docker run` command provides way to\n   to create a "running" container\n   by combining an image with a linux kernel.\n\n   The equivalent would be\n   hosting a bundle as a static asset\n   such that a user can interact with it.\n\n3. The `docker run` command provides way to\n   to create a "running" container\n   by combining an image with a linux kernel.\n\n   The equivalent would be\n   hosting a bundle as a static asset\n   such that a user can interact with it.\n\n4. The `docker build` incrementally builds\n   images from other, protypal images.\n\n   The equivalent would be\n   a templating system that can pull\n   existing static in websites,\n   and modify them to make new ones.\n', "html": '<p><em>Author\u2019s Note: This is based on <strong>experimental</strong> technologies that aren\u2019t quite ready for production. Nonetheless, I believe the ideas presented in this article will be useful in the near future.</em></p>\n<p>Did you know that you can manage static websites\nlike you manage images with <a href="https://docker.com">Docker</a>? You can!</p>\n<p>But I\u2019m sure you have a few more questions, like:</p>\n<ul>\n<li>What do I mean by \u201Clike Docker\u201D?</li>\n<li>Why would you want to do such a thing?</li>\n<li>How can you do it yourself?</li>\n</ul>\n<p>To find answers,\nwe will first take a <em>simplified</em> look\nat how management works with Docker.\nWe will then learn how to create\na similar process for static websites.</p>\n<h2 id="workflow">Workflow</h2>\n<p>At its most basic, Docker works like this:</p>\n<ol>\n<li>Create an image <a href="https://github.com/opencontainers/image-spec">(an OCI Image)</a>\n\u2014 a single artifact that represents a file tree.\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">docker build -t registry/image:0.0.0 -f - </span><span style="color: #79C0FF">.</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&lt;&lt;EOF</span></span>\n<span class="line"><span style="color: #A5D6FF">FROM nginx:latest</span></span>\n<span class="line"><span style="color: #FF7B72">EOF</span></span></code></pre>\n</li>\n<li>Publish the image to a registry <a href="https://github.com/opencontainers/distribution-spec">(an OCI Registry)</a>.\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">docker push registry/image:0.0.0</span></span></code></pre>\n</li>\n<li>When necessary, retrieve said image from the registry to use it.\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">docker run -it --rm -p 8080:80 registry/image:0.0.0</span></span>\n<span class="line"><span style="color: #8B949E"># Note:`docker run` pulls the image from the registry if not locally available</span></span></code></pre>\n</li>\n</ol>\n<p>When we make static websites, the process is similarly simple:</p>\n<ol>\n<li>\n<p>Create a file tree.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">npm run build</span></span>\n<span class="line"><span style="color: #C9D1D9">...</span></span>\n<span class="line"><span style="color: #8B949E"># There are countless technologies -- atom, webpack, rollup, etc. --</span></span>\n<span class="line"><span style="color: #8B949E"># that can be used to create a static website.</span></span></code></pre>\n</li>\n<li>\n<p>When necessary, push file tree to a server.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">npm run publish</span></span>\n<span class="line"><span style="color: #C9D1D9">...</span></span>\n<span class="line"><span style="color: #8B949E"># There are similarly a number of options for publishing.</span></span>\n<span class="line"><span style="color: #8B949E"># ftp and git (when configured with hooks) are viable options.</span></span></code></pre>\n</li>\n</ol>\n<p>While both processes are simple,\nthe idea of an <strong>image</strong> from the Docker\nworkflow is key.\nAn entire website as a single artifact\nto be versioned, shared, and deployed\nin like an image is enticing.</p>\n<h2 id="tutorial">Tutorial</h2>\n<p>Now that we\u2019ve covered the \u201Cwhat\u201D and the \u201Cwhy\u201D, let\u2019s look at the \u201Chow\u201D.</p>\n<h3 id="prerequesites">Prerequesites</h3>\n<p>In order complete do this tutorial, you\u2019ll need the following installed:</p>\n<h4 id="go">go</h4>\n<p>Two CLI tools are based on go,\nso we might as well get this out of the way first.</p>\n<p>Install go according to <a href="https://golang.org/doc/install">instructions here</a>.</p>\n<h4 id="gen-bundle">gen-bundle</h4>\n<p>Install gen-bundle according to <a href="https://github.com/WICG/webpackage/tree/main/go/bundle">instructions here</a>.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E"># Install wasm-to-oci https://github.com/engineerd/wasm-to-oci</span></span>\n<span class="line"><span style="color: #C9D1D9">go get -u github.com/WICG/webpackage/go/bundle/cmd/...</span></span></code></pre>\n<h4 id="wasm-to-oci">wasm-to-oci</h4>\n<p>Install wasm-to-oci according to <a href="https://github.com/engineerd/wasm-to-oci">instructions here</a>, or run:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E"># Install wasm-to-oci https://github.com/engineerd/wasm-to-oci</span></span>\n<span class="line"><span style="color: #C9D1D9">go get -u github.com/WICG/webpackage/go/bundle/cmd/...</span></span></code></pre>\n<h4 id="docker">Docker</h4>\n<p>This is silly;\nbut to authenticate wasm-to-oci,\nyou need Docker.</p>\n<p>This will hopefully change soon \u2014\nI said this was \u201Cexperimental\u201D!</p>\n<p>Install docker according to <a href="https://golang.org/doc/install">instructions here</a>.</p>\n<h4 id="google-chrome">Google Chrome</h4>\n<p>Install Google Chrome according to <a href="https://www.google.com/chrome/">instructions here</a>.</p>\n<h4 id="a-github-account">a Github Account</h4>\n<p>You\u2019ll need a Github account to publish the artifact.</p>\n<p><a href="https://github.com/">Sign up</a> and\n<a href="https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-container-registry">set up your container registry</a>\nif you haven\u2019t already.</p>\n<h3 id="plan">Plan</h3>\n<p>We want a process\nthat mirrors the one\noutlined above for Docker:</p>\n<ol>\n<li>Convert a file tree into an \u201Cimage-like\u201D artifact. (using <code is:raw>gen-bungle</code>)</li>\n<li>Publish said artifact to a registry. (Github via <code is:raw>wasm-to-oci</code>)</li>\n<li>When necessary, retrieve said image from the registry and view it. (with <code is:raw>wasm-to-oci</code> and Google Chrome)</li>\n</ol>\n<h3 id="artifact">Artifact</h3>\n<p>In place of an image,\nwe use a <a href="https://web.dev/web-bundles/">web bundle</a>\n\u2014 an emerging format used to package entire websites.</p>\n<h4 id="create-an-artifact">Create an artifact</h4>\n<p>Create a empty folder named \u2018hello-world\u2019.</p>\n<p>In it, place a file named \u2018index.html\u2019\nwith the following contents:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;My First Web Bundle&lt;/</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    Hello, World! This is the first page!</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">a</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">href</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;/next.html&quot;</span><span style="color: #C9D1D9">&gt; See what&#39;s next... &lt;/</span><span style="color: #7EE787">a</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Place another file named \u2018next.html\u2019\nwith the following contents:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;My first bundle&lt;/</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    Hello again, World! This is the second page!</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">a</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">href</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;/&quot;</span><span style="color: #C9D1D9">&gt; See what (or who? \u{1F914}) has come before...&lt;/</span><span style="color: #7EE787">a</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Outside of the hello-world folder, run the following command:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">gen-bundle -dir ./hello-world -baseURL http://localhost/ -o hello-world.wbn -primaryURL http://localhost/</span></span></code></pre>\n<p>This creates a bundle file\nnamed \u201Chello-world.wbn\u201D.\nThis is equivalent to a Docker image.\n(Note that when you interact with docker,\nyou use commands like <code is:raw>build</code>, <code is:raw>push</code>, and <code is:raw>pull</code>.\nYou do not ususually interact directly\nwith image files themselves.)</p>\n<h4 id="view-artifact">View Artifact</h4>\n<p>To view the artifact,\nwe need to enable\nthe experimental\n\u201Cweb bundles\u201D browser feature.</p>\n<p>Using Chrome, visit <code is:raw>chrome://flags/#web-bundles</code>.\nEnable the feature and restart your browser.</p>\n<p>Using Chrome, open the <code is:raw>hello-world.wbn</code> file\nthat you previoiusly created.\nThe url will look something like\n<code is:raw>file:///.../hello-world.wbn?http://localhost/</code>.</p>\n<p>Notice that you can freely navigate\nbetween pages of the site \u2014\neven though it\u2019s just single file!</p>\n<p>You can probably imagine\na few uses for this;\nand here are a few:</p>\n<ol>\n<li>\n<p>Entire websites can be easily snapped-shotted\nand archived into a single file.</p>\n</li>\n<li>\n<p>In the past, creating a test deployment for a site\nused to require spinning up a new server.\nNow you can do it by sharing a single file.</p>\n</li>\n</ol>\n<h3 id="registry">Registry</h3>\n<p>In place of a registry,\nhow do we manage our bundles?\nThe beautiful thing is that\nwe can actually use an OCI registry!</p>\n<p>OCI has a <a href="https://github.com/opencontainers/artifacts">goal</a>\nto enable the distribution\nof more cloud native artifacts.</p>\n<p>There are no existing tools\nto push bundles (specificaly)\nto OCI registries.\nFortunately, we can <del>abuse</del> use WASM to OCI\n\u2014 a tool for doing something\nsimilar with web assembly \u2014\nfor our purposes.</p>\n<p>We\u2019ll use GitHub as a OCI registry\nas it supports unknown images.\nNotably, Docker Hub does not support this.</p>\n<h4 id="login-to-github-with-docker">Login to Github with Docker</h4>\n<p>We will use Docker )only_ to authenticate</p>\n<p>First obtain a\n<a href="https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token">github access token</a>\nwith, permissions to read and write to the registry.</p>\n<p>User <code is:raw>docker login</code> to login to the github container registry at <code is:raw>ghcr.io</code>,</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #79C0FF">echo</span><span style="color: #C9D1D9"> $GITHUB_ACCESS_TOKEN </span><span style="color: #FF7B72">|</span><span style="color: #C9D1D9"> docker login ghcr.io -u $GITHUB_USERNAME --password-stdin</span></span></code></pre>\n<h4 id="pushing-and-pulling">Pushing and Pulling</h4>\n<p>Push the bundle to the registry with:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">wasm-to-oci push ./hello-world.wbn ghcr.io/$GITHUB_USERNAME/hello-world:0.0.0</span></span></code></pre>\n<p>If the registry at\n<code is:raw>https://github.com/users/$GITHUB_USERNAME/packages/container/package/hello-world</code>\ndoest not exist, it will be created automatically.</p>\n<p>You can view and manage artifacts in your repository at <code is:raw>https://github.com/$GITHUB_USERNAME?tab=packages</code>.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">wasm-to-oci pull ghcr.io/$GITHUB_USERNAME/hello-world:0.0.0 --out hello-world.test.wbn</span></span></code></pre>\n<h3 id="whats-next">What\u2019s next?</h3>\n<p>There are still a few main things missing from this work flow:</p>\n<ol>\n<li>\n<p>The <code is:raw>docker images</code> command provides a way to\nmanage docker images locally.</p>\n<p>I don\u2019t currently have an equivalent\nfor managing bundles\nor generic OCI images.</p>\n</li>\n<li>\n<p>The <code is:raw>docker run</code> command provides way to\nto create a \u201Crunning\u201D container\nby combining an image with a linux kernel.</p>\n<p>The equivalent would be\nhosting a bundle as a static asset\nsuch that a user can interact with it.</p>\n</li>\n<li>\n<p>The <code is:raw>docker run</code> command provides way to\nto create a \u201Crunning\u201D container\nby combining an image with a linux kernel.</p>\n<p>The equivalent would be\nhosting a bundle as a static asset\nsuch that a user can interact with it.</p>\n</li>\n<li>\n<p>The <code is:raw>docker build</code> incrementally builds\nimages from other, protypal images.</p>\n<p>The equivalent would be\na templating system that can pull\nexisting static in websites,\nand modify them to make new ones.</p>\n</li>\n</ol>' };
const frontmatter$7 = { "title": "Manage Websites Like Docker", "description": "Manage static websites like you manage Docker images", "author": "John Henry", "date": "26 October 2021", "heroImage": "/vendor/img/www.pexels.com/pixabay/view-of-street-from-a-glass-window.jpg", "alt": "", "tags": ["programming"], "astro": { "headers": [{ "depth": 2, "slug": "workflow", "text": "Workflow" }, { "depth": 2, "slug": "tutorial", "text": "Tutorial" }, { "depth": 3, "slug": "prerequesites", "text": "Prerequesites" }, { "depth": 4, "slug": "go", "text": "go" }, { "depth": 4, "slug": "gen-bundle", "text": "gen-bundle" }, { "depth": 4, "slug": "wasm-to-oci", "text": "wasm-to-oci" }, { "depth": 4, "slug": "docker", "text": "Docker" }, { "depth": 4, "slug": "google-chrome", "text": "Google Chrome" }, { "depth": 4, "slug": "a-github-account", "text": "a Github Account" }, { "depth": 3, "slug": "plan", "text": "Plan" }, { "depth": 3, "slug": "artifact", "text": "Artifact" }, { "depth": 4, "slug": "create-an-artifact", "text": "Create an artifact" }, { "depth": 4, "slug": "view-artifact", "text": "View Artifact" }, { "depth": 3, "slug": "registry", "text": "Registry" }, { "depth": 4, "slug": "login-to-github-with-docker", "text": "Login to Github with Docker" }, { "depth": 4, "slug": "pushing-and-pulling", "text": "Pushing and Pulling" }, { "depth": 3, "slug": "whats-next", "text": "What\u2019s next?" }], "source": '\n_Author\u2019s Note: This is based on **experimental** technologies that aren\'t quite ready for production. Nonetheless, I believe the ideas presented in this article will be useful in the near future._\n\nDid you know that you can manage static websites\nlike you manage images with [Docker](https://docker.com)? You can!\n\nBut I\'m sure you have a few more questions, like:\n\n- What do I mean by "like Docker"?\n- Why would you want to do such a thing?\n- How can you do it yourself?\n\nTo find answers,\nwe will first take a _simplified_ look\nat how management works with Docker.\nWe will then learn how to create\na similar process for static websites.\n\n## Workflow\n\nAt its most basic, Docker works like this:\n\n1. Create an image [(an OCI Image)](https://github.com/opencontainers/image-spec)\n   -- a single artifact that represents a file tree.\n   ```bash\n   docker build -t registry/image:0.0.0 -f - . <<EOF\n   FROM nginx:latest\n   EOF\n   ```\n2. Publish the image to a registry [(an OCI Registry)](https://github.com/opencontainers/distribution-spec).\n   ```bash\n   docker push registry/image:0.0.0\n   ```\n3. When necessary, retrieve said image from the registry to use it.\n   ```bash\n   docker run -it --rm -p 8080:80 registry/image:0.0.0\n   # Note:`docker run` pulls the image from the registry if not locally available\n   ```\n\nWhen we make static websites, the process is similarly simple:\n\n1. Create a file tree.\n\n   ```bash\n   npm run build\n   ...\n   # There are countless technologies -- atom, webpack, rollup, etc. --\n   # that can be used to create a static website.\n   ```\n\n2. When necessary, push file tree to a server.\n   ```bash\n   npm run publish\n   ...\n   # There are similarly a number of options for publishing.\n   # ftp and git (when configured with hooks) are viable options.\n   ```\n\nWhile both processes are simple,\nthe idea of an **image** from the Docker\nworkflow is key.\nAn entire website as a single artifact\nto be versioned, shared, and deployed\nin like an image is enticing.\n\n## Tutorial\n\nNow that we\'ve covered the "what" and the "why", let\'s look at the "how".\n\n### Prerequesites\n\nIn order complete do this tutorial, you\'ll need the following installed:\n\n#### go\n\nTwo CLI tools are based on go,\nso we might as well get this out of the way first.\n\nInstall go according to [instructions here](https://golang.org/doc/install).\n\n#### gen-bundle\n\nInstall gen-bundle according to [instructions here](https://github.com/WICG/webpackage/tree/main/go/bundle).\n\n```bash\n# Install wasm-to-oci https://github.com/engineerd/wasm-to-oci\ngo get -u github.com/WICG/webpackage/go/bundle/cmd/...\n```\n\n#### wasm-to-oci\n\nInstall wasm-to-oci according to [instructions here](https://github.com/engineerd/wasm-to-oci), or run:\n\n```bash\n# Install wasm-to-oci https://github.com/engineerd/wasm-to-oci\ngo get -u github.com/WICG/webpackage/go/bundle/cmd/...\n```\n\n#### Docker\n\nThis is silly;\nbut to authenticate wasm-to-oci,\nyou need Docker.\n\nThis will hopefully change soon --\nI said this was "experimental"!\n\nInstall docker according to [instructions here](https://golang.org/doc/install).\n\n#### Google Chrome\n\nInstall Google Chrome according to [instructions here](https://www.google.com/chrome/).\n\n#### a Github Account\n\nYou\'ll need a Github account to publish the artifact.\n\n[Sign up](https://github.com/) and\n[set up your container registry](https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-container-registry)\nif you haven\'t already.\n\n### Plan\n\nWe want a process\nthat mirrors the one\noutlined above for Docker:\n\n1. Convert a file tree into an "image-like" artifact. (using `gen-bungle`)\n2. Publish said artifact to a registry. (Github via `wasm-to-oci`)\n3. When necessary, retrieve said image from the registry and view it. (with `wasm-to-oci` and Google Chrome)\n\n### Artifact\n\nIn place of an image,\nwe use a [web bundle](https://web.dev/web-bundles/)\n-- an emerging format used to package entire websites.\n\n#### Create an artifact\n\nCreate a empty folder named \'hello-world\'.\n\nIn it, place a file named \'index.html\'\nwith the following contents:\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>My First Web Bundle</title>\n  </head>\n  <body>\n    Hello, World! This is the first page!\n    <a href="/next.html"> See what\'s next... </a>\n  </body>\n</html>\n```\n\nPlace another file named \'next.html\'\nwith the following contents:\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>My first bundle</title>\n  </head>\n  <body>\n    Hello again, World! This is the second page!\n    <a href="/"> See what (or who? \u{1F914}) has come before...</a>\n  </body>\n</html>\n```\n\nOutside of the hello-world folder, run the following command:\n\n```bash\ngen-bundle -dir ./hello-world -baseURL http://localhost/ -o hello-world.wbn -primaryURL http://localhost/\n```\n\nThis creates a bundle file\nnamed "hello-world.wbn".\nThis is equivalent to a Docker image.\n(Note that when you interact with docker,\nyou use commands like `build`, `push`, and `pull`.\nYou do not ususually interact directly\nwith image files themselves.)\n\n#### View Artifact\n\nTo view the artifact,\nwe need to enable\nthe experimental\n"web bundles" browser feature.\n\nUsing Chrome, visit `chrome://flags/#web-bundles`.\nEnable the feature and restart your browser.\n\nUsing Chrome, open the `hello-world.wbn` file\nthat you previoiusly created.\nThe url will look something like\n`file:///.../hello-world.wbn?http://localhost/`.\n\nNotice that you can freely navigate\nbetween pages of the site --\neven though it\'s just single file!\n\nYou can probably imagine\na few uses for this;\nand here are a few:\n\n1. Entire websites can be easily snapped-shotted\n   and archived into a single file.\n\n2. In the past, creating a test deployment for a site\n   used to require spinning up a new server.\n   Now you can do it by sharing a single file.\n\n### Registry\n\nIn place of a registry,\nhow do we manage our bundles?\nThe beautiful thing is that\nwe can actually use an OCI registry!\n\nOCI has a [goal](https://github.com/opencontainers/artifacts)\nto enable the distribution\nof more cloud native artifacts.\n\nThere are no existing tools\nto push bundles (specificaly)\nto OCI registries.\nFortunately, we can ~abuse~ use WASM to OCI\n-- a tool for doing something\nsimilar with web assembly --\nfor our purposes.\n\nWe\'ll use GitHub as a OCI registry\nas it supports unknown images.\nNotably, Docker Hub does not support this.\n\n#### Login to Github with Docker\n\nWe will use Docker )only\\_ to authenticate\n\nFirst obtain a\n[github access token](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token)\nwith, permissions to read and write to the registry.\n\nUser `docker login` to login to the github container registry at `ghcr.io`,\n\n```bash\necho $GITHUB_ACCESS_TOKEN | docker login ghcr.io -u $GITHUB_USERNAME --password-stdin\n```\n\n#### Pushing and Pulling\n\nPush the bundle to the registry with:\n\n```bash\nwasm-to-oci push ./hello-world.wbn ghcr.io/$GITHUB_USERNAME/hello-world:0.0.0\n```\n\nIf the registry at\n`https://github.com/users/$GITHUB_USERNAME/packages/container/package/hello-world`\ndoest not exist, it will be created automatically.\n\nYou can view and manage artifacts in your repository at `https://github.com/$GITHUB_USERNAME?tab=packages`.\n\n```bash\nwasm-to-oci pull ghcr.io/$GITHUB_USERNAME/hello-world:0.0.0 --out hello-world.test.wbn\n```\n\n### What\'s next?\n\nThere are still a few main things missing from this work flow:\n\n1. The `docker images` command provides a way to\n   manage docker images locally.\n\n   I don\'t currently have an equivalent\n   for managing bundles\n   or generic OCI images.\n\n2. The `docker run` command provides way to\n   to create a "running" container\n   by combining an image with a linux kernel.\n\n   The equivalent would be\n   hosting a bundle as a static asset\n   such that a user can interact with it.\n\n3. The `docker run` command provides way to\n   to create a "running" container\n   by combining an image with a linux kernel.\n\n   The equivalent would be\n   hosting a bundle as a static asset\n   such that a user can interact with it.\n\n4. The `docker build` incrementally builds\n   images from other, protypal images.\n\n   The equivalent would be\n   a templating system that can pull\n   existing static in websites,\n   and modify them to make new ones.\n', "html": '<p><em>Author\u2019s Note: This is based on <strong>experimental</strong> technologies that aren\u2019t quite ready for production. Nonetheless, I believe the ideas presented in this article will be useful in the near future.</em></p>\n<p>Did you know that you can manage static websites\nlike you manage images with <a href="https://docker.com">Docker</a>? You can!</p>\n<p>But I\u2019m sure you have a few more questions, like:</p>\n<ul>\n<li>What do I mean by \u201Clike Docker\u201D?</li>\n<li>Why would you want to do such a thing?</li>\n<li>How can you do it yourself?</li>\n</ul>\n<p>To find answers,\nwe will first take a <em>simplified</em> look\nat how management works with Docker.\nWe will then learn how to create\na similar process for static websites.</p>\n<h2 id="workflow">Workflow</h2>\n<p>At its most basic, Docker works like this:</p>\n<ol>\n<li>Create an image <a href="https://github.com/opencontainers/image-spec">(an OCI Image)</a>\n\u2014 a single artifact that represents a file tree.\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">docker build -t registry/image:0.0.0 -f - </span><span style="color: #79C0FF">.</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&lt;&lt;EOF</span></span>\n<span class="line"><span style="color: #A5D6FF">FROM nginx:latest</span></span>\n<span class="line"><span style="color: #FF7B72">EOF</span></span></code></pre>\n</li>\n<li>Publish the image to a registry <a href="https://github.com/opencontainers/distribution-spec">(an OCI Registry)</a>.\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">docker push registry/image:0.0.0</span></span></code></pre>\n</li>\n<li>When necessary, retrieve said image from the registry to use it.\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">docker run -it --rm -p 8080:80 registry/image:0.0.0</span></span>\n<span class="line"><span style="color: #8B949E"># Note:`docker run` pulls the image from the registry if not locally available</span></span></code></pre>\n</li>\n</ol>\n<p>When we make static websites, the process is similarly simple:</p>\n<ol>\n<li>\n<p>Create a file tree.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">npm run build</span></span>\n<span class="line"><span style="color: #C9D1D9">...</span></span>\n<span class="line"><span style="color: #8B949E"># There are countless technologies -- atom, webpack, rollup, etc. --</span></span>\n<span class="line"><span style="color: #8B949E"># that can be used to create a static website.</span></span></code></pre>\n</li>\n<li>\n<p>When necessary, push file tree to a server.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">npm run publish</span></span>\n<span class="line"><span style="color: #C9D1D9">...</span></span>\n<span class="line"><span style="color: #8B949E"># There are similarly a number of options for publishing.</span></span>\n<span class="line"><span style="color: #8B949E"># ftp and git (when configured with hooks) are viable options.</span></span></code></pre>\n</li>\n</ol>\n<p>While both processes are simple,\nthe idea of an <strong>image</strong> from the Docker\nworkflow is key.\nAn entire website as a single artifact\nto be versioned, shared, and deployed\nin like an image is enticing.</p>\n<h2 id="tutorial">Tutorial</h2>\n<p>Now that we\u2019ve covered the \u201Cwhat\u201D and the \u201Cwhy\u201D, let\u2019s look at the \u201Chow\u201D.</p>\n<h3 id="prerequesites">Prerequesites</h3>\n<p>In order complete do this tutorial, you\u2019ll need the following installed:</p>\n<h4 id="go">go</h4>\n<p>Two CLI tools are based on go,\nso we might as well get this out of the way first.</p>\n<p>Install go according to <a href="https://golang.org/doc/install">instructions here</a>.</p>\n<h4 id="gen-bundle">gen-bundle</h4>\n<p>Install gen-bundle according to <a href="https://github.com/WICG/webpackage/tree/main/go/bundle">instructions here</a>.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E"># Install wasm-to-oci https://github.com/engineerd/wasm-to-oci</span></span>\n<span class="line"><span style="color: #C9D1D9">go get -u github.com/WICG/webpackage/go/bundle/cmd/...</span></span></code></pre>\n<h4 id="wasm-to-oci">wasm-to-oci</h4>\n<p>Install wasm-to-oci according to <a href="https://github.com/engineerd/wasm-to-oci">instructions here</a>, or run:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E"># Install wasm-to-oci https://github.com/engineerd/wasm-to-oci</span></span>\n<span class="line"><span style="color: #C9D1D9">go get -u github.com/WICG/webpackage/go/bundle/cmd/...</span></span></code></pre>\n<h4 id="docker">Docker</h4>\n<p>This is silly;\nbut to authenticate wasm-to-oci,\nyou need Docker.</p>\n<p>This will hopefully change soon \u2014\nI said this was \u201Cexperimental\u201D!</p>\n<p>Install docker according to <a href="https://golang.org/doc/install">instructions here</a>.</p>\n<h4 id="google-chrome">Google Chrome</h4>\n<p>Install Google Chrome according to <a href="https://www.google.com/chrome/">instructions here</a>.</p>\n<h4 id="a-github-account">a Github Account</h4>\n<p>You\u2019ll need a Github account to publish the artifact.</p>\n<p><a href="https://github.com/">Sign up</a> and\n<a href="https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-container-registry">set up your container registry</a>\nif you haven\u2019t already.</p>\n<h3 id="plan">Plan</h3>\n<p>We want a process\nthat mirrors the one\noutlined above for Docker:</p>\n<ol>\n<li>Convert a file tree into an \u201Cimage-like\u201D artifact. (using <code is:raw>gen-bungle</code>)</li>\n<li>Publish said artifact to a registry. (Github via <code is:raw>wasm-to-oci</code>)</li>\n<li>When necessary, retrieve said image from the registry and view it. (with <code is:raw>wasm-to-oci</code> and Google Chrome)</li>\n</ol>\n<h3 id="artifact">Artifact</h3>\n<p>In place of an image,\nwe use a <a href="https://web.dev/web-bundles/">web bundle</a>\n\u2014 an emerging format used to package entire websites.</p>\n<h4 id="create-an-artifact">Create an artifact</h4>\n<p>Create a empty folder named \u2018hello-world\u2019.</p>\n<p>In it, place a file named \u2018index.html\u2019\nwith the following contents:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;My First Web Bundle&lt;/</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    Hello, World! This is the first page!</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">a</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">href</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;/next.html&quot;</span><span style="color: #C9D1D9">&gt; See what&#39;s next... &lt;/</span><span style="color: #7EE787">a</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Place another file named \u2018next.html\u2019\nwith the following contents:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;My first bundle&lt;/</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    Hello again, World! This is the second page!</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">a</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">href</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;/&quot;</span><span style="color: #C9D1D9">&gt; See what (or who? \u{1F914}) has come before...&lt;/</span><span style="color: #7EE787">a</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Outside of the hello-world folder, run the following command:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">gen-bundle -dir ./hello-world -baseURL http://localhost/ -o hello-world.wbn -primaryURL http://localhost/</span></span></code></pre>\n<p>This creates a bundle file\nnamed \u201Chello-world.wbn\u201D.\nThis is equivalent to a Docker image.\n(Note that when you interact with docker,\nyou use commands like <code is:raw>build</code>, <code is:raw>push</code>, and <code is:raw>pull</code>.\nYou do not ususually interact directly\nwith image files themselves.)</p>\n<h4 id="view-artifact">View Artifact</h4>\n<p>To view the artifact,\nwe need to enable\nthe experimental\n\u201Cweb bundles\u201D browser feature.</p>\n<p>Using Chrome, visit <code is:raw>chrome://flags/#web-bundles</code>.\nEnable the feature and restart your browser.</p>\n<p>Using Chrome, open the <code is:raw>hello-world.wbn</code> file\nthat you previoiusly created.\nThe url will look something like\n<code is:raw>file:///.../hello-world.wbn?http://localhost/</code>.</p>\n<p>Notice that you can freely navigate\nbetween pages of the site \u2014\neven though it\u2019s just single file!</p>\n<p>You can probably imagine\na few uses for this;\nand here are a few:</p>\n<ol>\n<li>\n<p>Entire websites can be easily snapped-shotted\nand archived into a single file.</p>\n</li>\n<li>\n<p>In the past, creating a test deployment for a site\nused to require spinning up a new server.\nNow you can do it by sharing a single file.</p>\n</li>\n</ol>\n<h3 id="registry">Registry</h3>\n<p>In place of a registry,\nhow do we manage our bundles?\nThe beautiful thing is that\nwe can actually use an OCI registry!</p>\n<p>OCI has a <a href="https://github.com/opencontainers/artifacts">goal</a>\nto enable the distribution\nof more cloud native artifacts.</p>\n<p>There are no existing tools\nto push bundles (specificaly)\nto OCI registries.\nFortunately, we can <del>abuse</del> use WASM to OCI\n\u2014 a tool for doing something\nsimilar with web assembly \u2014\nfor our purposes.</p>\n<p>We\u2019ll use GitHub as a OCI registry\nas it supports unknown images.\nNotably, Docker Hub does not support this.</p>\n<h4 id="login-to-github-with-docker">Login to Github with Docker</h4>\n<p>We will use Docker )only_ to authenticate</p>\n<p>First obtain a\n<a href="https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token">github access token</a>\nwith, permissions to read and write to the registry.</p>\n<p>User <code is:raw>docker login</code> to login to the github container registry at <code is:raw>ghcr.io</code>,</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #79C0FF">echo</span><span style="color: #C9D1D9"> $GITHUB_ACCESS_TOKEN </span><span style="color: #FF7B72">|</span><span style="color: #C9D1D9"> docker login ghcr.io -u $GITHUB_USERNAME --password-stdin</span></span></code></pre>\n<h4 id="pushing-and-pulling">Pushing and Pulling</h4>\n<p>Push the bundle to the registry with:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">wasm-to-oci push ./hello-world.wbn ghcr.io/$GITHUB_USERNAME/hello-world:0.0.0</span></span></code></pre>\n<p>If the registry at\n<code is:raw>https://github.com/users/$GITHUB_USERNAME/packages/container/package/hello-world</code>\ndoest not exist, it will be created automatically.</p>\n<p>You can view and manage artifacts in your repository at <code is:raw>https://github.com/$GITHUB_USERNAME?tab=packages</code>.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">wasm-to-oci pull ghcr.io/$GITHUB_USERNAME/hello-world:0.0.0 --out hello-world.test.wbn</span></span></code></pre>\n<h3 id="whats-next">What\u2019s next?</h3>\n<p>There are still a few main things missing from this work flow:</p>\n<ol>\n<li>\n<p>The <code is:raw>docker images</code> command provides a way to\nmanage docker images locally.</p>\n<p>I don\u2019t currently have an equivalent\nfor managing bundles\nor generic OCI images.</p>\n</li>\n<li>\n<p>The <code is:raw>docker run</code> command provides way to\nto create a \u201Crunning\u201D container\nby combining an image with a linux kernel.</p>\n<p>The equivalent would be\nhosting a bundle as a static asset\nsuch that a user can interact with it.</p>\n</li>\n<li>\n<p>The <code is:raw>docker run</code> command provides way to\nto create a \u201Crunning\u201D container\nby combining an image with a linux kernel.</p>\n<p>The equivalent would be\nhosting a bundle as a static asset\nsuch that a user can interact with it.</p>\n</li>\n<li>\n<p>The <code is:raw>docker build</code> incrementally builds\nimages from other, protypal images.</p>\n<p>The equivalent would be\na templating system that can pull\nexisting static in websites,\nand modify them to make new ones.</p>\n</li>\n</ol>' } };
const $$metadata$d = createMetadata("/src/pages/blog/posts/manage-websites-like-docker.md", { modules: [{ module: $$module1$1, specifier: "../../../components/BlogPage.astro", assert: {} }], hydratedComponents: [], clientOnlyComponents: [], hydrationDirectives: /* @__PURE__ */ new Set([]), hoisted: [] });
const $$Astro$d = createAstro("/src/pages/blog/posts/manage-websites-like-docker.md", "https://astro.build", "file:///home/runner/work/johnhenry.github.io/johnhenry.github.io/");
const $$ManageWebsitesLikeDocker = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$d, $$props, $$slots);
  Astro2.self = $$ManageWebsitesLikeDocker;
  const $$content = { "title": "Manage Websites Like Docker", "description": "Manage static websites like you manage Docker images", "author": "John Henry", "date": "26 October 2021", "heroImage": "/vendor/img/www.pexels.com/pixabay/view-of-street-from-a-glass-window.jpg", "alt": "", "tags": ["programming"], "astro": { "headers": [{ "depth": 2, "slug": "workflow", "text": "Workflow" }, { "depth": 2, "slug": "tutorial", "text": "Tutorial" }, { "depth": 3, "slug": "prerequesites", "text": "Prerequesites" }, { "depth": 4, "slug": "go", "text": "go" }, { "depth": 4, "slug": "gen-bundle", "text": "gen-bundle" }, { "depth": 4, "slug": "wasm-to-oci", "text": "wasm-to-oci" }, { "depth": 4, "slug": "docker", "text": "Docker" }, { "depth": 4, "slug": "google-chrome", "text": "Google Chrome" }, { "depth": 4, "slug": "a-github-account", "text": "a Github Account" }, { "depth": 3, "slug": "plan", "text": "Plan" }, { "depth": 3, "slug": "artifact", "text": "Artifact" }, { "depth": 4, "slug": "create-an-artifact", "text": "Create an artifact" }, { "depth": 4, "slug": "view-artifact", "text": "View Artifact" }, { "depth": 3, "slug": "registry", "text": "Registry" }, { "depth": 4, "slug": "login-to-github-with-docker", "text": "Login to Github with Docker" }, { "depth": 4, "slug": "pushing-and-pulling", "text": "Pushing and Pulling" }, { "depth": 3, "slug": "whats-next", "text": "What\u2019s next?" }], "source": '\n_Author\u2019s Note: This is based on **experimental** technologies that aren\'t quite ready for production. Nonetheless, I believe the ideas presented in this article will be useful in the near future._\n\nDid you know that you can manage static websites\nlike you manage images with [Docker](https://docker.com)? You can!\n\nBut I\'m sure you have a few more questions, like:\n\n- What do I mean by "like Docker"?\n- Why would you want to do such a thing?\n- How can you do it yourself?\n\nTo find answers,\nwe will first take a _simplified_ look\nat how management works with Docker.\nWe will then learn how to create\na similar process for static websites.\n\n## Workflow\n\nAt its most basic, Docker works like this:\n\n1. Create an image [(an OCI Image)](https://github.com/opencontainers/image-spec)\n   -- a single artifact that represents a file tree.\n   ```bash\n   docker build -t registry/image:0.0.0 -f - . <<EOF\n   FROM nginx:latest\n   EOF\n   ```\n2. Publish the image to a registry [(an OCI Registry)](https://github.com/opencontainers/distribution-spec).\n   ```bash\n   docker push registry/image:0.0.0\n   ```\n3. When necessary, retrieve said image from the registry to use it.\n   ```bash\n   docker run -it --rm -p 8080:80 registry/image:0.0.0\n   # Note:`docker run` pulls the image from the registry if not locally available\n   ```\n\nWhen we make static websites, the process is similarly simple:\n\n1. Create a file tree.\n\n   ```bash\n   npm run build\n   ...\n   # There are countless technologies -- atom, webpack, rollup, etc. --\n   # that can be used to create a static website.\n   ```\n\n2. When necessary, push file tree to a server.\n   ```bash\n   npm run publish\n   ...\n   # There are similarly a number of options for publishing.\n   # ftp and git (when configured with hooks) are viable options.\n   ```\n\nWhile both processes are simple,\nthe idea of an **image** from the Docker\nworkflow is key.\nAn entire website as a single artifact\nto be versioned, shared, and deployed\nin like an image is enticing.\n\n## Tutorial\n\nNow that we\'ve covered the "what" and the "why", let\'s look at the "how".\n\n### Prerequesites\n\nIn order complete do this tutorial, you\'ll need the following installed:\n\n#### go\n\nTwo CLI tools are based on go,\nso we might as well get this out of the way first.\n\nInstall go according to [instructions here](https://golang.org/doc/install).\n\n#### gen-bundle\n\nInstall gen-bundle according to [instructions here](https://github.com/WICG/webpackage/tree/main/go/bundle).\n\n```bash\n# Install wasm-to-oci https://github.com/engineerd/wasm-to-oci\ngo get -u github.com/WICG/webpackage/go/bundle/cmd/...\n```\n\n#### wasm-to-oci\n\nInstall wasm-to-oci according to [instructions here](https://github.com/engineerd/wasm-to-oci), or run:\n\n```bash\n# Install wasm-to-oci https://github.com/engineerd/wasm-to-oci\ngo get -u github.com/WICG/webpackage/go/bundle/cmd/...\n```\n\n#### Docker\n\nThis is silly;\nbut to authenticate wasm-to-oci,\nyou need Docker.\n\nThis will hopefully change soon --\nI said this was "experimental"!\n\nInstall docker according to [instructions here](https://golang.org/doc/install).\n\n#### Google Chrome\n\nInstall Google Chrome according to [instructions here](https://www.google.com/chrome/).\n\n#### a Github Account\n\nYou\'ll need a Github account to publish the artifact.\n\n[Sign up](https://github.com/) and\n[set up your container registry](https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-container-registry)\nif you haven\'t already.\n\n### Plan\n\nWe want a process\nthat mirrors the one\noutlined above for Docker:\n\n1. Convert a file tree into an "image-like" artifact. (using `gen-bungle`)\n2. Publish said artifact to a registry. (Github via `wasm-to-oci`)\n3. When necessary, retrieve said image from the registry and view it. (with `wasm-to-oci` and Google Chrome)\n\n### Artifact\n\nIn place of an image,\nwe use a [web bundle](https://web.dev/web-bundles/)\n-- an emerging format used to package entire websites.\n\n#### Create an artifact\n\nCreate a empty folder named \'hello-world\'.\n\nIn it, place a file named \'index.html\'\nwith the following contents:\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>My First Web Bundle</title>\n  </head>\n  <body>\n    Hello, World! This is the first page!\n    <a href="/next.html"> See what\'s next... </a>\n  </body>\n</html>\n```\n\nPlace another file named \'next.html\'\nwith the following contents:\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>My first bundle</title>\n  </head>\n  <body>\n    Hello again, World! This is the second page!\n    <a href="/"> See what (or who? \u{1F914}) has come before...</a>\n  </body>\n</html>\n```\n\nOutside of the hello-world folder, run the following command:\n\n```bash\ngen-bundle -dir ./hello-world -baseURL http://localhost/ -o hello-world.wbn -primaryURL http://localhost/\n```\n\nThis creates a bundle file\nnamed "hello-world.wbn".\nThis is equivalent to a Docker image.\n(Note that when you interact with docker,\nyou use commands like `build`, `push`, and `pull`.\nYou do not ususually interact directly\nwith image files themselves.)\n\n#### View Artifact\n\nTo view the artifact,\nwe need to enable\nthe experimental\n"web bundles" browser feature.\n\nUsing Chrome, visit `chrome://flags/#web-bundles`.\nEnable the feature and restart your browser.\n\nUsing Chrome, open the `hello-world.wbn` file\nthat you previoiusly created.\nThe url will look something like\n`file:///.../hello-world.wbn?http://localhost/`.\n\nNotice that you can freely navigate\nbetween pages of the site --\neven though it\'s just single file!\n\nYou can probably imagine\na few uses for this;\nand here are a few:\n\n1. Entire websites can be easily snapped-shotted\n   and archived into a single file.\n\n2. In the past, creating a test deployment for a site\n   used to require spinning up a new server.\n   Now you can do it by sharing a single file.\n\n### Registry\n\nIn place of a registry,\nhow do we manage our bundles?\nThe beautiful thing is that\nwe can actually use an OCI registry!\n\nOCI has a [goal](https://github.com/opencontainers/artifacts)\nto enable the distribution\nof more cloud native artifacts.\n\nThere are no existing tools\nto push bundles (specificaly)\nto OCI registries.\nFortunately, we can ~abuse~ use WASM to OCI\n-- a tool for doing something\nsimilar with web assembly --\nfor our purposes.\n\nWe\'ll use GitHub as a OCI registry\nas it supports unknown images.\nNotably, Docker Hub does not support this.\n\n#### Login to Github with Docker\n\nWe will use Docker )only\\_ to authenticate\n\nFirst obtain a\n[github access token](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token)\nwith, permissions to read and write to the registry.\n\nUser `docker login` to login to the github container registry at `ghcr.io`,\n\n```bash\necho $GITHUB_ACCESS_TOKEN | docker login ghcr.io -u $GITHUB_USERNAME --password-stdin\n```\n\n#### Pushing and Pulling\n\nPush the bundle to the registry with:\n\n```bash\nwasm-to-oci push ./hello-world.wbn ghcr.io/$GITHUB_USERNAME/hello-world:0.0.0\n```\n\nIf the registry at\n`https://github.com/users/$GITHUB_USERNAME/packages/container/package/hello-world`\ndoest not exist, it will be created automatically.\n\nYou can view and manage artifacts in your repository at `https://github.com/$GITHUB_USERNAME?tab=packages`.\n\n```bash\nwasm-to-oci pull ghcr.io/$GITHUB_USERNAME/hello-world:0.0.0 --out hello-world.test.wbn\n```\n\n### What\'s next?\n\nThere are still a few main things missing from this work flow:\n\n1. The `docker images` command provides a way to\n   manage docker images locally.\n\n   I don\'t currently have an equivalent\n   for managing bundles\n   or generic OCI images.\n\n2. The `docker run` command provides way to\n   to create a "running" container\n   by combining an image with a linux kernel.\n\n   The equivalent would be\n   hosting a bundle as a static asset\n   such that a user can interact with it.\n\n3. The `docker run` command provides way to\n   to create a "running" container\n   by combining an image with a linux kernel.\n\n   The equivalent would be\n   hosting a bundle as a static asset\n   such that a user can interact with it.\n\n4. The `docker build` incrementally builds\n   images from other, protypal images.\n\n   The equivalent would be\n   a templating system that can pull\n   existing static in websites,\n   and modify them to make new ones.\n', "html": '<p><em>Author\u2019s Note: This is based on <strong>experimental</strong> technologies that aren\u2019t quite ready for production. Nonetheless, I believe the ideas presented in this article will be useful in the near future.</em></p>\n<p>Did you know that you can manage static websites\nlike you manage images with <a href="https://docker.com">Docker</a>? You can!</p>\n<p>But I\u2019m sure you have a few more questions, like:</p>\n<ul>\n<li>What do I mean by \u201Clike Docker\u201D?</li>\n<li>Why would you want to do such a thing?</li>\n<li>How can you do it yourself?</li>\n</ul>\n<p>To find answers,\nwe will first take a <em>simplified</em> look\nat how management works with Docker.\nWe will then learn how to create\na similar process for static websites.</p>\n<h2 id="workflow">Workflow</h2>\n<p>At its most basic, Docker works like this:</p>\n<ol>\n<li>Create an image <a href="https://github.com/opencontainers/image-spec">(an OCI Image)</a>\n\u2014 a single artifact that represents a file tree.\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">docker build -t registry/image:0.0.0 -f - </span><span style="color: #79C0FF">.</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&lt;&lt;EOF</span></span>\n<span class="line"><span style="color: #A5D6FF">FROM nginx:latest</span></span>\n<span class="line"><span style="color: #FF7B72">EOF</span></span></code></pre>\n</li>\n<li>Publish the image to a registry <a href="https://github.com/opencontainers/distribution-spec">(an OCI Registry)</a>.\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">docker push registry/image:0.0.0</span></span></code></pre>\n</li>\n<li>When necessary, retrieve said image from the registry to use it.\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">docker run -it --rm -p 8080:80 registry/image:0.0.0</span></span>\n<span class="line"><span style="color: #8B949E"># Note:`docker run` pulls the image from the registry if not locally available</span></span></code></pre>\n</li>\n</ol>\n<p>When we make static websites, the process is similarly simple:</p>\n<ol>\n<li>\n<p>Create a file tree.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">npm run build</span></span>\n<span class="line"><span style="color: #C9D1D9">...</span></span>\n<span class="line"><span style="color: #8B949E"># There are countless technologies -- atom, webpack, rollup, etc. --</span></span>\n<span class="line"><span style="color: #8B949E"># that can be used to create a static website.</span></span></code></pre>\n</li>\n<li>\n<p>When necessary, push file tree to a server.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">npm run publish</span></span>\n<span class="line"><span style="color: #C9D1D9">...</span></span>\n<span class="line"><span style="color: #8B949E"># There are similarly a number of options for publishing.</span></span>\n<span class="line"><span style="color: #8B949E"># ftp and git (when configured with hooks) are viable options.</span></span></code></pre>\n</li>\n</ol>\n<p>While both processes are simple,\nthe idea of an <strong>image</strong> from the Docker\nworkflow is key.\nAn entire website as a single artifact\nto be versioned, shared, and deployed\nin like an image is enticing.</p>\n<h2 id="tutorial">Tutorial</h2>\n<p>Now that we\u2019ve covered the \u201Cwhat\u201D and the \u201Cwhy\u201D, let\u2019s look at the \u201Chow\u201D.</p>\n<h3 id="prerequesites">Prerequesites</h3>\n<p>In order complete do this tutorial, you\u2019ll need the following installed:</p>\n<h4 id="go">go</h4>\n<p>Two CLI tools are based on go,\nso we might as well get this out of the way first.</p>\n<p>Install go according to <a href="https://golang.org/doc/install">instructions here</a>.</p>\n<h4 id="gen-bundle">gen-bundle</h4>\n<p>Install gen-bundle according to <a href="https://github.com/WICG/webpackage/tree/main/go/bundle">instructions here</a>.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E"># Install wasm-to-oci https://github.com/engineerd/wasm-to-oci</span></span>\n<span class="line"><span style="color: #C9D1D9">go get -u github.com/WICG/webpackage/go/bundle/cmd/...</span></span></code></pre>\n<h4 id="wasm-to-oci">wasm-to-oci</h4>\n<p>Install wasm-to-oci according to <a href="https://github.com/engineerd/wasm-to-oci">instructions here</a>, or run:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E"># Install wasm-to-oci https://github.com/engineerd/wasm-to-oci</span></span>\n<span class="line"><span style="color: #C9D1D9">go get -u github.com/WICG/webpackage/go/bundle/cmd/...</span></span></code></pre>\n<h4 id="docker">Docker</h4>\n<p>This is silly;\nbut to authenticate wasm-to-oci,\nyou need Docker.</p>\n<p>This will hopefully change soon \u2014\nI said this was \u201Cexperimental\u201D!</p>\n<p>Install docker according to <a href="https://golang.org/doc/install">instructions here</a>.</p>\n<h4 id="google-chrome">Google Chrome</h4>\n<p>Install Google Chrome according to <a href="https://www.google.com/chrome/">instructions here</a>.</p>\n<h4 id="a-github-account">a Github Account</h4>\n<p>You\u2019ll need a Github account to publish the artifact.</p>\n<p><a href="https://github.com/">Sign up</a> and\n<a href="https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-container-registry">set up your container registry</a>\nif you haven\u2019t already.</p>\n<h3 id="plan">Plan</h3>\n<p>We want a process\nthat mirrors the one\noutlined above for Docker:</p>\n<ol>\n<li>Convert a file tree into an \u201Cimage-like\u201D artifact. (using <code is:raw>gen-bungle</code>)</li>\n<li>Publish said artifact to a registry. (Github via <code is:raw>wasm-to-oci</code>)</li>\n<li>When necessary, retrieve said image from the registry and view it. (with <code is:raw>wasm-to-oci</code> and Google Chrome)</li>\n</ol>\n<h3 id="artifact">Artifact</h3>\n<p>In place of an image,\nwe use a <a href="https://web.dev/web-bundles/">web bundle</a>\n\u2014 an emerging format used to package entire websites.</p>\n<h4 id="create-an-artifact">Create an artifact</h4>\n<p>Create a empty folder named \u2018hello-world\u2019.</p>\n<p>In it, place a file named \u2018index.html\u2019\nwith the following contents:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;My First Web Bundle&lt;/</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    Hello, World! This is the first page!</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">a</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">href</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;/next.html&quot;</span><span style="color: #C9D1D9">&gt; See what&#39;s next... &lt;/</span><span style="color: #7EE787">a</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Place another file named \u2018next.html\u2019\nwith the following contents:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;My first bundle&lt;/</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    Hello again, World! This is the second page!</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">a</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">href</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;/&quot;</span><span style="color: #C9D1D9">&gt; See what (or who? \u{1F914}) has come before...&lt;/</span><span style="color: #7EE787">a</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Outside of the hello-world folder, run the following command:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">gen-bundle -dir ./hello-world -baseURL http://localhost/ -o hello-world.wbn -primaryURL http://localhost/</span></span></code></pre>\n<p>This creates a bundle file\nnamed \u201Chello-world.wbn\u201D.\nThis is equivalent to a Docker image.\n(Note that when you interact with docker,\nyou use commands like <code is:raw>build</code>, <code is:raw>push</code>, and <code is:raw>pull</code>.\nYou do not ususually interact directly\nwith image files themselves.)</p>\n<h4 id="view-artifact">View Artifact</h4>\n<p>To view the artifact,\nwe need to enable\nthe experimental\n\u201Cweb bundles\u201D browser feature.</p>\n<p>Using Chrome, visit <code is:raw>chrome://flags/#web-bundles</code>.\nEnable the feature and restart your browser.</p>\n<p>Using Chrome, open the <code is:raw>hello-world.wbn</code> file\nthat you previoiusly created.\nThe url will look something like\n<code is:raw>file:///.../hello-world.wbn?http://localhost/</code>.</p>\n<p>Notice that you can freely navigate\nbetween pages of the site \u2014\neven though it\u2019s just single file!</p>\n<p>You can probably imagine\na few uses for this;\nand here are a few:</p>\n<ol>\n<li>\n<p>Entire websites can be easily snapped-shotted\nand archived into a single file.</p>\n</li>\n<li>\n<p>In the past, creating a test deployment for a site\nused to require spinning up a new server.\nNow you can do it by sharing a single file.</p>\n</li>\n</ol>\n<h3 id="registry">Registry</h3>\n<p>In place of a registry,\nhow do we manage our bundles?\nThe beautiful thing is that\nwe can actually use an OCI registry!</p>\n<p>OCI has a <a href="https://github.com/opencontainers/artifacts">goal</a>\nto enable the distribution\nof more cloud native artifacts.</p>\n<p>There are no existing tools\nto push bundles (specificaly)\nto OCI registries.\nFortunately, we can <del>abuse</del> use WASM to OCI\n\u2014 a tool for doing something\nsimilar with web assembly \u2014\nfor our purposes.</p>\n<p>We\u2019ll use GitHub as a OCI registry\nas it supports unknown images.\nNotably, Docker Hub does not support this.</p>\n<h4 id="login-to-github-with-docker">Login to Github with Docker</h4>\n<p>We will use Docker )only_ to authenticate</p>\n<p>First obtain a\n<a href="https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token">github access token</a>\nwith, permissions to read and write to the registry.</p>\n<p>User <code is:raw>docker login</code> to login to the github container registry at <code is:raw>ghcr.io</code>,</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #79C0FF">echo</span><span style="color: #C9D1D9"> $GITHUB_ACCESS_TOKEN </span><span style="color: #FF7B72">|</span><span style="color: #C9D1D9"> docker login ghcr.io -u $GITHUB_USERNAME --password-stdin</span></span></code></pre>\n<h4 id="pushing-and-pulling">Pushing and Pulling</h4>\n<p>Push the bundle to the registry with:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">wasm-to-oci push ./hello-world.wbn ghcr.io/$GITHUB_USERNAME/hello-world:0.0.0</span></span></code></pre>\n<p>If the registry at\n<code is:raw>https://github.com/users/$GITHUB_USERNAME/packages/container/package/hello-world</code>\ndoest not exist, it will be created automatically.</p>\n<p>You can view and manage artifacts in your repository at <code is:raw>https://github.com/$GITHUB_USERNAME?tab=packages</code>.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">wasm-to-oci pull ghcr.io/$GITHUB_USERNAME/hello-world:0.0.0 --out hello-world.test.wbn</span></span></code></pre>\n<h3 id="whats-next">What\u2019s next?</h3>\n<p>There are still a few main things missing from this work flow:</p>\n<ol>\n<li>\n<p>The <code is:raw>docker images</code> command provides a way to\nmanage docker images locally.</p>\n<p>I don\u2019t currently have an equivalent\nfor managing bundles\nor generic OCI images.</p>\n</li>\n<li>\n<p>The <code is:raw>docker run</code> command provides way to\nto create a \u201Crunning\u201D container\nby combining an image with a linux kernel.</p>\n<p>The equivalent would be\nhosting a bundle as a static asset\nsuch that a user can interact with it.</p>\n</li>\n<li>\n<p>The <code is:raw>docker run</code> command provides way to\nto create a \u201Crunning\u201D container\nby combining an image with a linux kernel.</p>\n<p>The equivalent would be\nhosting a bundle as a static asset\nsuch that a user can interact with it.</p>\n</li>\n<li>\n<p>The <code is:raw>docker build</code> incrementally builds\nimages from other, protypal images.</p>\n<p>The equivalent would be\na templating system that can pull\nexisting static in websites,\nand modify them to make new ones.</p>\n</li>\n</ol>' } };
  return render$1`${renderComponent($$result, "Layout", $$BlogPage, { "content": $$content }, { "default": () => render$1`<p><em>Author’s Note: This is based on <strong>experimental</strong> technologies that aren’t quite ready for production. Nonetheless, I believe the ideas presented in this article will be useful in the near future.</em></p><p>Did you know that you can manage static websites
like you manage images with <a href="https://docker.com">Docker</a>? You can!</p><p>But I’m sure you have a few more questions, like:</p><ul>
<li>What do I mean by “like Docker”?</li>
<li>Why would you want to do such a thing?</li>
<li>How can you do it yourself?</li>
</ul><p>To find answers,
we will first take a <em>simplified</em> look
at how management works with Docker.
We will then learn how to create
a similar process for static websites.</p><h2 id="workflow">Workflow</h2><p>At its most basic, Docker works like this:</p><ol>
<li>Create an image <a href="https://github.com/opencontainers/image-spec">(an OCI Image)</a>
— a single artifact that represents a file tree.
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">docker build -t registry/image:0.0.0 -f - </span><span style="color: #79C0FF">.</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&lt;&lt;EOF</span></span>
<span class="line"><span style="color: #A5D6FF">FROM nginx:latest</span></span>
<span class="line"><span style="color: #FF7B72">EOF</span></span></code></pre>
</li>
<li>Publish the image to a registry <a href="https://github.com/opencontainers/distribution-spec">(an OCI Registry)</a>.
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">docker push registry/image:0.0.0</span></span></code></pre>
</li>
<li>When necessary, retrieve said image from the registry to use it.
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">docker run -it --rm -p 8080:80 registry/image:0.0.0</span></span>
<span class="line"><span style="color: #8B949E"># Note:\`docker run\` pulls the image from the registry if not locally available</span></span></code></pre>
</li>
</ol><p>When we make static websites, the process is similarly simple:</p><ol>
<li>
<p>Create a file tree.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">npm run build</span></span>
<span class="line"><span style="color: #C9D1D9">...</span></span>
<span class="line"><span style="color: #8B949E"># There are countless technologies -- atom, webpack, rollup, etc. --</span></span>
<span class="line"><span style="color: #8B949E"># that can be used to create a static website.</span></span></code></pre>
</li>
<li>
<p>When necessary, push file tree to a server.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">npm run publish</span></span>
<span class="line"><span style="color: #C9D1D9">...</span></span>
<span class="line"><span style="color: #8B949E"># There are similarly a number of options for publishing.</span></span>
<span class="line"><span style="color: #8B949E"># ftp and git (when configured with hooks) are viable options.</span></span></code></pre>
</li>
</ol><p>While both processes are simple,
the idea of an <strong>image</strong> from the Docker
workflow is key.
An entire website as a single artifact
to be versioned, shared, and deployed
in like an image is enticing.</p><h2 id="tutorial">Tutorial</h2><p>Now that we’ve covered the “what” and the “why”, let’s look at the “how”.</p><h3 id="prerequesites">Prerequesites</h3><p>In order complete do this tutorial, you’ll need the following installed:</p><h4 id="go">go</h4><p>Two CLI tools are based on go,
so we might as well get this out of the way first.</p><p>Install go according to <a href="https://golang.org/doc/install">instructions here</a>.</p><h4 id="gen-bundle">gen-bundle</h4><p>Install gen-bundle according to <a href="https://github.com/WICG/webpackage/tree/main/go/bundle">instructions here</a>.</p><pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E"># Install wasm-to-oci https://github.com/engineerd/wasm-to-oci</span></span>
<span class="line"><span style="color: #C9D1D9">go get -u github.com/WICG/webpackage/go/bundle/cmd/...</span></span></code></pre><h4 id="wasm-to-oci">wasm-to-oci</h4><p>Install wasm-to-oci according to <a href="https://github.com/engineerd/wasm-to-oci">instructions here</a>, or run:</p><pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E"># Install wasm-to-oci https://github.com/engineerd/wasm-to-oci</span></span>
<span class="line"><span style="color: #C9D1D9">go get -u github.com/WICG/webpackage/go/bundle/cmd/...</span></span></code></pre><h4 id="docker">Docker</h4><p>This is silly;
but to authenticate wasm-to-oci,
you need Docker.</p><p>This will hopefully change soon —
I said this was “experimental”!</p><p>Install docker according to <a href="https://golang.org/doc/install">instructions here</a>.</p><h4 id="google-chrome">Google Chrome</h4><p>Install Google Chrome according to <a href="https://www.google.com/chrome/">instructions here</a>.</p><h4 id="a-github-account">a Github Account</h4><p>You’ll need a Github account to publish the artifact.</p><p><a href="https://github.com/">Sign up</a> and
<a href="https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-container-registry">set up your container registry</a>
if you haven’t already.</p><h3 id="plan">Plan</h3><p>We want a process
that mirrors the one
outlined above for Docker:</p><ol>
<li>Convert a file tree into an “image-like” artifact. (using <code>gen-bungle</code>)</li>
<li>Publish said artifact to a registry. (Github via <code>wasm-to-oci</code>)</li>
<li>When necessary, retrieve said image from the registry and view it. (with <code>wasm-to-oci</code> and Google Chrome)</li>
</ol><h3 id="artifact">Artifact</h3><p>In place of an image,
we use a <a href="https://web.dev/web-bundles/">web bundle</a>
— an emerging format used to package entire websites.</p><h4 id="create-an-artifact">Create an artifact</h4><p>Create a empty folder named ‘hello-world’.</p><p>In it, place a file named ‘index.html’
with the following contents:</p><pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;My First Web Bundle&lt;/</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    Hello, World! This is the first page!</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">a</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">href</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;/next.html&quot;</span><span style="color: #C9D1D9">&gt; See what&#39;s next... &lt;/</span><span style="color: #7EE787">a</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre><p>Place another file named ‘next.html’
with the following contents:</p><pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;My first bundle&lt;/</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    Hello again, World! This is the second page!</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">a</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">href</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;/&quot;</span><span style="color: #C9D1D9">&gt; See what (or who? 🤔) has come before...&lt;/</span><span style="color: #7EE787">a</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre><p>Outside of the hello-world folder, run the following command:</p><pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">gen-bundle -dir ./hello-world -baseURL http://localhost/ -o hello-world.wbn -primaryURL http://localhost/</span></span></code></pre><p>This creates a bundle file
named “hello-world.wbn”.
This is equivalent to a Docker image.
(Note that when you interact with docker,
you use commands like <code>build</code>, <code>push</code>, and <code>pull</code>.
You do not ususually interact directly
with image files themselves.)</p><h4 id="view-artifact">View Artifact</h4><p>To view the artifact,
we need to enable
the experimental
“web bundles” browser feature.</p><p>Using Chrome, visit <code>chrome://flags/#web-bundles</code>.
Enable the feature and restart your browser.</p><p>Using Chrome, open the <code>hello-world.wbn</code> file
that you previoiusly created.
The url will look something like
<code>file:///.../hello-world.wbn?http://localhost/</code>.</p><p>Notice that you can freely navigate
between pages of the site —
even though it’s just single file!</p><p>You can probably imagine
a few uses for this;
and here are a few:</p><ol>
<li>
<p>Entire websites can be easily snapped-shotted
and archived into a single file.</p>
</li>
<li>
<p>In the past, creating a test deployment for a site
used to require spinning up a new server.
Now you can do it by sharing a single file.</p>
</li>
</ol><h3 id="registry">Registry</h3><p>In place of a registry,
how do we manage our bundles?
The beautiful thing is that
we can actually use an OCI registry!</p><p>OCI has a <a href="https://github.com/opencontainers/artifacts">goal</a>
to enable the distribution
of more cloud native artifacts.</p><p>There are no existing tools
to push bundles (specificaly)
to OCI registries.
Fortunately, we can <del>abuse</del> use WASM to OCI
— a tool for doing something
similar with web assembly —
for our purposes.</p><p>We’ll use GitHub as a OCI registry
as it supports unknown images.
Notably, Docker Hub does not support this.</p><h4 id="login-to-github-with-docker">Login to Github with Docker</h4><p>We will use Docker )only_ to authenticate</p><p>First obtain a
<a href="https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token">github access token</a>
with, permissions to read and write to the registry.</p><p>User <code>docker login</code> to login to the github container registry at <code>ghcr.io</code>,</p><pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #79C0FF">echo</span><span style="color: #C9D1D9"> $GITHUB_ACCESS_TOKEN </span><span style="color: #FF7B72">|</span><span style="color: #C9D1D9"> docker login ghcr.io -u $GITHUB_USERNAME --password-stdin</span></span></code></pre><h4 id="pushing-and-pulling">Pushing and Pulling</h4><p>Push the bundle to the registry with:</p><pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">wasm-to-oci push ./hello-world.wbn ghcr.io/$GITHUB_USERNAME/hello-world:0.0.0</span></span></code></pre><p>If the registry at
<code>https://github.com/users/$GITHUB_USERNAME/packages/container/package/hello-world</code>
doest not exist, it will be created automatically.</p><p>You can view and manage artifacts in your repository at <code>https://github.com/$GITHUB_USERNAME?tab=packages</code>.</p><pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">wasm-to-oci pull ghcr.io/$GITHUB_USERNAME/hello-world:0.0.0 --out hello-world.test.wbn</span></span></code></pre><h3 id="whats-next">What’s next?</h3><p>There are still a few main things missing from this work flow:</p><ol>
<li>
<p>The <code>docker images</code> command provides a way to
manage docker images locally.</p>
<p>I don’t currently have an equivalent
for managing bundles
or generic OCI images.</p>
</li>
<li>
<p>The <code>docker run</code> command provides way to
to create a “running” container
by combining an image with a linux kernel.</p>
<p>The equivalent would be
hosting a bundle as a static asset
such that a user can interact with it.</p>
</li>
<li>
<p>The <code>docker run</code> command provides way to
to create a “running” container
by combining an image with a linux kernel.</p>
<p>The equivalent would be
hosting a bundle as a static asset
such that a user can interact with it.</p>
</li>
<li>
<p>The <code>docker build</code> incrementally builds
images from other, protypal images.</p>
<p>The equivalent would be
a templating system that can pull
existing static in websites,
and modify them to make new ones.</p>
</li>
</ol>` })}`;
});

var _page1 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  metadata: metadata$7,
  frontmatter: frontmatter$7,
  $$metadata: $$metadata$d,
  'default': $$ManageWebsitesLikeDocker
}, Symbol.toStringTag, { value: 'Module' }));

const metadata$6 = { "headers": [{ "depth": 2, "slug": "semantics-for-accessibility", "text": "Semantics for Accessibility" }, { "depth": 2, "slug": "the-problem", "text": "The Problem" }, { "depth": 2, "slug": "the-solution", "text": "The Solution" }], "source": '\nLong ago,\nwhile trying to shoehorn\nnew accessibility standards\ninto an existing website,\nI ran into an interesting problem.\n\nKevin Powell\'s video on a [common HTML mistake](https://www.youtube.com/watch?v=NexL5_Vdoq8&ab_channel=KevinPowell) reminded me of it.\n\n## Semantics for Accessibility\n\nAccording to [current standards](https://html.spec.whatwg.org/multipage/sections.html#the-h1,-h2,-h3,-h4,-h5,-and-h6-elements)\nHTML heading elements must appear\nin a hierarchy within a web page.\n\n```html\n<body>\n  <h1>The first Thanksgiving</h1>\n  <section>\n    <h2>Leaving England</h2>\n    <p>\n      Due to certain "differences", the pilgrims decided to leave england...\n    </p>\n    <section>\n      <h2>Getting on the boat</h2>\n      <p>The Mayflower was a mighty ship...</p>\n    </section>\n  </section>\n  <section>\n    <h2>Crossing the sea</h2>\n    <p>...</p>\n  </section>\n</body>\n```\n\nThis allows screen readers\nto recognize content and\ndescribe it to the user of a website.\n\n## The Problem\n\nModern component-based design would have us\ncreate components that are unaware of their containers.\n\nSemantically, a top level heading within a component shouldn\'t depend upon the headings of its ancestors.\n\nYou would be tempted do this:\n\n```html\n<body>\n  <h1>The first Thanksgiving</h1>\n  <section>\n    <h1>Leaving England</h1>\n    <p>\n      Due to certain "differences", the pilgrims decided to leave england...\n    </p>\n    <section>\n      <h1>Getting on the boat</h1>\n      <p>The Mayflower was a mighty ship...</p>\n    </section>\n  </section>\n  <section>\n    <h1>Crossing the sea</h1>\n    <p>...</p>\n  </section>\n</body>\n```\n\nisolating the semantics of the sections heading.\n\nIn fact, there was a proposal\nto allow this --\nthe "Document Outline Algorithm".\nSadly, it was [never implemented](https://adrianroselli.com/2016/08/there-is-no-document-outline-algorithm.html).\n\nBut, in the case of HTML headings; if a section has a heading of "h2",\nit must be the child of a section with an "h1".\nA section with an "h3"\nmust have a parent with and "h2" and so on.\n\nThe problem arises in that _using sensical **semantics** to create components is at odds with how screenreaders interpret **accessibility** cues in HTML_... or...\n\n**Semantics Versus Accessibility**.\n\n(That\'s the name of the ~~movie~~ post!)\n\n## The Solution\n\nWe can mitigate this by passing\na bit of context to components to\nindicate hierarchical positioning.\n\nWe will do this using [Astro](https://astro.build),\nthough the concept should be translatable\nto other environments.\n\n```astro\n---\n// file:///./boring-section.astro\nconst parentLevel = Astro.props.paerentLevel || 0;\nconst currentLevel = Astro.props.currentLevel = parentLevel + 1;\n---\n<style>\nsection {\n  color: black;\n  font-style: normal;\n}\n</style>\n<section>\n  <h{currentLevel}>Boring Section</h{currentLevel}>\n  <slot />\n</section>\n```\n\n```astro\n---\n// file:///./fancy-section.astro\nconst parentLevel = Astro.props.paerentLevel || 0;\nconst currentLevel = Astro.props.currentLevel = parentLevel + 1;\n---\n<style>\n  section {\n    color: pink;\n    font-style: italic;\n  }\n</style>\n<section>\n  <h{currentLevel}>Fancy Section</h{currentLevel}>\n  <slot />\n</section>\n```\n\n```astro\n---\nimport BoringSection from "./boring-section.astro";\nimport FancySection from "./fancy-section.astro";\n---\n---\n<body>\n  <BoringSection>\n    <FancySection parentLevel={1}>\n      Hello, Earl!\n    </FancySection>\n  </BoringSection>\n</body>\n```\n\nThis will produce the following HTML:\n\n```html\n<body>\n  <section>\n    <h1>Fancy Section</h1>\n    <section>\n      <h2>Boring Section</h2>\n      <p>Hello, Earl!</p>\n    </section>\n  </section>\n</body>\n```\n\nYou can use a utility function\nto make the code a bit cleaner a bit cleaner.\n\n```javascript\n// file:///./get-level.mjs\nexport default (Astro) => (Astro.props.parentLevel || 0) + 1;\n```\n\n```astro\n---\n// file:///./boring-section.astro\nimport getLevel from "./get-level.mjs";\nconst currentLevel = getLevel(Astro);\n---\n<style>\nsection {\n  color: black;\n  font-style: normal;\n}\n</style>\n<section>\n  <h{currentLevel}>Boring Section</h{currentLevel}>\n  <slot />\n</section>\n```\n\nStill, this is not ideal\nas the developer is required\nto manually pass the parentLevel property\nthrough to each child.\n\nUsing nested, indexed for loops may help,\nbut I can already imagine being convoluted.\n\nThe [React Context API](https://reactjs.org/docs/context.html) and the\n[Vue Provide/Inject API](https://v3.vuejs.org/guide/component-provide-inject.htm)\nmay also provide solutions.\nHopefully we can explore these in the future.\n', "html": '<p>Long ago,\nwhile trying to shoehorn\nnew accessibility standards\ninto an existing website,\nI ran into an interesting problem.</p>\n<p>Kevin Powell\u2019s video on a <a href="https://www.youtube.com/watch?v=NexL5_Vdoq8&#x26;ab_channel=KevinPowell">common HTML mistake</a> reminded me of it.</p>\n<h2 id="semantics-for-accessibility">Semantics for Accessibility</h2>\n<p>According to <a href="https://html.spec.whatwg.org/multipage/sections.html#the-h1,-h2,-h3,-h4,-h5,-and-h6-elements">current standards</a>\nHTML heading elements must appear\nin a hierarchy within a web page.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;The first Thanksgiving&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;Leaving England&lt;/</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      Due to certain &quot;differences&quot;, the pilgrims decided to leave england...</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;Getting on the boat&lt;/</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;The Mayflower was a mighty ship...&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;Crossing the sea&lt;/</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;...&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>This allows screen readers\nto recognize content and\ndescribe it to the user of a website.</p>\n<h2 id="the-problem">The Problem</h2>\n<p>Modern component-based design would have us\ncreate components that are unaware of their containers.</p>\n<p>Semantically, a top level heading within a component shouldn\u2019t depend upon the headings of its ancestors.</p>\n<p>You would be tempted do this:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;The first Thanksgiving&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;Leaving England&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      Due to certain &quot;differences&quot;, the pilgrims decided to leave england...</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;Getting on the boat&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;The Mayflower was a mighty ship...&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;Crossing the sea&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;...&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>isolating the semantics of the sections heading.</p>\n<p>In fact, there was a proposal\nto allow this \u2014\nthe \u201CDocument Outline Algorithm\u201D.\nSadly, it was <a href="https://adrianroselli.com/2016/08/there-is-no-document-outline-algorithm.html">never implemented</a>.</p>\n<p>But, in the case of HTML headings; if a section has a heading of \u201Ch2\u201D,\nit must be the child of a section with an \u201Ch1\u201D.\nA section with an \u201Ch3\u201D\nmust have a parent with and \u201Ch2\u201D and so on.</p>\n<p>The problem arises in that <em>using sensical <strong>semantics</strong> to create components is at odds with how screenreaders interpret <strong>accessibility</strong> cues in HTML</em>\u2026 or\u2026</p>\n<p><strong>Semantics Versus Accessibility</strong>.</p>\n<p>(That\u2019s the name of the <del>movie</del> post!)</p>\n<h2 id="the-solution">The Solution</h2>\n<p>We can mitigate this by passing\na bit of context to components to\nindicate hierarchical positioning.</p>\n<p>We will do this using <a href="https://astro.build">Astro</a>,\nthough the concept should be translatable\nto other environments.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">---</span></span>\n<span class="line"><span style="color: #8B949E">// file:///./boring-section.astro</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">parentLevel</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Astro.props.paerentLevel </span><span style="color: #FF7B72">||</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">currentLevel</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Astro.props.currentLevel </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> parentLevel </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #8B949E">---</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">style</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #7EE787">section</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">color</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">black</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">font-style</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">normal</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">style</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">h{currentLevel}</span><span style="color: #C9D1D9">&gt;Boring Section&lt;/</span><span style="color: #7EE787">h{currentLevel}</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">slot</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">---</span></span>\n<span class="line"><span style="color: #8B949E">// file:///./fancy-section.astro</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">parentLevel</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Astro.props.paerentLevel </span><span style="color: #FF7B72">||</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">currentLevel</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Astro.props.currentLevel </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> parentLevel </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #8B949E">---</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">style</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #7EE787">section</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">color</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">pink</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">font-style</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">italic</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">style</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">h{currentLevel}</span><span style="color: #C9D1D9">&gt;Fancy Section&lt;/</span><span style="color: #7EE787">h{currentLevel}</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">slot</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">---</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> BoringSection </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;./boring-section.astro&quot;</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> FancySection </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;./fancy-section.astro&quot;</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #8B949E">---</span></span>\n<span class="line"><span style="color: #C9D1D9">---</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">BoringSection</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">FancySection</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">parentLevel</span><span style="color: #C9D1D9">={</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">}&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      Hello, Earl!</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">FancySection</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">BoringSection</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>This will produce the following HTML:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;Fancy Section&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;Boring Section&lt;/</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;Hello, Earl!&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>You can use a utility function\nto make the code a bit cleaner a bit cleaner.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// file:///./get-level.mjs</span></span>\n<span class="line"><span style="color: #FF7B72">export</span><span style="color: #FFA657"> </span><span style="color: #FF7B72">default</span><span style="color: #FFA657"> (Astro) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #FFA657"> (</span><span style="color: #C9D1D9">Astro</span><span style="color: #FFA657">.</span><span style="color: #C9D1D9">props</span><span style="color: #FFA657">.</span><span style="color: #C9D1D9">parentLevel</span><span style="color: #FFA657"> </span><span style="color: #FF7B72">||</span><span style="color: #FFA657"> </span><span style="color: #79C0FF">0</span><span style="color: #FFA657">) </span><span style="color: #FF7B72">+</span><span style="color: #FFA657"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">;</span></span></code></pre>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">---</span></span>\n<span class="line"><span style="color: #8B949E">// file:///./boring-section.astro</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> getLevel </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;./get-level.mjs&quot;</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">currentLevel</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">getLevel</span><span style="color: #C9D1D9">(Astro);</span></span>\n<span class="line"><span style="color: #8B949E">---</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">style</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #7EE787">section</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">color</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">black</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">font-style</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">normal</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">style</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">h{currentLevel}</span><span style="color: #C9D1D9">&gt;Boring Section&lt;/</span><span style="color: #7EE787">h{currentLevel}</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">slot</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Still, this is not ideal\nas the developer is required\nto manually pass the parentLevel property\nthrough to each child.</p>\n<p>Using nested, indexed for loops may help,\nbut I can already imagine being convoluted.</p>\n<p>The <a href="https://reactjs.org/docs/context.html">React Context API</a> and the\n<a href="https://v3.vuejs.org/guide/component-provide-inject.htm">Vue Provide/Inject API</a>\nmay also provide solutions.\nHopefully we can explore these in the future.</p>' };
const frontmatter$6 = { "title": "Semantics Versus Accessibility", "description": "We explore an issue plaguing modern development and propose a solution", "date": "4 November 2021", "lastUpdate": "4 November 2021", "author": "John Henry", "heroImage": "/vendor/img/www.pexels.com/pixabay/view-of-street-from-a-glass-window.jpg", "alt": "Astro", "tags": ["experimenting"], "astro": { "headers": [{ "depth": 2, "slug": "semantics-for-accessibility", "text": "Semantics for Accessibility" }, { "depth": 2, "slug": "the-problem", "text": "The Problem" }, { "depth": 2, "slug": "the-solution", "text": "The Solution" }], "source": '\nLong ago,\nwhile trying to shoehorn\nnew accessibility standards\ninto an existing website,\nI ran into an interesting problem.\n\nKevin Powell\'s video on a [common HTML mistake](https://www.youtube.com/watch?v=NexL5_Vdoq8&ab_channel=KevinPowell) reminded me of it.\n\n## Semantics for Accessibility\n\nAccording to [current standards](https://html.spec.whatwg.org/multipage/sections.html#the-h1,-h2,-h3,-h4,-h5,-and-h6-elements)\nHTML heading elements must appear\nin a hierarchy within a web page.\n\n```html\n<body>\n  <h1>The first Thanksgiving</h1>\n  <section>\n    <h2>Leaving England</h2>\n    <p>\n      Due to certain "differences", the pilgrims decided to leave england...\n    </p>\n    <section>\n      <h2>Getting on the boat</h2>\n      <p>The Mayflower was a mighty ship...</p>\n    </section>\n  </section>\n  <section>\n    <h2>Crossing the sea</h2>\n    <p>...</p>\n  </section>\n</body>\n```\n\nThis allows screen readers\nto recognize content and\ndescribe it to the user of a website.\n\n## The Problem\n\nModern component-based design would have us\ncreate components that are unaware of their containers.\n\nSemantically, a top level heading within a component shouldn\'t depend upon the headings of its ancestors.\n\nYou would be tempted do this:\n\n```html\n<body>\n  <h1>The first Thanksgiving</h1>\n  <section>\n    <h1>Leaving England</h1>\n    <p>\n      Due to certain "differences", the pilgrims decided to leave england...\n    </p>\n    <section>\n      <h1>Getting on the boat</h1>\n      <p>The Mayflower was a mighty ship...</p>\n    </section>\n  </section>\n  <section>\n    <h1>Crossing the sea</h1>\n    <p>...</p>\n  </section>\n</body>\n```\n\nisolating the semantics of the sections heading.\n\nIn fact, there was a proposal\nto allow this --\nthe "Document Outline Algorithm".\nSadly, it was [never implemented](https://adrianroselli.com/2016/08/there-is-no-document-outline-algorithm.html).\n\nBut, in the case of HTML headings; if a section has a heading of "h2",\nit must be the child of a section with an "h1".\nA section with an "h3"\nmust have a parent with and "h2" and so on.\n\nThe problem arises in that _using sensical **semantics** to create components is at odds with how screenreaders interpret **accessibility** cues in HTML_... or...\n\n**Semantics Versus Accessibility**.\n\n(That\'s the name of the ~~movie~~ post!)\n\n## The Solution\n\nWe can mitigate this by passing\na bit of context to components to\nindicate hierarchical positioning.\n\nWe will do this using [Astro](https://astro.build),\nthough the concept should be translatable\nto other environments.\n\n```astro\n---\n// file:///./boring-section.astro\nconst parentLevel = Astro.props.paerentLevel || 0;\nconst currentLevel = Astro.props.currentLevel = parentLevel + 1;\n---\n<style>\nsection {\n  color: black;\n  font-style: normal;\n}\n</style>\n<section>\n  <h{currentLevel}>Boring Section</h{currentLevel}>\n  <slot />\n</section>\n```\n\n```astro\n---\n// file:///./fancy-section.astro\nconst parentLevel = Astro.props.paerentLevel || 0;\nconst currentLevel = Astro.props.currentLevel = parentLevel + 1;\n---\n<style>\n  section {\n    color: pink;\n    font-style: italic;\n  }\n</style>\n<section>\n  <h{currentLevel}>Fancy Section</h{currentLevel}>\n  <slot />\n</section>\n```\n\n```astro\n---\nimport BoringSection from "./boring-section.astro";\nimport FancySection from "./fancy-section.astro";\n---\n---\n<body>\n  <BoringSection>\n    <FancySection parentLevel={1}>\n      Hello, Earl!\n    </FancySection>\n  </BoringSection>\n</body>\n```\n\nThis will produce the following HTML:\n\n```html\n<body>\n  <section>\n    <h1>Fancy Section</h1>\n    <section>\n      <h2>Boring Section</h2>\n      <p>Hello, Earl!</p>\n    </section>\n  </section>\n</body>\n```\n\nYou can use a utility function\nto make the code a bit cleaner a bit cleaner.\n\n```javascript\n// file:///./get-level.mjs\nexport default (Astro) => (Astro.props.parentLevel || 0) + 1;\n```\n\n```astro\n---\n// file:///./boring-section.astro\nimport getLevel from "./get-level.mjs";\nconst currentLevel = getLevel(Astro);\n---\n<style>\nsection {\n  color: black;\n  font-style: normal;\n}\n</style>\n<section>\n  <h{currentLevel}>Boring Section</h{currentLevel}>\n  <slot />\n</section>\n```\n\nStill, this is not ideal\nas the developer is required\nto manually pass the parentLevel property\nthrough to each child.\n\nUsing nested, indexed for loops may help,\nbut I can already imagine being convoluted.\n\nThe [React Context API](https://reactjs.org/docs/context.html) and the\n[Vue Provide/Inject API](https://v3.vuejs.org/guide/component-provide-inject.htm)\nmay also provide solutions.\nHopefully we can explore these in the future.\n', "html": '<p>Long ago,\nwhile trying to shoehorn\nnew accessibility standards\ninto an existing website,\nI ran into an interesting problem.</p>\n<p>Kevin Powell\u2019s video on a <a href="https://www.youtube.com/watch?v=NexL5_Vdoq8&#x26;ab_channel=KevinPowell">common HTML mistake</a> reminded me of it.</p>\n<h2 id="semantics-for-accessibility">Semantics for Accessibility</h2>\n<p>According to <a href="https://html.spec.whatwg.org/multipage/sections.html#the-h1,-h2,-h3,-h4,-h5,-and-h6-elements">current standards</a>\nHTML heading elements must appear\nin a hierarchy within a web page.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;The first Thanksgiving&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;Leaving England&lt;/</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      Due to certain &quot;differences&quot;, the pilgrims decided to leave england...</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;Getting on the boat&lt;/</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;The Mayflower was a mighty ship...&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;Crossing the sea&lt;/</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;...&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>This allows screen readers\nto recognize content and\ndescribe it to the user of a website.</p>\n<h2 id="the-problem">The Problem</h2>\n<p>Modern component-based design would have us\ncreate components that are unaware of their containers.</p>\n<p>Semantically, a top level heading within a component shouldn\u2019t depend upon the headings of its ancestors.</p>\n<p>You would be tempted do this:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;The first Thanksgiving&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;Leaving England&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      Due to certain &quot;differences&quot;, the pilgrims decided to leave england...</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;Getting on the boat&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;The Mayflower was a mighty ship...&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;Crossing the sea&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;...&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>isolating the semantics of the sections heading.</p>\n<p>In fact, there was a proposal\nto allow this \u2014\nthe \u201CDocument Outline Algorithm\u201D.\nSadly, it was <a href="https://adrianroselli.com/2016/08/there-is-no-document-outline-algorithm.html">never implemented</a>.</p>\n<p>But, in the case of HTML headings; if a section has a heading of \u201Ch2\u201D,\nit must be the child of a section with an \u201Ch1\u201D.\nA section with an \u201Ch3\u201D\nmust have a parent with and \u201Ch2\u201D and so on.</p>\n<p>The problem arises in that <em>using sensical <strong>semantics</strong> to create components is at odds with how screenreaders interpret <strong>accessibility</strong> cues in HTML</em>\u2026 or\u2026</p>\n<p><strong>Semantics Versus Accessibility</strong>.</p>\n<p>(That\u2019s the name of the <del>movie</del> post!)</p>\n<h2 id="the-solution">The Solution</h2>\n<p>We can mitigate this by passing\na bit of context to components to\nindicate hierarchical positioning.</p>\n<p>We will do this using <a href="https://astro.build">Astro</a>,\nthough the concept should be translatable\nto other environments.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">---</span></span>\n<span class="line"><span style="color: #8B949E">// file:///./boring-section.astro</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">parentLevel</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Astro.props.paerentLevel </span><span style="color: #FF7B72">||</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">currentLevel</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Astro.props.currentLevel </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> parentLevel </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #8B949E">---</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">style</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #7EE787">section</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">color</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">black</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">font-style</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">normal</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">style</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">h{currentLevel}</span><span style="color: #C9D1D9">&gt;Boring Section&lt;/</span><span style="color: #7EE787">h{currentLevel}</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">slot</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">---</span></span>\n<span class="line"><span style="color: #8B949E">// file:///./fancy-section.astro</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">parentLevel</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Astro.props.paerentLevel </span><span style="color: #FF7B72">||</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">currentLevel</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Astro.props.currentLevel </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> parentLevel </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #8B949E">---</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">style</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #7EE787">section</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">color</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">pink</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">font-style</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">italic</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">style</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">h{currentLevel}</span><span style="color: #C9D1D9">&gt;Fancy Section&lt;/</span><span style="color: #7EE787">h{currentLevel}</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">slot</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">---</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> BoringSection </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;./boring-section.astro&quot;</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> FancySection </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;./fancy-section.astro&quot;</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #8B949E">---</span></span>\n<span class="line"><span style="color: #C9D1D9">---</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">BoringSection</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">FancySection</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">parentLevel</span><span style="color: #C9D1D9">={</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">}&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      Hello, Earl!</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">FancySection</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">BoringSection</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>This will produce the following HTML:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;Fancy Section&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;Boring Section&lt;/</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;Hello, Earl!&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>You can use a utility function\nto make the code a bit cleaner a bit cleaner.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// file:///./get-level.mjs</span></span>\n<span class="line"><span style="color: #FF7B72">export</span><span style="color: #FFA657"> </span><span style="color: #FF7B72">default</span><span style="color: #FFA657"> (Astro) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #FFA657"> (</span><span style="color: #C9D1D9">Astro</span><span style="color: #FFA657">.</span><span style="color: #C9D1D9">props</span><span style="color: #FFA657">.</span><span style="color: #C9D1D9">parentLevel</span><span style="color: #FFA657"> </span><span style="color: #FF7B72">||</span><span style="color: #FFA657"> </span><span style="color: #79C0FF">0</span><span style="color: #FFA657">) </span><span style="color: #FF7B72">+</span><span style="color: #FFA657"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">;</span></span></code></pre>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">---</span></span>\n<span class="line"><span style="color: #8B949E">// file:///./boring-section.astro</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> getLevel </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;./get-level.mjs&quot;</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">currentLevel</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">getLevel</span><span style="color: #C9D1D9">(Astro);</span></span>\n<span class="line"><span style="color: #8B949E">---</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">style</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #7EE787">section</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">color</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">black</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">font-style</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">normal</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">style</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">h{currentLevel}</span><span style="color: #C9D1D9">&gt;Boring Section&lt;/</span><span style="color: #7EE787">h{currentLevel}</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">slot</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Still, this is not ideal\nas the developer is required\nto manually pass the parentLevel property\nthrough to each child.</p>\n<p>Using nested, indexed for loops may help,\nbut I can already imagine being convoluted.</p>\n<p>The <a href="https://reactjs.org/docs/context.html">React Context API</a> and the\n<a href="https://v3.vuejs.org/guide/component-provide-inject.htm">Vue Provide/Inject API</a>\nmay also provide solutions.\nHopefully we can explore these in the future.</p>' } };
const $$metadata$c = createMetadata("/src/pages/blog/posts/semantics-vs-accessibility.md", { modules: [{ module: $$module1$1, specifier: "../../../components/BlogPage.astro", assert: {} }], hydratedComponents: [], clientOnlyComponents: [], hydrationDirectives: /* @__PURE__ */ new Set([]), hoisted: [] });
const $$Astro$c = createAstro("/src/pages/blog/posts/semantics-vs-accessibility.md", "https://astro.build", "file:///home/runner/work/johnhenry.github.io/johnhenry.github.io/");
const $$SemanticsVsAccessibility = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$c, $$props, $$slots);
  Astro2.self = $$SemanticsVsAccessibility;
  const $$content = { "title": "Semantics Versus Accessibility", "description": "We explore an issue plaguing modern development and propose a solution", "date": "4 November 2021", "lastUpdate": "4 November 2021", "author": "John Henry", "heroImage": "/vendor/img/www.pexels.com/pixabay/view-of-street-from-a-glass-window.jpg", "alt": "Astro", "tags": ["experimenting"], "astro": { "headers": [{ "depth": 2, "slug": "semantics-for-accessibility", "text": "Semantics for Accessibility" }, { "depth": 2, "slug": "the-problem", "text": "The Problem" }, { "depth": 2, "slug": "the-solution", "text": "The Solution" }], "source": '\nLong ago,\nwhile trying to shoehorn\nnew accessibility standards\ninto an existing website,\nI ran into an interesting problem.\n\nKevin Powell\'s video on a [common HTML mistake](https://www.youtube.com/watch?v=NexL5_Vdoq8&ab_channel=KevinPowell) reminded me of it.\n\n## Semantics for Accessibility\n\nAccording to [current standards](https://html.spec.whatwg.org/multipage/sections.html#the-h1,-h2,-h3,-h4,-h5,-and-h6-elements)\nHTML heading elements must appear\nin a hierarchy within a web page.\n\n```html\n<body>\n  <h1>The first Thanksgiving</h1>\n  <section>\n    <h2>Leaving England</h2>\n    <p>\n      Due to certain "differences", the pilgrims decided to leave england...\n    </p>\n    <section>\n      <h2>Getting on the boat</h2>\n      <p>The Mayflower was a mighty ship...</p>\n    </section>\n  </section>\n  <section>\n    <h2>Crossing the sea</h2>\n    <p>...</p>\n  </section>\n</body>\n```\n\nThis allows screen readers\nto recognize content and\ndescribe it to the user of a website.\n\n## The Problem\n\nModern component-based design would have us\ncreate components that are unaware of their containers.\n\nSemantically, a top level heading within a component shouldn\'t depend upon the headings of its ancestors.\n\nYou would be tempted do this:\n\n```html\n<body>\n  <h1>The first Thanksgiving</h1>\n  <section>\n    <h1>Leaving England</h1>\n    <p>\n      Due to certain "differences", the pilgrims decided to leave england...\n    </p>\n    <section>\n      <h1>Getting on the boat</h1>\n      <p>The Mayflower was a mighty ship...</p>\n    </section>\n  </section>\n  <section>\n    <h1>Crossing the sea</h1>\n    <p>...</p>\n  </section>\n</body>\n```\n\nisolating the semantics of the sections heading.\n\nIn fact, there was a proposal\nto allow this --\nthe "Document Outline Algorithm".\nSadly, it was [never implemented](https://adrianroselli.com/2016/08/there-is-no-document-outline-algorithm.html).\n\nBut, in the case of HTML headings; if a section has a heading of "h2",\nit must be the child of a section with an "h1".\nA section with an "h3"\nmust have a parent with and "h2" and so on.\n\nThe problem arises in that _using sensical **semantics** to create components is at odds with how screenreaders interpret **accessibility** cues in HTML_... or...\n\n**Semantics Versus Accessibility**.\n\n(That\'s the name of the ~~movie~~ post!)\n\n## The Solution\n\nWe can mitigate this by passing\na bit of context to components to\nindicate hierarchical positioning.\n\nWe will do this using [Astro](https://astro.build),\nthough the concept should be translatable\nto other environments.\n\n```astro\n---\n// file:///./boring-section.astro\nconst parentLevel = Astro.props.paerentLevel || 0;\nconst currentLevel = Astro.props.currentLevel = parentLevel + 1;\n---\n<style>\nsection {\n  color: black;\n  font-style: normal;\n}\n</style>\n<section>\n  <h{currentLevel}>Boring Section</h{currentLevel}>\n  <slot />\n</section>\n```\n\n```astro\n---\n// file:///./fancy-section.astro\nconst parentLevel = Astro.props.paerentLevel || 0;\nconst currentLevel = Astro.props.currentLevel = parentLevel + 1;\n---\n<style>\n  section {\n    color: pink;\n    font-style: italic;\n  }\n</style>\n<section>\n  <h{currentLevel}>Fancy Section</h{currentLevel}>\n  <slot />\n</section>\n```\n\n```astro\n---\nimport BoringSection from "./boring-section.astro";\nimport FancySection from "./fancy-section.astro";\n---\n---\n<body>\n  <BoringSection>\n    <FancySection parentLevel={1}>\n      Hello, Earl!\n    </FancySection>\n  </BoringSection>\n</body>\n```\n\nThis will produce the following HTML:\n\n```html\n<body>\n  <section>\n    <h1>Fancy Section</h1>\n    <section>\n      <h2>Boring Section</h2>\n      <p>Hello, Earl!</p>\n    </section>\n  </section>\n</body>\n```\n\nYou can use a utility function\nto make the code a bit cleaner a bit cleaner.\n\n```javascript\n// file:///./get-level.mjs\nexport default (Astro) => (Astro.props.parentLevel || 0) + 1;\n```\n\n```astro\n---\n// file:///./boring-section.astro\nimport getLevel from "./get-level.mjs";\nconst currentLevel = getLevel(Astro);\n---\n<style>\nsection {\n  color: black;\n  font-style: normal;\n}\n</style>\n<section>\n  <h{currentLevel}>Boring Section</h{currentLevel}>\n  <slot />\n</section>\n```\n\nStill, this is not ideal\nas the developer is required\nto manually pass the parentLevel property\nthrough to each child.\n\nUsing nested, indexed for loops may help,\nbut I can already imagine being convoluted.\n\nThe [React Context API](https://reactjs.org/docs/context.html) and the\n[Vue Provide/Inject API](https://v3.vuejs.org/guide/component-provide-inject.htm)\nmay also provide solutions.\nHopefully we can explore these in the future.\n', "html": '<p>Long ago,\nwhile trying to shoehorn\nnew accessibility standards\ninto an existing website,\nI ran into an interesting problem.</p>\n<p>Kevin Powell\u2019s video on a <a href="https://www.youtube.com/watch?v=NexL5_Vdoq8&#x26;ab_channel=KevinPowell">common HTML mistake</a> reminded me of it.</p>\n<h2 id="semantics-for-accessibility">Semantics for Accessibility</h2>\n<p>According to <a href="https://html.spec.whatwg.org/multipage/sections.html#the-h1,-h2,-h3,-h4,-h5,-and-h6-elements">current standards</a>\nHTML heading elements must appear\nin a hierarchy within a web page.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;The first Thanksgiving&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;Leaving England&lt;/</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      Due to certain &quot;differences&quot;, the pilgrims decided to leave england...</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;Getting on the boat&lt;/</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;The Mayflower was a mighty ship...&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;Crossing the sea&lt;/</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;...&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>This allows screen readers\nto recognize content and\ndescribe it to the user of a website.</p>\n<h2 id="the-problem">The Problem</h2>\n<p>Modern component-based design would have us\ncreate components that are unaware of their containers.</p>\n<p>Semantically, a top level heading within a component shouldn\u2019t depend upon the headings of its ancestors.</p>\n<p>You would be tempted do this:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;The first Thanksgiving&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;Leaving England&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      Due to certain &quot;differences&quot;, the pilgrims decided to leave england...</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;Getting on the boat&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;The Mayflower was a mighty ship...&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;Crossing the sea&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;...&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>isolating the semantics of the sections heading.</p>\n<p>In fact, there was a proposal\nto allow this \u2014\nthe \u201CDocument Outline Algorithm\u201D.\nSadly, it was <a href="https://adrianroselli.com/2016/08/there-is-no-document-outline-algorithm.html">never implemented</a>.</p>\n<p>But, in the case of HTML headings; if a section has a heading of \u201Ch2\u201D,\nit must be the child of a section with an \u201Ch1\u201D.\nA section with an \u201Ch3\u201D\nmust have a parent with and \u201Ch2\u201D and so on.</p>\n<p>The problem arises in that <em>using sensical <strong>semantics</strong> to create components is at odds with how screenreaders interpret <strong>accessibility</strong> cues in HTML</em>\u2026 or\u2026</p>\n<p><strong>Semantics Versus Accessibility</strong>.</p>\n<p>(That\u2019s the name of the <del>movie</del> post!)</p>\n<h2 id="the-solution">The Solution</h2>\n<p>We can mitigate this by passing\na bit of context to components to\nindicate hierarchical positioning.</p>\n<p>We will do this using <a href="https://astro.build">Astro</a>,\nthough the concept should be translatable\nto other environments.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">---</span></span>\n<span class="line"><span style="color: #8B949E">// file:///./boring-section.astro</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">parentLevel</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Astro.props.paerentLevel </span><span style="color: #FF7B72">||</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">currentLevel</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Astro.props.currentLevel </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> parentLevel </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #8B949E">---</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">style</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #7EE787">section</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">color</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">black</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">font-style</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">normal</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">style</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">h{currentLevel}</span><span style="color: #C9D1D9">&gt;Boring Section&lt;/</span><span style="color: #7EE787">h{currentLevel}</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">slot</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">---</span></span>\n<span class="line"><span style="color: #8B949E">// file:///./fancy-section.astro</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">parentLevel</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Astro.props.paerentLevel </span><span style="color: #FF7B72">||</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">currentLevel</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Astro.props.currentLevel </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> parentLevel </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #8B949E">---</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">style</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #7EE787">section</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">color</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">pink</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">font-style</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">italic</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">style</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">h{currentLevel}</span><span style="color: #C9D1D9">&gt;Fancy Section&lt;/</span><span style="color: #7EE787">h{currentLevel}</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">slot</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">---</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> BoringSection </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;./boring-section.astro&quot;</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> FancySection </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;./fancy-section.astro&quot;</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #8B949E">---</span></span>\n<span class="line"><span style="color: #C9D1D9">---</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">BoringSection</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">FancySection</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">parentLevel</span><span style="color: #C9D1D9">={</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">}&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      Hello, Earl!</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">FancySection</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">BoringSection</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>This will produce the following HTML:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;Fancy Section&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;Boring Section&lt;/</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;Hello, Earl!&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>You can use a utility function\nto make the code a bit cleaner a bit cleaner.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// file:///./get-level.mjs</span></span>\n<span class="line"><span style="color: #FF7B72">export</span><span style="color: #FFA657"> </span><span style="color: #FF7B72">default</span><span style="color: #FFA657"> (Astro) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #FFA657"> (</span><span style="color: #C9D1D9">Astro</span><span style="color: #FFA657">.</span><span style="color: #C9D1D9">props</span><span style="color: #FFA657">.</span><span style="color: #C9D1D9">parentLevel</span><span style="color: #FFA657"> </span><span style="color: #FF7B72">||</span><span style="color: #FFA657"> </span><span style="color: #79C0FF">0</span><span style="color: #FFA657">) </span><span style="color: #FF7B72">+</span><span style="color: #FFA657"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">;</span></span></code></pre>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">---</span></span>\n<span class="line"><span style="color: #8B949E">// file:///./boring-section.astro</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> getLevel </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;./get-level.mjs&quot;</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">currentLevel</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">getLevel</span><span style="color: #C9D1D9">(Astro);</span></span>\n<span class="line"><span style="color: #8B949E">---</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">style</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #7EE787">section</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">color</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">black</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">font-style</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">normal</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">style</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">h{currentLevel}</span><span style="color: #C9D1D9">&gt;Boring Section&lt;/</span><span style="color: #7EE787">h{currentLevel}</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">slot</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Still, this is not ideal\nas the developer is required\nto manually pass the parentLevel property\nthrough to each child.</p>\n<p>Using nested, indexed for loops may help,\nbut I can already imagine being convoluted.</p>\n<p>The <a href="https://reactjs.org/docs/context.html">React Context API</a> and the\n<a href="https://v3.vuejs.org/guide/component-provide-inject.htm">Vue Provide/Inject API</a>\nmay also provide solutions.\nHopefully we can explore these in the future.</p>' } };
  return render$1`${renderComponent($$result, "Layout", $$BlogPage, { "content": $$content }, { "default": () => render$1`<p>Long ago,
while trying to shoehorn
new accessibility standards
into an existing website,
I ran into an interesting problem.</p><p>Kevin Powell’s video on a <a href="https://www.youtube.com/watch?v=NexL5_Vdoq8&ab_channel=KevinPowell">common HTML mistake</a> reminded me of it.</p><h2 id="semantics-for-accessibility">Semantics for Accessibility</h2><p>According to <a href="https://html.spec.whatwg.org/multipage/sections.html#the-h1,-h2,-h3,-h4,-h5,-and-h6-elements">current standards</a>
HTML heading elements must appear
in a hierarchy within a web page.</p><pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;The first Thanksgiving&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;Leaving England&lt;/</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">      Due to certain &quot;differences&quot;, the pilgrims decided to leave england...</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;Getting on the boat&lt;/</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;The Mayflower was a mighty ship...&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;Crossing the sea&lt;/</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;...&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span></code></pre><p>This allows screen readers
to recognize content and
describe it to the user of a website.</p><h2 id="the-problem">The Problem</h2><p>Modern component-based design would have us
create components that are unaware of their containers.</p><p>Semantically, a top level heading within a component shouldn’t depend upon the headings of its ancestors.</p><p>You would be tempted do this:</p><pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;The first Thanksgiving&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;Leaving England&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">      Due to certain &quot;differences&quot;, the pilgrims decided to leave england...</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;Getting on the boat&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;The Mayflower was a mighty ship...&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;Crossing the sea&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;...&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span></code></pre><p>isolating the semantics of the sections heading.</p><p>In fact, there was a proposal
to allow this —
the “Document Outline Algorithm”.
Sadly, it was <a href="https://adrianroselli.com/2016/08/there-is-no-document-outline-algorithm.html">never implemented</a>.</p><p>But, in the case of HTML headings; if a section has a heading of “h2”,
it must be the child of a section with an “h1”.
A section with an “h3”
must have a parent with and “h2” and so on.</p><p>The problem arises in that <em>using sensical <strong>semantics</strong> to create components is at odds with how screenreaders interpret <strong>accessibility</strong> cues in HTML</em>… or…</p><p><strong>Semantics Versus Accessibility</strong>.</p><p>(That’s the name of the <del>movie</del> post!)</p><h2 id="the-solution">The Solution</h2><p>We can mitigate this by passing
a bit of context to components to
indicate hierarchical positioning.</p><p>We will do this using <a href="https://astro.build">Astro</a>,
though the concept should be translatable
to other environments.</p><pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">---</span></span>
<span class="line"><span style="color: #8B949E">// file:///./boring-section.astro</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">parentLevel</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Astro.props.paerentLevel </span><span style="color: #FF7B72">||</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">currentLevel</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Astro.props.currentLevel </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> parentLevel </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #8B949E">---</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">style</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #7EE787">section</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">color</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">black</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">font-style</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">normal</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">style</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">h{currentLevel}</span><span style="color: #C9D1D9">&gt;Boring Section&lt;/</span><span style="color: #7EE787">h{currentLevel}</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">slot</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span></code></pre><pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">---</span></span>
<span class="line"><span style="color: #8B949E">// file:///./fancy-section.astro</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">parentLevel</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Astro.props.paerentLevel </span><span style="color: #FF7B72">||</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">currentLevel</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Astro.props.currentLevel </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> parentLevel </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #8B949E">---</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">style</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #7EE787">section</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">color</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">pink</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">font-style</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">italic</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">style</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">h{currentLevel}</span><span style="color: #C9D1D9">&gt;Fancy Section&lt;/</span><span style="color: #7EE787">h{currentLevel}</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">slot</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span></code></pre><pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">---</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> BoringSection </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;./boring-section.astro&quot;</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> FancySection </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;./fancy-section.astro&quot;</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #8B949E">---</span></span>
<span class="line"><span style="color: #C9D1D9">---</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">BoringSection</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">FancySection</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">parentLevel</span><span style="color: #C9D1D9">={</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">}&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">      Hello, Earl!</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">FancySection</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">BoringSection</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span></code></pre><p>This will produce the following HTML:</p><pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;Fancy Section&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;Boring Section&lt;/</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;Hello, Earl!&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span></code></pre><p>You can use a utility function
to make the code a bit cleaner a bit cleaner.</p><pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// file:///./get-level.mjs</span></span>
<span class="line"><span style="color: #FF7B72">export</span><span style="color: #FFA657"> </span><span style="color: #FF7B72">default</span><span style="color: #FFA657"> (Astro) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #FFA657"> (</span><span style="color: #C9D1D9">Astro</span><span style="color: #FFA657">.</span><span style="color: #C9D1D9">props</span><span style="color: #FFA657">.</span><span style="color: #C9D1D9">parentLevel</span><span style="color: #FFA657"> </span><span style="color: #FF7B72">||</span><span style="color: #FFA657"> </span><span style="color: #79C0FF">0</span><span style="color: #FFA657">) </span><span style="color: #FF7B72">+</span><span style="color: #FFA657"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">;</span></span></code></pre><pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">---</span></span>
<span class="line"><span style="color: #8B949E">// file:///./boring-section.astro</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> getLevel </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;./get-level.mjs&quot;</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">currentLevel</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">getLevel</span><span style="color: #C9D1D9">(Astro);</span></span>
<span class="line"><span style="color: #8B949E">---</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">style</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #7EE787">section</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">color</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">black</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">font-style</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">normal</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">style</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">h{currentLevel}</span><span style="color: #C9D1D9">&gt;Boring Section&lt;/</span><span style="color: #7EE787">h{currentLevel}</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">slot</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span></code></pre><p>Still, this is not ideal
as the developer is required
to manually pass the parentLevel property
through to each child.</p><p>Using nested, indexed for loops may help,
but I can already imagine being convoluted.</p><p>The <a href="https://reactjs.org/docs/context.html">React Context API</a> and the
<a href="https://v3.vuejs.org/guide/component-provide-inject.htm">Vue Provide/Inject API</a>
may also provide solutions.
Hopefully we can explore these in the future.</p>` })}`;
});

var _page2 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  metadata: metadata$6,
  frontmatter: frontmatter$6,
  $$metadata: $$metadata$c,
  'default': $$SemanticsVsAccessibility
}, Symbol.toStringTag, { value: 'Module' }));

const metadata$5 = { "headers": [{ "depth": 2, "slug": "standardizing-servers", "text": "Standardizing Servers" }, { "depth": 2, "slug": "competing-standards", "text": "Competing Standards" }, { "depth": 3, "slug": "http", "text": "HTTP" }, { "depth": 3, "slug": "express", "text": "Express" }, { "depth": 3, "slug": "koa-2", "text": "Koa 2" }, { "depth": 3, "slug": "rill", "text": "Rill" }, { "depth": 3, "slug": "flyweb", "text": "FlyWeb" }, { "depth": 2, "slug": "rillhttp-to-the-rescue", "text": "@Rill/http to the Rescue" }, { "depth": 2, "slug": "et-tu-buffer", "text": "Et tu, Buffer?" }, { "depth": 2, "slug": "bonus-library", "text": "Bonus Library!!!" }], "source": '\n_Originally Published: https://medium.com/@iamjohnhenry/browsers-servers-and-apis-2f7b10523f39_\n\n(Or \u201CThe path to Isomorphic Javascript\u201D)\n\nNote: Examples in the article were tested and run using [node](https://nodejs.org/en/) and [browserify](http://browserify.org/).\n\nIf you\u2019re a modern JavaScript enthusiast, you\u2019re familiar with isomorphic code \u2014 the idea that you can write code that will run in both browser and node environments. Because JavaScript is a standardized language, you might think that this would be a trivial matter. The problem comes not in the language itself, but in the [API](https://en.wikipedia.org/wiki/Application_programming_interface)s, which are specific to each environment and not standardized to play well with others.\n\nSome actions in one environment do not make sense in the other and so they lack specific APIs. The browser isn\u2019t given access to the file system, so the [fs object](https://nodejs.org/api/fs.html) that comes with node would not make sense here. Conversely, when I was younger, I would make copious use of the [window.alert](https://developer.mozilla.org/en-US/docs/Web/API/Window/alert) for debugging, but a popup window won\u2019t show up when you\u2019re looking at a command line.\n\nThere are some actions, however, that can be done both within node and within the browser. One of the most interesting is creating servers.\n\n## **Standardizing Servers**\n\nTraditionally you wouldn\u2019t set up a server within a browser, but considering what a server does \u2014 accepts requests and responds asynchronously, we can think of many use cases.\n\nFor instance, a server within a service worker would be able to intercept and respond to requests within the browser, without ever having to make a call across a network.\n\n```javascript\n    //example -- service worker\n    const server = \u2026;//define later\n\n    self.addEventListener(\u2018fetch\u2019, function(event) {\n     return event.respondWith(new Promise((resolve, reject)=>{\n       const response = server.respondTo(event.request);\n       response.on(\u201Cfinish\u201D, ()=>{\n         resolve(req);\n       });\n     }));\n    });\n```\n\nWe\u2019ll come back to this idea...\n\n## **Competing Standards**\n\nSo, I want to put a server in the browser \u2014 what are my options? Not long ago, I learned about the new [FlyWeb](https://hacks.mozilla.org/2016/09/flyweb-pure-web-cross-device-interaction/) standard that [Mozilla](https://blog.mozilla.org/) is pushing for creating servers within the browser. I was pretty excited until i realized how different it was from anything that already existed in node.\n\nEvery other server that I\u2019ve seen follows a particular pattern\u2026\n\n### **HTTP**\n\nNode already has a built in simple API for creating servers via [http](https://nodejs.org/api/http.html).\n\n```javascript\n    //example -- http\n    //create server and define action\n    const server = require(\u201Chttp\u201D)\n     .createServer((request, response)=>{\n      ...//process request\n      response.end();//end response\n    });\n\n    //start server\n    server.listen(/*listening address*/);\n```\n\nThis might be considered a standard, but many modern server applications are built to handle complex workflows.\n\n### **Express**\n\nAs the http module is quite simplistic, the [express](https://github.com/expressjs/express) module is the de-facto standard for creating servers within node. It separates creating the server from assigning it actions. It also makes handling complex workflows easier. Express servers have a \u201Cuse\u201D method. It allows the user to chain together multiple functions to act upon a request before a response is sent. These functions are called \u201Cmiddleware\u201D.\n\n```javascript\n    //example -- express\n\n    //create server\n    const server = require(\u201Cexpress\u201D)();\n\n    //register middleware\n    server.use((request, response, next)=>{\n      ...//process request\n      next();//go to next middleware\n    });\n\n    //register middleware\n    server.use((request, response, next)=>{\n      ...//process request\n      if(request.endResponse){\n        response.end();//end response\n      }else{\n        next();//go to next middleware\n      }\n    });\n\n    //register middleware\n    server.use((request, response)=>{\n      response.end();//end response\n    });\n\n    //start server\n    server.listen(/*listening address*/);\n```\n\nIn addition, express adds additional features such as templating or routing which you may or may not need.\n\n### **Koa 2**\n\n[Koa](https://github.com/koajs/koa) was created by the same people who create express and is considered to be its spiritual successor. It\u2019s also my server of choice, so you should [take a look at how it works](http://koajs.com/) if you haven\u2019t already.\n\nKoa makes use of [asynchronous functions](https://github.com/tc39/ecmascript-asyncawait) and adding middleware works similarly.\n\n```javascript\n    //example -- koa\n\n    const server = require(\u201Ckoa\u201D)();\n\n    server.use(async (context, next)=>{\n      ...//process request\n      next();//go to next middleware\n    });\n\n    server.use((context, next)=>{\n      context.res.end();//end response\n    });\n\n    //start server\n    server.listen(/*listening address*/);\n```\n\nKoa also eschews built in routing and templating in favor of including them externally as middleware.\n\nPlease be aware that Koa 2 is still in alpha, but since its API is so much cleaner than Koa 1\u2019s, [here\u2019s a tutorial that will help you jump right in](https://www.smashingmagazine.com/2016/08/getting-started-koa-2-async-functions/),\n\n### **Rill**\n\n[Rill](https://github.com/rill-js/rill) is a [new server](https://medium.com/@pierceydylan/isomorphic-javascript-it-just-has-to-work-b9da5b0c8035#.l79bgqqwx) that has basically the same API as KOA 2, but works in the browser as well as in node right out of the box.\n\n```javascript\n    //example -- rill\n\n    const server = require(\u201Crill\u201D)();\n\n    server.use((context, next)=>{\n      context.res.end();//end response\n    });\n\n    server.listen(/*listening address*/);\n```\n\nRill may be overkill for my purposes, as it includes routing features that manipulate the web page, in addition to simply processing requests into responses.\n\n### **FlyWeb**\n\nThere\u2019s a basic pattern of that all of the other servers follow.\n\n1 create server\n\n2 add actions\n\n3 start server\n\nWhile rill or koa would have been a great starting point for a server in the browser, mozilla has taken a different route with their new FlyWeb servers.\n\n```javascript\n    //example -- flyweb\n\n    //create and start server\n    const server = await window.navigator.publishServer(/*listening address*/);\n\n    //add actions\n    server.onfetch = (request)=>{\n      ...//process request\n      request.end();//end response\n    };\n```\n\nThis breaks the pattern of everything we\u2019ve seen so far! Here the server is created and started first. Only afterwards are actions actions added.\n\nDo we really need an entirely new way of doing basically the same thing?\n\n![I know. It\u2019s in every article. Perhaps that says something to the importance of the situation. [https://xkcd.com/license.html](https://xkcd.com/license.html)](https://cdn-images-1.medium.com/max/2000/1*9nMBMt-OugnruBr_M-WuEQ.png)_I know. It\u2019s in every article. Perhaps that says something to the importance of the situation. [https://xkcd.com/license.html](https://xkcd.com/license.html)_\n\n## **@Rill/http to the Rescue**\n\n[The creators of rill are](https://medium.com/@pierceydylan/) pretty smart. When they created rill to work in the browser and in node, they realized the same thing I did at the beginning of this article \u2014 that dissimilar APIs are what make isomorphic code so difficult. So, to ensure that it works in both places, they created their own implementation of node\u2019s low level [http module](https://nodejs.org/api/http.html), [@rill/http](https://github.com/rill-js/http), that works in the browser. Because it follows the same API, it can be, with a few tweaks, swapped into other modules that depend upon http, and allow them to work in the browser.\n\nAnd that\u2019s exactly what I\u2019ve done with [koa-2-browser](https://github.com/johnhenry/koa-2-browser). It\u2019s literally koa that works in the browser! It\u2019s a light framework, so it integrates easily with other code. And because the changes are relatively minor, I\u2019m working on landing these changes in an upcoming release of Koa as to make it an isomorphic application out of the box. For now, you can take [nearly] all code that you wrote for a koa server in node, and transfer it to the browser.\n\nRevisiting the service worker example above, we have:\n\n```javascript\n    //example -- koa-2-browser\n    const server = require(\u2018koa-2-browser\u2019)();\n    server.use(/*middleware*/);\n    server.listen(()=>{\n\n    self.onfetch(function(event) {\n        return event.respondWith(new Promise((resolve, reject)=>{\n          const response = server.respondTo(event.request,{browserResponse:true});\n          response.on(\u201Cfinish\u201D, (res)=>{\n            resolve(res);\n          });\n        }));\n      });\n\n    });\n\n    /*\n    Note: server.RespondTo returns a response object\n    (here identified as "response")\n    that is not a suitable resolution\n    for the promise passed to event.respond with.\n    Passing the "browserResponse:true" option\n    will cause the "finish" event to be resolved\n    with a suitable instance of window.Response\n    (identified as "res").\n    */\n```\n\nIt\u2019s important to realize that if we ever want to move towards isomorphic JavaScript, we should really shy away from competing standards within the language itself.\n\nAnd this is true for open source software as a whole; if two different APIs do the same thing, they should have the same structure. When we set out to create something new, we should pay attention to and work with others who are already doing similar things in other environments. The less time we spend re-inventing the wheel, the more time we have to invent new and exciting stuff (hover-wheel anyone?).\n\n## Et tu, Buffer?\n\nServers aren\u2019t the only competing standards across environments.\n\n[\\*\\*Buffers](https://nodejs.org/api/buffer.html)** are standardized in node and [**ArrayBuffers](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer)\\*\\* are standardized in the browser. They are both containers for binary data, but they work slightly differently. This is particularly annoying when attempting to create isomorphic applications. Even worse, some objects that have a \u201Cbuffer\u201D method, may return an ArrayBuffer instead, meaning that you may have to apply special logic to work with them in different environments.\n\nAfter many revisions, [\\*\\*Streams](https://nodejs.org/api/stream.html)** are close to full standardization in node. Unfortunately, [**Browser Streams](https://streams.spec.whatwg.org/)\\*\\*, an emerging standard, introduce new and incompatible parts of the API. Hopefully, the groups involved can come to an agreement at some point.\n\nThere are some other similar topics like **importing modules**, but that situation is way more complicated to go into her.\n\n## Bonus Library!!!\n\nBut trying new things is fun! I actually prefer the [way that FlyWeb creates servers](https://github.com/flyweb/spec). Since it [it appears that I\u2019m not the only one](https://github.com/koajs/koa/issues/482), I\u2019ve created another library, [flyweb-koa](https://github.com/johnhenry/flyweb-koa). It allows you to use koa in a manner similar to the FlyWeb, while maintaining everything that koa has to offer.\n\n```javascript\n    const koa = require(\u201Ckoa-2-browser\u201D);\n    //This also works with koa;\n\n    const publishServer = require(\u2018flyweb-koa\u2019)(\u2018koa\u2019);\n\n    const server = await publishServer(/*listening address*/);\n    server.use(/*middleware*/);\n    server.onfetch = (context)=>{\n    ...\n    };\n    server.respondTo(/*request*/);\n```\n', "html": '<p><em>Originally Published: <a href="https://medium.com/@iamjohnhenry/browsers-servers-and-apis-2f7b10523f39">https://medium.com/@iamjohnhenry/browsers-servers-and-apis-2f7b10523f39</a></em></p>\n<p>(Or \u201CThe path to Isomorphic Javascript\u201D)</p>\n<p>Note: Examples in the article were tested and run using <a href="https://nodejs.org/en/">node</a> and <a href="http://browserify.org/">browserify</a>.</p>\n<p>If you\u2019re a modern JavaScript enthusiast, you\u2019re familiar with isomorphic code \u2014 the idea that you can write code that will run in both browser and node environments. Because JavaScript is a standardized language, you might think that this would be a trivial matter. The problem comes not in the language itself, but in the <a href="https://en.wikipedia.org/wiki/Application_programming_interface">API</a>s, which are specific to each environment and not standardized to play well with others.</p>\n<p>Some actions in one environment do not make sense in the other and so they lack specific APIs. The browser isn\u2019t given access to the file system, so the <a href="https://nodejs.org/api/fs.html">fs object</a> that comes with node would not make sense here. Conversely, when I was younger, I would make copious use of the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/alert">window.alert</a> for debugging, but a popup window won\u2019t show up when you\u2019re looking at a command line.</p>\n<p>There are some actions, however, that can be done both within node and within the browser. One of the most interesting is creating servers.</p>\n<h2 id="standardizing-servers"><strong>Standardizing Servers</strong></h2>\n<p>Traditionally you wouldn\u2019t set up a server within a browser, but considering what a server does \u2014 accepts requests and responds asynchronously, we can think of many use cases.</p>\n<p>For instance, a server within a service worker would be able to intercept and respond to requests within the browser, without ever having to make a call across a network.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//example -- service worker</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">server</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> \u2026;</span><span style="color: #8B949E">//define later</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    self.</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(\u2018fetch\u2019, </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">event</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">     </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> event.</span><span style="color: #D2A8FF">respondWith</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Promise</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">resolve</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">reject</span><span style="color: #C9D1D9">)</span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">response</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> server.</span><span style="color: #D2A8FF">respondTo</span><span style="color: #C9D1D9">(event.request);</span></span>\n<span class="line"><span style="color: #C9D1D9">       response.</span><span style="color: #D2A8FF">on</span><span style="color: #C9D1D9">(\u201Cfinish\u201D, ()</span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">         </span><span style="color: #D2A8FF">resolve</span><span style="color: #C9D1D9">(req);</span></span>\n<span class="line"><span style="color: #C9D1D9">       });</span></span>\n<span class="line"><span style="color: #C9D1D9">     }));</span></span>\n<span class="line"><span style="color: #C9D1D9">    });</span></span></code></pre>\n<p>We\u2019ll come back to this idea\u2026</p>\n<h2 id="competing-standards"><strong>Competing Standards</strong></h2>\n<p>So, I want to put a server in the browser \u2014 what are my options? Not long ago, I learned about the new <a href="https://hacks.mozilla.org/2016/09/flyweb-pure-web-cross-device-interaction/">FlyWeb</a> standard that <a href="https://blog.mozilla.org/">Mozilla</a> is pushing for creating servers within the browser. I was pretty excited until i realized how different it was from anything that already existed in node.</p>\n<p>Every other server that I\u2019ve seen follows a particular pattern\u2026</p>\n<h3 id="http"><strong>HTTP</strong></h3>\n<p>Node already has a built in simple API for creating servers via <a href="https://nodejs.org/api/http.html">http</a>.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//example -- http</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//create server and define action</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">server</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">require</span><span style="color: #C9D1D9">(\u201Chttp\u201D)</span></span>\n<span class="line"><span style="color: #C9D1D9">     .</span><span style="color: #D2A8FF">createServer</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">request</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">response</span><span style="color: #C9D1D9">)</span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">...</span><span style="color: #8B949E">//process request</span></span>\n<span class="line"><span style="color: #C9D1D9">      response.</span><span style="color: #D2A8FF">end</span><span style="color: #C9D1D9">();</span><span style="color: #8B949E">//end response</span></span>\n<span class="line"><span style="color: #C9D1D9">    });</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//start server</span></span>\n<span class="line"><span style="color: #C9D1D9">    server.</span><span style="color: #D2A8FF">listen</span><span style="color: #C9D1D9">(</span><span style="color: #8B949E">/*listening address*/</span><span style="color: #C9D1D9">);</span></span></code></pre>\n<p>This might be considered a standard, but many modern server applications are built to handle complex workflows.</p>\n<h3 id="express"><strong>Express</strong></h3>\n<p>As the http module is quite simplistic, the <a href="https://github.com/expressjs/express">express</a> module is the de-facto standard for creating servers within node. It separates creating the server from assigning it actions. It also makes handling complex workflows easier. Express servers have a \u201Cuse\u201D method. It allows the user to chain together multiple functions to act upon a request before a response is sent. These functions are called \u201Cmiddleware\u201D.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//example -- express</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//create server</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">server</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">require</span><span style="color: #C9D1D9">(\u201Cexpress\u201D)();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//register middleware</span></span>\n<span class="line"><span style="color: #C9D1D9">    server.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">request</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">response</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">next</span><span style="color: #C9D1D9">)</span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">...</span><span style="color: #8B949E">//process request</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #D2A8FF">next</span><span style="color: #C9D1D9">();</span><span style="color: #8B949E">//go to next middleware</span></span>\n<span class="line"><span style="color: #C9D1D9">    });</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//register middleware</span></span>\n<span class="line"><span style="color: #C9D1D9">    server.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">request</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">response</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">next</span><span style="color: #C9D1D9">)</span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">...</span><span style="color: #8B949E">//process request</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(request.endResponse){</span></span>\n<span class="line"><span style="color: #C9D1D9">        response.</span><span style="color: #D2A8FF">end</span><span style="color: #C9D1D9">();</span><span style="color: #8B949E">//end response</span></span>\n<span class="line"><span style="color: #C9D1D9">      }</span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">next</span><span style="color: #C9D1D9">();</span><span style="color: #8B949E">//go to next middleware</span></span>\n<span class="line"><span style="color: #C9D1D9">      }</span></span>\n<span class="line"><span style="color: #C9D1D9">    });</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//register middleware</span></span>\n<span class="line"><span style="color: #C9D1D9">    server.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">request</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">response</span><span style="color: #C9D1D9">)</span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">      response.</span><span style="color: #D2A8FF">end</span><span style="color: #C9D1D9">();</span><span style="color: #8B949E">//end response</span></span>\n<span class="line"><span style="color: #C9D1D9">    });</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//start server</span></span>\n<span class="line"><span style="color: #C9D1D9">    server.</span><span style="color: #D2A8FF">listen</span><span style="color: #C9D1D9">(</span><span style="color: #8B949E">/*listening address*/</span><span style="color: #C9D1D9">);</span></span></code></pre>\n<p>In addition, express adds additional features such as templating or routing which you may or may not need.</p>\n<h3 id="koa-2"><strong>Koa 2</strong></h3>\n<p><a href="https://github.com/koajs/koa">Koa</a> was created by the same people who create express and is considered to be its spiritual successor. It\u2019s also my server of choice, so you should <a href="http://koajs.com/">take a look at how it works</a> if you haven\u2019t already.</p>\n<p>Koa makes use of <a href="https://github.com/tc39/ecmascript-asyncawait">asynchronous functions</a> and adding middleware works similarly.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//example -- koa</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">server</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">require</span><span style="color: #C9D1D9">(\u201Ckoa\u201D)();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    server.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">context</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">next</span><span style="color: #C9D1D9">)</span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">...</span><span style="color: #8B949E">//process request</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #D2A8FF">next</span><span style="color: #C9D1D9">();</span><span style="color: #8B949E">//go to next middleware</span></span>\n<span class="line"><span style="color: #C9D1D9">    });</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    server.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">context</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">next</span><span style="color: #C9D1D9">)</span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">      context.res.</span><span style="color: #D2A8FF">end</span><span style="color: #C9D1D9">();</span><span style="color: #8B949E">//end response</span></span>\n<span class="line"><span style="color: #C9D1D9">    });</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//start server</span></span>\n<span class="line"><span style="color: #C9D1D9">    server.</span><span style="color: #D2A8FF">listen</span><span style="color: #C9D1D9">(</span><span style="color: #8B949E">/*listening address*/</span><span style="color: #C9D1D9">);</span></span></code></pre>\n<p>Koa also eschews built in routing and templating in favor of including them externally as middleware.</p>\n<p>Please be aware that Koa 2 is still in alpha, but since its API is so much cleaner than Koa 1\u2019s, <a href="https://www.smashingmagazine.com/2016/08/getting-started-koa-2-async-functions/">here\u2019s a tutorial that will help you jump right in</a>,</p>\n<h3 id="rill"><strong>Rill</strong></h3>\n<p><a href="https://github.com/rill-js/rill">Rill</a> is a <a href="https://medium.com/@pierceydylan/isomorphic-javascript-it-just-has-to-work-b9da5b0c8035#.l79bgqqwx">new server</a> that has basically the same API as KOA 2, but works in the browser as well as in node right out of the box.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//example -- rill</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">server</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">require</span><span style="color: #C9D1D9">(\u201Crill\u201D)();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    server.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">context</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">next</span><span style="color: #C9D1D9">)</span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">      context.res.</span><span style="color: #D2A8FF">end</span><span style="color: #C9D1D9">();</span><span style="color: #8B949E">//end response</span></span>\n<span class="line"><span style="color: #C9D1D9">    });</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    server.</span><span style="color: #D2A8FF">listen</span><span style="color: #C9D1D9">(</span><span style="color: #8B949E">/*listening address*/</span><span style="color: #C9D1D9">);</span></span></code></pre>\n<p>Rill may be overkill for my purposes, as it includes routing features that manipulate the web page, in addition to simply processing requests into responses.</p>\n<h3 id="flyweb"><strong>FlyWeb</strong></h3>\n<p>There\u2019s a basic pattern of that all of the other servers follow.</p>\n<p>1 create server</p>\n<p>2 add actions</p>\n<p>3 start server</p>\n<p>While rill or koa would have been a great starting point for a server in the browser, mozilla has taken a different route with their new FlyWeb servers.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//example -- flyweb</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//create and start server</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">server</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> window.navigator.</span><span style="color: #D2A8FF">publishServer</span><span style="color: #C9D1D9">(</span><span style="color: #8B949E">/*listening address*/</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//add actions</span></span>\n<span class="line"><span style="color: #C9D1D9">    server.</span><span style="color: #D2A8FF">onfetch</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">request</span><span style="color: #C9D1D9">)</span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">...</span><span style="color: #8B949E">//process request</span></span>\n<span class="line"><span style="color: #C9D1D9">      request.</span><span style="color: #D2A8FF">end</span><span style="color: #C9D1D9">();</span><span style="color: #8B949E">//end response</span></span>\n<span class="line"><span style="color: #C9D1D9">    };</span></span></code></pre>\n<p>This breaks the pattern of everything we\u2019ve seen so far! Here the server is created and started first. Only afterwards are actions actions added.</p>\n<p>Do we really need an entirely new way of doing basically the same thing?</p>\n<p><img src="https://cdn-images-1.medium.com/max/2000/1*9nMBMt-OugnruBr_M-WuEQ.png" alt="I know. It\u2019s in every article. Perhaps that says something to the importance of the situation. https://xkcd.com/license.html"><em>I know. It\u2019s in every article. Perhaps that says something to the importance of the situation. <a href="https://xkcd.com/license.html">https://xkcd.com/license.html</a></em></p>\n<h2 id="rillhttp-to-the-rescue"><strong>@Rill/http to the Rescue</strong></h2>\n<p><a href="https://medium.com/@pierceydylan/">The creators of rill are</a> pretty smart. When they created rill to work in the browser and in node, they realized the same thing I did at the beginning of this article \u2014 that dissimilar APIs are what make isomorphic code so difficult. So, to ensure that it works in both places, they created their own implementation of node\u2019s low level <a href="https://nodejs.org/api/http.html">http module</a>, <a href="https://github.com/rill-js/http">@rill/http</a>, that works in the browser. Because it follows the same API, it can be, with a few tweaks, swapped into other modules that depend upon http, and allow them to work in the browser.</p>\n<p>And that\u2019s exactly what I\u2019ve done with <a href="https://github.com/johnhenry/koa-2-browser">koa-2-browser</a>. It\u2019s literally koa that works in the browser! It\u2019s a light framework, so it integrates easily with other code. And because the changes are relatively minor, I\u2019m working on landing these changes in an upcoming release of Koa as to make it an isomorphic application out of the box. For now, you can take [nearly] all code that you wrote for a koa server in node, and transfer it to the browser.</p>\n<p>Revisiting the service worker example above, we have:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//example -- koa-2-browser</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">server</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">require</span><span style="color: #C9D1D9">(\u2018koa</span><span style="color: #FF7B72">-</span><span style="color: #79C0FF">2</span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9">browser\u2019)();</span></span>\n<span class="line"><span style="color: #C9D1D9">    server.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(</span><span style="color: #8B949E">/*middleware*/</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"><span style="color: #C9D1D9">    server.</span><span style="color: #D2A8FF">listen</span><span style="color: #C9D1D9">(()</span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9">{</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    self.</span><span style="color: #D2A8FF">onfetch</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">event</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> event.</span><span style="color: #D2A8FF">respondWith</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Promise</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">resolve</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">reject</span><span style="color: #C9D1D9">)</span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">response</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> server.</span><span style="color: #D2A8FF">respondTo</span><span style="color: #C9D1D9">(event.request,{browserResponse:</span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">});</span></span>\n<span class="line"><span style="color: #C9D1D9">          response.</span><span style="color: #D2A8FF">on</span><span style="color: #C9D1D9">(\u201Cfinish\u201D, (</span><span style="color: #FFA657">res</span><span style="color: #C9D1D9">)</span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #D2A8FF">resolve</span><span style="color: #C9D1D9">(res);</span></span>\n<span class="line"><span style="color: #C9D1D9">          });</span></span>\n<span class="line"><span style="color: #C9D1D9">        }));</span></span>\n<span class="line"><span style="color: #C9D1D9">      });</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    });</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">/*</span></span>\n<span class="line"><span style="color: #8B949E">    Note: server.RespondTo returns a response object</span></span>\n<span class="line"><span style="color: #8B949E">    (here identified as &quot;response&quot;)</span></span>\n<span class="line"><span style="color: #8B949E">    that is not a suitable resolution</span></span>\n<span class="line"><span style="color: #8B949E">    for the promise passed to event.respond with.</span></span>\n<span class="line"><span style="color: #8B949E">    Passing the &quot;browserResponse:true&quot; option</span></span>\n<span class="line"><span style="color: #8B949E">    will cause the &quot;finish&quot; event to be resolved</span></span>\n<span class="line"><span style="color: #8B949E">    with a suitable instance of window.Response</span></span>\n<span class="line"><span style="color: #8B949E">    (identified as &quot;res&quot;).</span></span>\n<span class="line"><span style="color: #8B949E">    */</span></span></code></pre>\n<p>It\u2019s important to realize that if we ever want to move towards isomorphic JavaScript, we should really shy away from competing standards within the language itself.</p>\n<p>And this is true for open source software as a whole; if two different APIs do the same thing, they should have the same structure. When we set out to create something new, we should pay attention to and work with others who are already doing similar things in other environments. The less time we spend re-inventing the wheel, the more time we have to invent new and exciting stuff (hover-wheel anyone?).</p>\n<h2 id="et-tu-buffer">Et tu, Buffer?</h2>\n<p>Servers aren\u2019t the only competing standards across environments.</p>\n<p><a href="https://nodejs.org/api/buffer.html">**Buffers</a>** are standardized in node and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer">**ArrayBuffers</a>** are standardized in the browser. They are both containers for binary data, but they work slightly differently. This is particularly annoying when attempting to create isomorphic applications. Even worse, some objects that have a \u201Cbuffer\u201D method, may return an ArrayBuffer instead, meaning that you may have to apply special logic to work with them in different environments.</p>\n<p>After many revisions, <a href="https://nodejs.org/api/stream.html">**Streams</a>** are close to full standardization in node. Unfortunately, <a href="https://streams.spec.whatwg.org/">**Browser Streams</a>**, an emerging standard, introduce new and incompatible parts of the API. Hopefully, the groups involved can come to an agreement at some point.</p>\n<p>There are some other similar topics like <strong>importing modules</strong>, but that situation is way more complicated to go into her.</p>\n<h2 id="bonus-library">Bonus Library!!!</h2>\n<p>But trying new things is fun! I actually prefer the <a href="https://github.com/flyweb/spec">way that FlyWeb creates servers</a>. Since it <a href="https://github.com/koajs/koa/issues/482">it appears that I\u2019m not the only one</a>, I\u2019ve created another library, <a href="https://github.com/johnhenry/flyweb-koa">flyweb-koa</a>. It allows you to use koa in a manner similar to the FlyWeb, while maintaining everything that koa has to offer.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">koa</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">require</span><span style="color: #C9D1D9">(\u201Ckoa</span><span style="color: #FF7B72">-</span><span style="color: #79C0FF">2</span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9">browser\u201D);</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//This also works with koa;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">publishServer</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">require</span><span style="color: #C9D1D9">(\u2018flyweb</span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9">koa\u2019)(\u2018koa\u2019);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">server</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">publishServer</span><span style="color: #C9D1D9">(</span><span style="color: #8B949E">/*listening address*/</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"><span style="color: #C9D1D9">    server.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(</span><span style="color: #8B949E">/*middleware*/</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"><span style="color: #C9D1D9">    server.</span><span style="color: #D2A8FF">onfetch</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">context</span><span style="color: #C9D1D9">)</span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">...</span></span>\n<span class="line"><span style="color: #C9D1D9">    };</span></span>\n<span class="line"><span style="color: #C9D1D9">    server.</span><span style="color: #D2A8FF">respondTo</span><span style="color: #C9D1D9">(</span><span style="color: #8B949E">/*request*/</span><span style="color: #C9D1D9">);</span></span></code></pre>' };
const frontmatter$5 = { "title": "Browsers, Servers, and APIs", "description": "Using servers in the browsers", "date": "1 May 2019", "author": "John Henry", "heroImage": "/vendor/img/www.pexels.com/pixabay/view-of-street-from-a-glass-window.jpg", "alt": "Astro", "tags": ["programming"], "astro": { "headers": [{ "depth": 2, "slug": "standardizing-servers", "text": "Standardizing Servers" }, { "depth": 2, "slug": "competing-standards", "text": "Competing Standards" }, { "depth": 3, "slug": "http", "text": "HTTP" }, { "depth": 3, "slug": "express", "text": "Express" }, { "depth": 3, "slug": "koa-2", "text": "Koa 2" }, { "depth": 3, "slug": "rill", "text": "Rill" }, { "depth": 3, "slug": "flyweb", "text": "FlyWeb" }, { "depth": 2, "slug": "rillhttp-to-the-rescue", "text": "@Rill/http to the Rescue" }, { "depth": 2, "slug": "et-tu-buffer", "text": "Et tu, Buffer?" }, { "depth": 2, "slug": "bonus-library", "text": "Bonus Library!!!" }], "source": '\n_Originally Published: https://medium.com/@iamjohnhenry/browsers-servers-and-apis-2f7b10523f39_\n\n(Or \u201CThe path to Isomorphic Javascript\u201D)\n\nNote: Examples in the article were tested and run using [node](https://nodejs.org/en/) and [browserify](http://browserify.org/).\n\nIf you\u2019re a modern JavaScript enthusiast, you\u2019re familiar with isomorphic code \u2014 the idea that you can write code that will run in both browser and node environments. Because JavaScript is a standardized language, you might think that this would be a trivial matter. The problem comes not in the language itself, but in the [API](https://en.wikipedia.org/wiki/Application_programming_interface)s, which are specific to each environment and not standardized to play well with others.\n\nSome actions in one environment do not make sense in the other and so they lack specific APIs. The browser isn\u2019t given access to the file system, so the [fs object](https://nodejs.org/api/fs.html) that comes with node would not make sense here. Conversely, when I was younger, I would make copious use of the [window.alert](https://developer.mozilla.org/en-US/docs/Web/API/Window/alert) for debugging, but a popup window won\u2019t show up when you\u2019re looking at a command line.\n\nThere are some actions, however, that can be done both within node and within the browser. One of the most interesting is creating servers.\n\n## **Standardizing Servers**\n\nTraditionally you wouldn\u2019t set up a server within a browser, but considering what a server does \u2014 accepts requests and responds asynchronously, we can think of many use cases.\n\nFor instance, a server within a service worker would be able to intercept and respond to requests within the browser, without ever having to make a call across a network.\n\n```javascript\n    //example -- service worker\n    const server = \u2026;//define later\n\n    self.addEventListener(\u2018fetch\u2019, function(event) {\n     return event.respondWith(new Promise((resolve, reject)=>{\n       const response = server.respondTo(event.request);\n       response.on(\u201Cfinish\u201D, ()=>{\n         resolve(req);\n       });\n     }));\n    });\n```\n\nWe\u2019ll come back to this idea...\n\n## **Competing Standards**\n\nSo, I want to put a server in the browser \u2014 what are my options? Not long ago, I learned about the new [FlyWeb](https://hacks.mozilla.org/2016/09/flyweb-pure-web-cross-device-interaction/) standard that [Mozilla](https://blog.mozilla.org/) is pushing for creating servers within the browser. I was pretty excited until i realized how different it was from anything that already existed in node.\n\nEvery other server that I\u2019ve seen follows a particular pattern\u2026\n\n### **HTTP**\n\nNode already has a built in simple API for creating servers via [http](https://nodejs.org/api/http.html).\n\n```javascript\n    //example -- http\n    //create server and define action\n    const server = require(\u201Chttp\u201D)\n     .createServer((request, response)=>{\n      ...//process request\n      response.end();//end response\n    });\n\n    //start server\n    server.listen(/*listening address*/);\n```\n\nThis might be considered a standard, but many modern server applications are built to handle complex workflows.\n\n### **Express**\n\nAs the http module is quite simplistic, the [express](https://github.com/expressjs/express) module is the de-facto standard for creating servers within node. It separates creating the server from assigning it actions. It also makes handling complex workflows easier. Express servers have a \u201Cuse\u201D method. It allows the user to chain together multiple functions to act upon a request before a response is sent. These functions are called \u201Cmiddleware\u201D.\n\n```javascript\n    //example -- express\n\n    //create server\n    const server = require(\u201Cexpress\u201D)();\n\n    //register middleware\n    server.use((request, response, next)=>{\n      ...//process request\n      next();//go to next middleware\n    });\n\n    //register middleware\n    server.use((request, response, next)=>{\n      ...//process request\n      if(request.endResponse){\n        response.end();//end response\n      }else{\n        next();//go to next middleware\n      }\n    });\n\n    //register middleware\n    server.use((request, response)=>{\n      response.end();//end response\n    });\n\n    //start server\n    server.listen(/*listening address*/);\n```\n\nIn addition, express adds additional features such as templating or routing which you may or may not need.\n\n### **Koa 2**\n\n[Koa](https://github.com/koajs/koa) was created by the same people who create express and is considered to be its spiritual successor. It\u2019s also my server of choice, so you should [take a look at how it works](http://koajs.com/) if you haven\u2019t already.\n\nKoa makes use of [asynchronous functions](https://github.com/tc39/ecmascript-asyncawait) and adding middleware works similarly.\n\n```javascript\n    //example -- koa\n\n    const server = require(\u201Ckoa\u201D)();\n\n    server.use(async (context, next)=>{\n      ...//process request\n      next();//go to next middleware\n    });\n\n    server.use((context, next)=>{\n      context.res.end();//end response\n    });\n\n    //start server\n    server.listen(/*listening address*/);\n```\n\nKoa also eschews built in routing and templating in favor of including them externally as middleware.\n\nPlease be aware that Koa 2 is still in alpha, but since its API is so much cleaner than Koa 1\u2019s, [here\u2019s a tutorial that will help you jump right in](https://www.smashingmagazine.com/2016/08/getting-started-koa-2-async-functions/),\n\n### **Rill**\n\n[Rill](https://github.com/rill-js/rill) is a [new server](https://medium.com/@pierceydylan/isomorphic-javascript-it-just-has-to-work-b9da5b0c8035#.l79bgqqwx) that has basically the same API as KOA 2, but works in the browser as well as in node right out of the box.\n\n```javascript\n    //example -- rill\n\n    const server = require(\u201Crill\u201D)();\n\n    server.use((context, next)=>{\n      context.res.end();//end response\n    });\n\n    server.listen(/*listening address*/);\n```\n\nRill may be overkill for my purposes, as it includes routing features that manipulate the web page, in addition to simply processing requests into responses.\n\n### **FlyWeb**\n\nThere\u2019s a basic pattern of that all of the other servers follow.\n\n1 create server\n\n2 add actions\n\n3 start server\n\nWhile rill or koa would have been a great starting point for a server in the browser, mozilla has taken a different route with their new FlyWeb servers.\n\n```javascript\n    //example -- flyweb\n\n    //create and start server\n    const server = await window.navigator.publishServer(/*listening address*/);\n\n    //add actions\n    server.onfetch = (request)=>{\n      ...//process request\n      request.end();//end response\n    };\n```\n\nThis breaks the pattern of everything we\u2019ve seen so far! Here the server is created and started first. Only afterwards are actions actions added.\n\nDo we really need an entirely new way of doing basically the same thing?\n\n![I know. It\u2019s in every article. Perhaps that says something to the importance of the situation. [https://xkcd.com/license.html](https://xkcd.com/license.html)](https://cdn-images-1.medium.com/max/2000/1*9nMBMt-OugnruBr_M-WuEQ.png)_I know. It\u2019s in every article. Perhaps that says something to the importance of the situation. [https://xkcd.com/license.html](https://xkcd.com/license.html)_\n\n## **@Rill/http to the Rescue**\n\n[The creators of rill are](https://medium.com/@pierceydylan/) pretty smart. When they created rill to work in the browser and in node, they realized the same thing I did at the beginning of this article \u2014 that dissimilar APIs are what make isomorphic code so difficult. So, to ensure that it works in both places, they created their own implementation of node\u2019s low level [http module](https://nodejs.org/api/http.html), [@rill/http](https://github.com/rill-js/http), that works in the browser. Because it follows the same API, it can be, with a few tweaks, swapped into other modules that depend upon http, and allow them to work in the browser.\n\nAnd that\u2019s exactly what I\u2019ve done with [koa-2-browser](https://github.com/johnhenry/koa-2-browser). It\u2019s literally koa that works in the browser! It\u2019s a light framework, so it integrates easily with other code. And because the changes are relatively minor, I\u2019m working on landing these changes in an upcoming release of Koa as to make it an isomorphic application out of the box. For now, you can take [nearly] all code that you wrote for a koa server in node, and transfer it to the browser.\n\nRevisiting the service worker example above, we have:\n\n```javascript\n    //example -- koa-2-browser\n    const server = require(\u2018koa-2-browser\u2019)();\n    server.use(/*middleware*/);\n    server.listen(()=>{\n\n    self.onfetch(function(event) {\n        return event.respondWith(new Promise((resolve, reject)=>{\n          const response = server.respondTo(event.request,{browserResponse:true});\n          response.on(\u201Cfinish\u201D, (res)=>{\n            resolve(res);\n          });\n        }));\n      });\n\n    });\n\n    /*\n    Note: server.RespondTo returns a response object\n    (here identified as "response")\n    that is not a suitable resolution\n    for the promise passed to event.respond with.\n    Passing the "browserResponse:true" option\n    will cause the "finish" event to be resolved\n    with a suitable instance of window.Response\n    (identified as "res").\n    */\n```\n\nIt\u2019s important to realize that if we ever want to move towards isomorphic JavaScript, we should really shy away from competing standards within the language itself.\n\nAnd this is true for open source software as a whole; if two different APIs do the same thing, they should have the same structure. When we set out to create something new, we should pay attention to and work with others who are already doing similar things in other environments. The less time we spend re-inventing the wheel, the more time we have to invent new and exciting stuff (hover-wheel anyone?).\n\n## Et tu, Buffer?\n\nServers aren\u2019t the only competing standards across environments.\n\n[\\*\\*Buffers](https://nodejs.org/api/buffer.html)** are standardized in node and [**ArrayBuffers](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer)\\*\\* are standardized in the browser. They are both containers for binary data, but they work slightly differently. This is particularly annoying when attempting to create isomorphic applications. Even worse, some objects that have a \u201Cbuffer\u201D method, may return an ArrayBuffer instead, meaning that you may have to apply special logic to work with them in different environments.\n\nAfter many revisions, [\\*\\*Streams](https://nodejs.org/api/stream.html)** are close to full standardization in node. Unfortunately, [**Browser Streams](https://streams.spec.whatwg.org/)\\*\\*, an emerging standard, introduce new and incompatible parts of the API. Hopefully, the groups involved can come to an agreement at some point.\n\nThere are some other similar topics like **importing modules**, but that situation is way more complicated to go into her.\n\n## Bonus Library!!!\n\nBut trying new things is fun! I actually prefer the [way that FlyWeb creates servers](https://github.com/flyweb/spec). Since it [it appears that I\u2019m not the only one](https://github.com/koajs/koa/issues/482), I\u2019ve created another library, [flyweb-koa](https://github.com/johnhenry/flyweb-koa). It allows you to use koa in a manner similar to the FlyWeb, while maintaining everything that koa has to offer.\n\n```javascript\n    const koa = require(\u201Ckoa-2-browser\u201D);\n    //This also works with koa;\n\n    const publishServer = require(\u2018flyweb-koa\u2019)(\u2018koa\u2019);\n\n    const server = await publishServer(/*listening address*/);\n    server.use(/*middleware*/);\n    server.onfetch = (context)=>{\n    ...\n    };\n    server.respondTo(/*request*/);\n```\n', "html": '<p><em>Originally Published: <a href="https://medium.com/@iamjohnhenry/browsers-servers-and-apis-2f7b10523f39">https://medium.com/@iamjohnhenry/browsers-servers-and-apis-2f7b10523f39</a></em></p>\n<p>(Or \u201CThe path to Isomorphic Javascript\u201D)</p>\n<p>Note: Examples in the article were tested and run using <a href="https://nodejs.org/en/">node</a> and <a href="http://browserify.org/">browserify</a>.</p>\n<p>If you\u2019re a modern JavaScript enthusiast, you\u2019re familiar with isomorphic code \u2014 the idea that you can write code that will run in both browser and node environments. Because JavaScript is a standardized language, you might think that this would be a trivial matter. The problem comes not in the language itself, but in the <a href="https://en.wikipedia.org/wiki/Application_programming_interface">API</a>s, which are specific to each environment and not standardized to play well with others.</p>\n<p>Some actions in one environment do not make sense in the other and so they lack specific APIs. The browser isn\u2019t given access to the file system, so the <a href="https://nodejs.org/api/fs.html">fs object</a> that comes with node would not make sense here. Conversely, when I was younger, I would make copious use of the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/alert">window.alert</a> for debugging, but a popup window won\u2019t show up when you\u2019re looking at a command line.</p>\n<p>There are some actions, however, that can be done both within node and within the browser. One of the most interesting is creating servers.</p>\n<h2 id="standardizing-servers"><strong>Standardizing Servers</strong></h2>\n<p>Traditionally you wouldn\u2019t set up a server within a browser, but considering what a server does \u2014 accepts requests and responds asynchronously, we can think of many use cases.</p>\n<p>For instance, a server within a service worker would be able to intercept and respond to requests within the browser, without ever having to make a call across a network.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//example -- service worker</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">server</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> \u2026;</span><span style="color: #8B949E">//define later</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    self.</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(\u2018fetch\u2019, </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">event</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">     </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> event.</span><span style="color: #D2A8FF">respondWith</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Promise</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">resolve</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">reject</span><span style="color: #C9D1D9">)</span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">response</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> server.</span><span style="color: #D2A8FF">respondTo</span><span style="color: #C9D1D9">(event.request);</span></span>\n<span class="line"><span style="color: #C9D1D9">       response.</span><span style="color: #D2A8FF">on</span><span style="color: #C9D1D9">(\u201Cfinish\u201D, ()</span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">         </span><span style="color: #D2A8FF">resolve</span><span style="color: #C9D1D9">(req);</span></span>\n<span class="line"><span style="color: #C9D1D9">       });</span></span>\n<span class="line"><span style="color: #C9D1D9">     }));</span></span>\n<span class="line"><span style="color: #C9D1D9">    });</span></span></code></pre>\n<p>We\u2019ll come back to this idea\u2026</p>\n<h2 id="competing-standards"><strong>Competing Standards</strong></h2>\n<p>So, I want to put a server in the browser \u2014 what are my options? Not long ago, I learned about the new <a href="https://hacks.mozilla.org/2016/09/flyweb-pure-web-cross-device-interaction/">FlyWeb</a> standard that <a href="https://blog.mozilla.org/">Mozilla</a> is pushing for creating servers within the browser. I was pretty excited until i realized how different it was from anything that already existed in node.</p>\n<p>Every other server that I\u2019ve seen follows a particular pattern\u2026</p>\n<h3 id="http"><strong>HTTP</strong></h3>\n<p>Node already has a built in simple API for creating servers via <a href="https://nodejs.org/api/http.html">http</a>.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//example -- http</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//create server and define action</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">server</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">require</span><span style="color: #C9D1D9">(\u201Chttp\u201D)</span></span>\n<span class="line"><span style="color: #C9D1D9">     .</span><span style="color: #D2A8FF">createServer</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">request</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">response</span><span style="color: #C9D1D9">)</span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">...</span><span style="color: #8B949E">//process request</span></span>\n<span class="line"><span style="color: #C9D1D9">      response.</span><span style="color: #D2A8FF">end</span><span style="color: #C9D1D9">();</span><span style="color: #8B949E">//end response</span></span>\n<span class="line"><span style="color: #C9D1D9">    });</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//start server</span></span>\n<span class="line"><span style="color: #C9D1D9">    server.</span><span style="color: #D2A8FF">listen</span><span style="color: #C9D1D9">(</span><span style="color: #8B949E">/*listening address*/</span><span style="color: #C9D1D9">);</span></span></code></pre>\n<p>This might be considered a standard, but many modern server applications are built to handle complex workflows.</p>\n<h3 id="express"><strong>Express</strong></h3>\n<p>As the http module is quite simplistic, the <a href="https://github.com/expressjs/express">express</a> module is the de-facto standard for creating servers within node. It separates creating the server from assigning it actions. It also makes handling complex workflows easier. Express servers have a \u201Cuse\u201D method. It allows the user to chain together multiple functions to act upon a request before a response is sent. These functions are called \u201Cmiddleware\u201D.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//example -- express</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//create server</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">server</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">require</span><span style="color: #C9D1D9">(\u201Cexpress\u201D)();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//register middleware</span></span>\n<span class="line"><span style="color: #C9D1D9">    server.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">request</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">response</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">next</span><span style="color: #C9D1D9">)</span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">...</span><span style="color: #8B949E">//process request</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #D2A8FF">next</span><span style="color: #C9D1D9">();</span><span style="color: #8B949E">//go to next middleware</span></span>\n<span class="line"><span style="color: #C9D1D9">    });</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//register middleware</span></span>\n<span class="line"><span style="color: #C9D1D9">    server.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">request</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">response</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">next</span><span style="color: #C9D1D9">)</span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">...</span><span style="color: #8B949E">//process request</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(request.endResponse){</span></span>\n<span class="line"><span style="color: #C9D1D9">        response.</span><span style="color: #D2A8FF">end</span><span style="color: #C9D1D9">();</span><span style="color: #8B949E">//end response</span></span>\n<span class="line"><span style="color: #C9D1D9">      }</span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">next</span><span style="color: #C9D1D9">();</span><span style="color: #8B949E">//go to next middleware</span></span>\n<span class="line"><span style="color: #C9D1D9">      }</span></span>\n<span class="line"><span style="color: #C9D1D9">    });</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//register middleware</span></span>\n<span class="line"><span style="color: #C9D1D9">    server.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">request</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">response</span><span style="color: #C9D1D9">)</span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">      response.</span><span style="color: #D2A8FF">end</span><span style="color: #C9D1D9">();</span><span style="color: #8B949E">//end response</span></span>\n<span class="line"><span style="color: #C9D1D9">    });</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//start server</span></span>\n<span class="line"><span style="color: #C9D1D9">    server.</span><span style="color: #D2A8FF">listen</span><span style="color: #C9D1D9">(</span><span style="color: #8B949E">/*listening address*/</span><span style="color: #C9D1D9">);</span></span></code></pre>\n<p>In addition, express adds additional features such as templating or routing which you may or may not need.</p>\n<h3 id="koa-2"><strong>Koa 2</strong></h3>\n<p><a href="https://github.com/koajs/koa">Koa</a> was created by the same people who create express and is considered to be its spiritual successor. It\u2019s also my server of choice, so you should <a href="http://koajs.com/">take a look at how it works</a> if you haven\u2019t already.</p>\n<p>Koa makes use of <a href="https://github.com/tc39/ecmascript-asyncawait">asynchronous functions</a> and adding middleware works similarly.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//example -- koa</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">server</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">require</span><span style="color: #C9D1D9">(\u201Ckoa\u201D)();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    server.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">context</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">next</span><span style="color: #C9D1D9">)</span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">...</span><span style="color: #8B949E">//process request</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #D2A8FF">next</span><span style="color: #C9D1D9">();</span><span style="color: #8B949E">//go to next middleware</span></span>\n<span class="line"><span style="color: #C9D1D9">    });</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    server.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">context</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">next</span><span style="color: #C9D1D9">)</span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">      context.res.</span><span style="color: #D2A8FF">end</span><span style="color: #C9D1D9">();</span><span style="color: #8B949E">//end response</span></span>\n<span class="line"><span style="color: #C9D1D9">    });</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//start server</span></span>\n<span class="line"><span style="color: #C9D1D9">    server.</span><span style="color: #D2A8FF">listen</span><span style="color: #C9D1D9">(</span><span style="color: #8B949E">/*listening address*/</span><span style="color: #C9D1D9">);</span></span></code></pre>\n<p>Koa also eschews built in routing and templating in favor of including them externally as middleware.</p>\n<p>Please be aware that Koa 2 is still in alpha, but since its API is so much cleaner than Koa 1\u2019s, <a href="https://www.smashingmagazine.com/2016/08/getting-started-koa-2-async-functions/">here\u2019s a tutorial that will help you jump right in</a>,</p>\n<h3 id="rill"><strong>Rill</strong></h3>\n<p><a href="https://github.com/rill-js/rill">Rill</a> is a <a href="https://medium.com/@pierceydylan/isomorphic-javascript-it-just-has-to-work-b9da5b0c8035#.l79bgqqwx">new server</a> that has basically the same API as KOA 2, but works in the browser as well as in node right out of the box.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//example -- rill</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">server</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">require</span><span style="color: #C9D1D9">(\u201Crill\u201D)();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    server.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">context</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">next</span><span style="color: #C9D1D9">)</span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">      context.res.</span><span style="color: #D2A8FF">end</span><span style="color: #C9D1D9">();</span><span style="color: #8B949E">//end response</span></span>\n<span class="line"><span style="color: #C9D1D9">    });</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    server.</span><span style="color: #D2A8FF">listen</span><span style="color: #C9D1D9">(</span><span style="color: #8B949E">/*listening address*/</span><span style="color: #C9D1D9">);</span></span></code></pre>\n<p>Rill may be overkill for my purposes, as it includes routing features that manipulate the web page, in addition to simply processing requests into responses.</p>\n<h3 id="flyweb"><strong>FlyWeb</strong></h3>\n<p>There\u2019s a basic pattern of that all of the other servers follow.</p>\n<p>1 create server</p>\n<p>2 add actions</p>\n<p>3 start server</p>\n<p>While rill or koa would have been a great starting point for a server in the browser, mozilla has taken a different route with their new FlyWeb servers.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//example -- flyweb</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//create and start server</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">server</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> window.navigator.</span><span style="color: #D2A8FF">publishServer</span><span style="color: #C9D1D9">(</span><span style="color: #8B949E">/*listening address*/</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//add actions</span></span>\n<span class="line"><span style="color: #C9D1D9">    server.</span><span style="color: #D2A8FF">onfetch</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">request</span><span style="color: #C9D1D9">)</span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">...</span><span style="color: #8B949E">//process request</span></span>\n<span class="line"><span style="color: #C9D1D9">      request.</span><span style="color: #D2A8FF">end</span><span style="color: #C9D1D9">();</span><span style="color: #8B949E">//end response</span></span>\n<span class="line"><span style="color: #C9D1D9">    };</span></span></code></pre>\n<p>This breaks the pattern of everything we\u2019ve seen so far! Here the server is created and started first. Only afterwards are actions actions added.</p>\n<p>Do we really need an entirely new way of doing basically the same thing?</p>\n<p><img src="https://cdn-images-1.medium.com/max/2000/1*9nMBMt-OugnruBr_M-WuEQ.png" alt="I know. It\u2019s in every article. Perhaps that says something to the importance of the situation. https://xkcd.com/license.html"><em>I know. It\u2019s in every article. Perhaps that says something to the importance of the situation. <a href="https://xkcd.com/license.html">https://xkcd.com/license.html</a></em></p>\n<h2 id="rillhttp-to-the-rescue"><strong>@Rill/http to the Rescue</strong></h2>\n<p><a href="https://medium.com/@pierceydylan/">The creators of rill are</a> pretty smart. When they created rill to work in the browser and in node, they realized the same thing I did at the beginning of this article \u2014 that dissimilar APIs are what make isomorphic code so difficult. So, to ensure that it works in both places, they created their own implementation of node\u2019s low level <a href="https://nodejs.org/api/http.html">http module</a>, <a href="https://github.com/rill-js/http">@rill/http</a>, that works in the browser. Because it follows the same API, it can be, with a few tweaks, swapped into other modules that depend upon http, and allow them to work in the browser.</p>\n<p>And that\u2019s exactly what I\u2019ve done with <a href="https://github.com/johnhenry/koa-2-browser">koa-2-browser</a>. It\u2019s literally koa that works in the browser! It\u2019s a light framework, so it integrates easily with other code. And because the changes are relatively minor, I\u2019m working on landing these changes in an upcoming release of Koa as to make it an isomorphic application out of the box. For now, you can take [nearly] all code that you wrote for a koa server in node, and transfer it to the browser.</p>\n<p>Revisiting the service worker example above, we have:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//example -- koa-2-browser</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">server</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">require</span><span style="color: #C9D1D9">(\u2018koa</span><span style="color: #FF7B72">-</span><span style="color: #79C0FF">2</span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9">browser\u2019)();</span></span>\n<span class="line"><span style="color: #C9D1D9">    server.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(</span><span style="color: #8B949E">/*middleware*/</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"><span style="color: #C9D1D9">    server.</span><span style="color: #D2A8FF">listen</span><span style="color: #C9D1D9">(()</span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9">{</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    self.</span><span style="color: #D2A8FF">onfetch</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">event</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> event.</span><span style="color: #D2A8FF">respondWith</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Promise</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">resolve</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">reject</span><span style="color: #C9D1D9">)</span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">response</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> server.</span><span style="color: #D2A8FF">respondTo</span><span style="color: #C9D1D9">(event.request,{browserResponse:</span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">});</span></span>\n<span class="line"><span style="color: #C9D1D9">          response.</span><span style="color: #D2A8FF">on</span><span style="color: #C9D1D9">(\u201Cfinish\u201D, (</span><span style="color: #FFA657">res</span><span style="color: #C9D1D9">)</span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #D2A8FF">resolve</span><span style="color: #C9D1D9">(res);</span></span>\n<span class="line"><span style="color: #C9D1D9">          });</span></span>\n<span class="line"><span style="color: #C9D1D9">        }));</span></span>\n<span class="line"><span style="color: #C9D1D9">      });</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    });</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">/*</span></span>\n<span class="line"><span style="color: #8B949E">    Note: server.RespondTo returns a response object</span></span>\n<span class="line"><span style="color: #8B949E">    (here identified as &quot;response&quot;)</span></span>\n<span class="line"><span style="color: #8B949E">    that is not a suitable resolution</span></span>\n<span class="line"><span style="color: #8B949E">    for the promise passed to event.respond with.</span></span>\n<span class="line"><span style="color: #8B949E">    Passing the &quot;browserResponse:true&quot; option</span></span>\n<span class="line"><span style="color: #8B949E">    will cause the &quot;finish&quot; event to be resolved</span></span>\n<span class="line"><span style="color: #8B949E">    with a suitable instance of window.Response</span></span>\n<span class="line"><span style="color: #8B949E">    (identified as &quot;res&quot;).</span></span>\n<span class="line"><span style="color: #8B949E">    */</span></span></code></pre>\n<p>It\u2019s important to realize that if we ever want to move towards isomorphic JavaScript, we should really shy away from competing standards within the language itself.</p>\n<p>And this is true for open source software as a whole; if two different APIs do the same thing, they should have the same structure. When we set out to create something new, we should pay attention to and work with others who are already doing similar things in other environments. The less time we spend re-inventing the wheel, the more time we have to invent new and exciting stuff (hover-wheel anyone?).</p>\n<h2 id="et-tu-buffer">Et tu, Buffer?</h2>\n<p>Servers aren\u2019t the only competing standards across environments.</p>\n<p><a href="https://nodejs.org/api/buffer.html">**Buffers</a>** are standardized in node and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer">**ArrayBuffers</a>** are standardized in the browser. They are both containers for binary data, but they work slightly differently. This is particularly annoying when attempting to create isomorphic applications. Even worse, some objects that have a \u201Cbuffer\u201D method, may return an ArrayBuffer instead, meaning that you may have to apply special logic to work with them in different environments.</p>\n<p>After many revisions, <a href="https://nodejs.org/api/stream.html">**Streams</a>** are close to full standardization in node. Unfortunately, <a href="https://streams.spec.whatwg.org/">**Browser Streams</a>**, an emerging standard, introduce new and incompatible parts of the API. Hopefully, the groups involved can come to an agreement at some point.</p>\n<p>There are some other similar topics like <strong>importing modules</strong>, but that situation is way more complicated to go into her.</p>\n<h2 id="bonus-library">Bonus Library!!!</h2>\n<p>But trying new things is fun! I actually prefer the <a href="https://github.com/flyweb/spec">way that FlyWeb creates servers</a>. Since it <a href="https://github.com/koajs/koa/issues/482">it appears that I\u2019m not the only one</a>, I\u2019ve created another library, <a href="https://github.com/johnhenry/flyweb-koa">flyweb-koa</a>. It allows you to use koa in a manner similar to the FlyWeb, while maintaining everything that koa has to offer.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">koa</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">require</span><span style="color: #C9D1D9">(\u201Ckoa</span><span style="color: #FF7B72">-</span><span style="color: #79C0FF">2</span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9">browser\u201D);</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//This also works with koa;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">publishServer</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">require</span><span style="color: #C9D1D9">(\u2018flyweb</span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9">koa\u2019)(\u2018koa\u2019);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">server</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">publishServer</span><span style="color: #C9D1D9">(</span><span style="color: #8B949E">/*listening address*/</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"><span style="color: #C9D1D9">    server.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(</span><span style="color: #8B949E">/*middleware*/</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"><span style="color: #C9D1D9">    server.</span><span style="color: #D2A8FF">onfetch</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">context</span><span style="color: #C9D1D9">)</span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">...</span></span>\n<span class="line"><span style="color: #C9D1D9">    };</span></span>\n<span class="line"><span style="color: #C9D1D9">    server.</span><span style="color: #D2A8FF">respondTo</span><span style="color: #C9D1D9">(</span><span style="color: #8B949E">/*request*/</span><span style="color: #C9D1D9">);</span></span></code></pre>' } };
const $$metadata$b = createMetadata("/src/pages/blog/posts/browsers-servers-and-apis.md", { modules: [{ module: $$module1$1, specifier: "../../../components/BlogPage.astro", assert: {} }], hydratedComponents: [], clientOnlyComponents: [], hydrationDirectives: /* @__PURE__ */ new Set([]), hoisted: [] });
const $$Astro$b = createAstro("/src/pages/blog/posts/browsers-servers-and-apis.md", "https://astro.build", "file:///home/runner/work/johnhenry.github.io/johnhenry.github.io/");
const $$BrowsersServersAndApis = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$b, $$props, $$slots);
  Astro2.self = $$BrowsersServersAndApis;
  const $$content = { "title": "Browsers, Servers, and APIs", "description": "Using servers in the browsers", "date": "1 May 2019", "author": "John Henry", "heroImage": "/vendor/img/www.pexels.com/pixabay/view-of-street-from-a-glass-window.jpg", "alt": "Astro", "tags": ["programming"], "astro": { "headers": [{ "depth": 2, "slug": "standardizing-servers", "text": "Standardizing Servers" }, { "depth": 2, "slug": "competing-standards", "text": "Competing Standards" }, { "depth": 3, "slug": "http", "text": "HTTP" }, { "depth": 3, "slug": "express", "text": "Express" }, { "depth": 3, "slug": "koa-2", "text": "Koa 2" }, { "depth": 3, "slug": "rill", "text": "Rill" }, { "depth": 3, "slug": "flyweb", "text": "FlyWeb" }, { "depth": 2, "slug": "rillhttp-to-the-rescue", "text": "@Rill/http to the Rescue" }, { "depth": 2, "slug": "et-tu-buffer", "text": "Et tu, Buffer?" }, { "depth": 2, "slug": "bonus-library", "text": "Bonus Library!!!" }], "source": '\n_Originally Published: https://medium.com/@iamjohnhenry/browsers-servers-and-apis-2f7b10523f39_\n\n(Or \u201CThe path to Isomorphic Javascript\u201D)\n\nNote: Examples in the article were tested and run using [node](https://nodejs.org/en/) and [browserify](http://browserify.org/).\n\nIf you\u2019re a modern JavaScript enthusiast, you\u2019re familiar with isomorphic code \u2014 the idea that you can write code that will run in both browser and node environments. Because JavaScript is a standardized language, you might think that this would be a trivial matter. The problem comes not in the language itself, but in the [API](https://en.wikipedia.org/wiki/Application_programming_interface)s, which are specific to each environment and not standardized to play well with others.\n\nSome actions in one environment do not make sense in the other and so they lack specific APIs. The browser isn\u2019t given access to the file system, so the [fs object](https://nodejs.org/api/fs.html) that comes with node would not make sense here. Conversely, when I was younger, I would make copious use of the [window.alert](https://developer.mozilla.org/en-US/docs/Web/API/Window/alert) for debugging, but a popup window won\u2019t show up when you\u2019re looking at a command line.\n\nThere are some actions, however, that can be done both within node and within the browser. One of the most interesting is creating servers.\n\n## **Standardizing Servers**\n\nTraditionally you wouldn\u2019t set up a server within a browser, but considering what a server does \u2014 accepts requests and responds asynchronously, we can think of many use cases.\n\nFor instance, a server within a service worker would be able to intercept and respond to requests within the browser, without ever having to make a call across a network.\n\n```javascript\n    //example -- service worker\n    const server = \u2026;//define later\n\n    self.addEventListener(\u2018fetch\u2019, function(event) {\n     return event.respondWith(new Promise((resolve, reject)=>{\n       const response = server.respondTo(event.request);\n       response.on(\u201Cfinish\u201D, ()=>{\n         resolve(req);\n       });\n     }));\n    });\n```\n\nWe\u2019ll come back to this idea...\n\n## **Competing Standards**\n\nSo, I want to put a server in the browser \u2014 what are my options? Not long ago, I learned about the new [FlyWeb](https://hacks.mozilla.org/2016/09/flyweb-pure-web-cross-device-interaction/) standard that [Mozilla](https://blog.mozilla.org/) is pushing for creating servers within the browser. I was pretty excited until i realized how different it was from anything that already existed in node.\n\nEvery other server that I\u2019ve seen follows a particular pattern\u2026\n\n### **HTTP**\n\nNode already has a built in simple API for creating servers via [http](https://nodejs.org/api/http.html).\n\n```javascript\n    //example -- http\n    //create server and define action\n    const server = require(\u201Chttp\u201D)\n     .createServer((request, response)=>{\n      ...//process request\n      response.end();//end response\n    });\n\n    //start server\n    server.listen(/*listening address*/);\n```\n\nThis might be considered a standard, but many modern server applications are built to handle complex workflows.\n\n### **Express**\n\nAs the http module is quite simplistic, the [express](https://github.com/expressjs/express) module is the de-facto standard for creating servers within node. It separates creating the server from assigning it actions. It also makes handling complex workflows easier. Express servers have a \u201Cuse\u201D method. It allows the user to chain together multiple functions to act upon a request before a response is sent. These functions are called \u201Cmiddleware\u201D.\n\n```javascript\n    //example -- express\n\n    //create server\n    const server = require(\u201Cexpress\u201D)();\n\n    //register middleware\n    server.use((request, response, next)=>{\n      ...//process request\n      next();//go to next middleware\n    });\n\n    //register middleware\n    server.use((request, response, next)=>{\n      ...//process request\n      if(request.endResponse){\n        response.end();//end response\n      }else{\n        next();//go to next middleware\n      }\n    });\n\n    //register middleware\n    server.use((request, response)=>{\n      response.end();//end response\n    });\n\n    //start server\n    server.listen(/*listening address*/);\n```\n\nIn addition, express adds additional features such as templating or routing which you may or may not need.\n\n### **Koa 2**\n\n[Koa](https://github.com/koajs/koa) was created by the same people who create express and is considered to be its spiritual successor. It\u2019s also my server of choice, so you should [take a look at how it works](http://koajs.com/) if you haven\u2019t already.\n\nKoa makes use of [asynchronous functions](https://github.com/tc39/ecmascript-asyncawait) and adding middleware works similarly.\n\n```javascript\n    //example -- koa\n\n    const server = require(\u201Ckoa\u201D)();\n\n    server.use(async (context, next)=>{\n      ...//process request\n      next();//go to next middleware\n    });\n\n    server.use((context, next)=>{\n      context.res.end();//end response\n    });\n\n    //start server\n    server.listen(/*listening address*/);\n```\n\nKoa also eschews built in routing and templating in favor of including them externally as middleware.\n\nPlease be aware that Koa 2 is still in alpha, but since its API is so much cleaner than Koa 1\u2019s, [here\u2019s a tutorial that will help you jump right in](https://www.smashingmagazine.com/2016/08/getting-started-koa-2-async-functions/),\n\n### **Rill**\n\n[Rill](https://github.com/rill-js/rill) is a [new server](https://medium.com/@pierceydylan/isomorphic-javascript-it-just-has-to-work-b9da5b0c8035#.l79bgqqwx) that has basically the same API as KOA 2, but works in the browser as well as in node right out of the box.\n\n```javascript\n    //example -- rill\n\n    const server = require(\u201Crill\u201D)();\n\n    server.use((context, next)=>{\n      context.res.end();//end response\n    });\n\n    server.listen(/*listening address*/);\n```\n\nRill may be overkill for my purposes, as it includes routing features that manipulate the web page, in addition to simply processing requests into responses.\n\n### **FlyWeb**\n\nThere\u2019s a basic pattern of that all of the other servers follow.\n\n1 create server\n\n2 add actions\n\n3 start server\n\nWhile rill or koa would have been a great starting point for a server in the browser, mozilla has taken a different route with their new FlyWeb servers.\n\n```javascript\n    //example -- flyweb\n\n    //create and start server\n    const server = await window.navigator.publishServer(/*listening address*/);\n\n    //add actions\n    server.onfetch = (request)=>{\n      ...//process request\n      request.end();//end response\n    };\n```\n\nThis breaks the pattern of everything we\u2019ve seen so far! Here the server is created and started first. Only afterwards are actions actions added.\n\nDo we really need an entirely new way of doing basically the same thing?\n\n![I know. It\u2019s in every article. Perhaps that says something to the importance of the situation. [https://xkcd.com/license.html](https://xkcd.com/license.html)](https://cdn-images-1.medium.com/max/2000/1*9nMBMt-OugnruBr_M-WuEQ.png)_I know. It\u2019s in every article. Perhaps that says something to the importance of the situation. [https://xkcd.com/license.html](https://xkcd.com/license.html)_\n\n## **@Rill/http to the Rescue**\n\n[The creators of rill are](https://medium.com/@pierceydylan/) pretty smart. When they created rill to work in the browser and in node, they realized the same thing I did at the beginning of this article \u2014 that dissimilar APIs are what make isomorphic code so difficult. So, to ensure that it works in both places, they created their own implementation of node\u2019s low level [http module](https://nodejs.org/api/http.html), [@rill/http](https://github.com/rill-js/http), that works in the browser. Because it follows the same API, it can be, with a few tweaks, swapped into other modules that depend upon http, and allow them to work in the browser.\n\nAnd that\u2019s exactly what I\u2019ve done with [koa-2-browser](https://github.com/johnhenry/koa-2-browser). It\u2019s literally koa that works in the browser! It\u2019s a light framework, so it integrates easily with other code. And because the changes are relatively minor, I\u2019m working on landing these changes in an upcoming release of Koa as to make it an isomorphic application out of the box. For now, you can take [nearly] all code that you wrote for a koa server in node, and transfer it to the browser.\n\nRevisiting the service worker example above, we have:\n\n```javascript\n    //example -- koa-2-browser\n    const server = require(\u2018koa-2-browser\u2019)();\n    server.use(/*middleware*/);\n    server.listen(()=>{\n\n    self.onfetch(function(event) {\n        return event.respondWith(new Promise((resolve, reject)=>{\n          const response = server.respondTo(event.request,{browserResponse:true});\n          response.on(\u201Cfinish\u201D, (res)=>{\n            resolve(res);\n          });\n        }));\n      });\n\n    });\n\n    /*\n    Note: server.RespondTo returns a response object\n    (here identified as "response")\n    that is not a suitable resolution\n    for the promise passed to event.respond with.\n    Passing the "browserResponse:true" option\n    will cause the "finish" event to be resolved\n    with a suitable instance of window.Response\n    (identified as "res").\n    */\n```\n\nIt\u2019s important to realize that if we ever want to move towards isomorphic JavaScript, we should really shy away from competing standards within the language itself.\n\nAnd this is true for open source software as a whole; if two different APIs do the same thing, they should have the same structure. When we set out to create something new, we should pay attention to and work with others who are already doing similar things in other environments. The less time we spend re-inventing the wheel, the more time we have to invent new and exciting stuff (hover-wheel anyone?).\n\n## Et tu, Buffer?\n\nServers aren\u2019t the only competing standards across environments.\n\n[\\*\\*Buffers](https://nodejs.org/api/buffer.html)** are standardized in node and [**ArrayBuffers](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer)\\*\\* are standardized in the browser. They are both containers for binary data, but they work slightly differently. This is particularly annoying when attempting to create isomorphic applications. Even worse, some objects that have a \u201Cbuffer\u201D method, may return an ArrayBuffer instead, meaning that you may have to apply special logic to work with them in different environments.\n\nAfter many revisions, [\\*\\*Streams](https://nodejs.org/api/stream.html)** are close to full standardization in node. Unfortunately, [**Browser Streams](https://streams.spec.whatwg.org/)\\*\\*, an emerging standard, introduce new and incompatible parts of the API. Hopefully, the groups involved can come to an agreement at some point.\n\nThere are some other similar topics like **importing modules**, but that situation is way more complicated to go into her.\n\n## Bonus Library!!!\n\nBut trying new things is fun! I actually prefer the [way that FlyWeb creates servers](https://github.com/flyweb/spec). Since it [it appears that I\u2019m not the only one](https://github.com/koajs/koa/issues/482), I\u2019ve created another library, [flyweb-koa](https://github.com/johnhenry/flyweb-koa). It allows you to use koa in a manner similar to the FlyWeb, while maintaining everything that koa has to offer.\n\n```javascript\n    const koa = require(\u201Ckoa-2-browser\u201D);\n    //This also works with koa;\n\n    const publishServer = require(\u2018flyweb-koa\u2019)(\u2018koa\u2019);\n\n    const server = await publishServer(/*listening address*/);\n    server.use(/*middleware*/);\n    server.onfetch = (context)=>{\n    ...\n    };\n    server.respondTo(/*request*/);\n```\n', "html": '<p><em>Originally Published: <a href="https://medium.com/@iamjohnhenry/browsers-servers-and-apis-2f7b10523f39">https://medium.com/@iamjohnhenry/browsers-servers-and-apis-2f7b10523f39</a></em></p>\n<p>(Or \u201CThe path to Isomorphic Javascript\u201D)</p>\n<p>Note: Examples in the article were tested and run using <a href="https://nodejs.org/en/">node</a> and <a href="http://browserify.org/">browserify</a>.</p>\n<p>If you\u2019re a modern JavaScript enthusiast, you\u2019re familiar with isomorphic code \u2014 the idea that you can write code that will run in both browser and node environments. Because JavaScript is a standardized language, you might think that this would be a trivial matter. The problem comes not in the language itself, but in the <a href="https://en.wikipedia.org/wiki/Application_programming_interface">API</a>s, which are specific to each environment and not standardized to play well with others.</p>\n<p>Some actions in one environment do not make sense in the other and so they lack specific APIs. The browser isn\u2019t given access to the file system, so the <a href="https://nodejs.org/api/fs.html">fs object</a> that comes with node would not make sense here. Conversely, when I was younger, I would make copious use of the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/alert">window.alert</a> for debugging, but a popup window won\u2019t show up when you\u2019re looking at a command line.</p>\n<p>There are some actions, however, that can be done both within node and within the browser. One of the most interesting is creating servers.</p>\n<h2 id="standardizing-servers"><strong>Standardizing Servers</strong></h2>\n<p>Traditionally you wouldn\u2019t set up a server within a browser, but considering what a server does \u2014 accepts requests and responds asynchronously, we can think of many use cases.</p>\n<p>For instance, a server within a service worker would be able to intercept and respond to requests within the browser, without ever having to make a call across a network.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//example -- service worker</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">server</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> \u2026;</span><span style="color: #8B949E">//define later</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    self.</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(\u2018fetch\u2019, </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">event</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">     </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> event.</span><span style="color: #D2A8FF">respondWith</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Promise</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">resolve</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">reject</span><span style="color: #C9D1D9">)</span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">response</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> server.</span><span style="color: #D2A8FF">respondTo</span><span style="color: #C9D1D9">(event.request);</span></span>\n<span class="line"><span style="color: #C9D1D9">       response.</span><span style="color: #D2A8FF">on</span><span style="color: #C9D1D9">(\u201Cfinish\u201D, ()</span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">         </span><span style="color: #D2A8FF">resolve</span><span style="color: #C9D1D9">(req);</span></span>\n<span class="line"><span style="color: #C9D1D9">       });</span></span>\n<span class="line"><span style="color: #C9D1D9">     }));</span></span>\n<span class="line"><span style="color: #C9D1D9">    });</span></span></code></pre>\n<p>We\u2019ll come back to this idea\u2026</p>\n<h2 id="competing-standards"><strong>Competing Standards</strong></h2>\n<p>So, I want to put a server in the browser \u2014 what are my options? Not long ago, I learned about the new <a href="https://hacks.mozilla.org/2016/09/flyweb-pure-web-cross-device-interaction/">FlyWeb</a> standard that <a href="https://blog.mozilla.org/">Mozilla</a> is pushing for creating servers within the browser. I was pretty excited until i realized how different it was from anything that already existed in node.</p>\n<p>Every other server that I\u2019ve seen follows a particular pattern\u2026</p>\n<h3 id="http"><strong>HTTP</strong></h3>\n<p>Node already has a built in simple API for creating servers via <a href="https://nodejs.org/api/http.html">http</a>.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//example -- http</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//create server and define action</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">server</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">require</span><span style="color: #C9D1D9">(\u201Chttp\u201D)</span></span>\n<span class="line"><span style="color: #C9D1D9">     .</span><span style="color: #D2A8FF">createServer</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">request</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">response</span><span style="color: #C9D1D9">)</span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">...</span><span style="color: #8B949E">//process request</span></span>\n<span class="line"><span style="color: #C9D1D9">      response.</span><span style="color: #D2A8FF">end</span><span style="color: #C9D1D9">();</span><span style="color: #8B949E">//end response</span></span>\n<span class="line"><span style="color: #C9D1D9">    });</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//start server</span></span>\n<span class="line"><span style="color: #C9D1D9">    server.</span><span style="color: #D2A8FF">listen</span><span style="color: #C9D1D9">(</span><span style="color: #8B949E">/*listening address*/</span><span style="color: #C9D1D9">);</span></span></code></pre>\n<p>This might be considered a standard, but many modern server applications are built to handle complex workflows.</p>\n<h3 id="express"><strong>Express</strong></h3>\n<p>As the http module is quite simplistic, the <a href="https://github.com/expressjs/express">express</a> module is the de-facto standard for creating servers within node. It separates creating the server from assigning it actions. It also makes handling complex workflows easier. Express servers have a \u201Cuse\u201D method. It allows the user to chain together multiple functions to act upon a request before a response is sent. These functions are called \u201Cmiddleware\u201D.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//example -- express</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//create server</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">server</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">require</span><span style="color: #C9D1D9">(\u201Cexpress\u201D)();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//register middleware</span></span>\n<span class="line"><span style="color: #C9D1D9">    server.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">request</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">response</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">next</span><span style="color: #C9D1D9">)</span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">...</span><span style="color: #8B949E">//process request</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #D2A8FF">next</span><span style="color: #C9D1D9">();</span><span style="color: #8B949E">//go to next middleware</span></span>\n<span class="line"><span style="color: #C9D1D9">    });</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//register middleware</span></span>\n<span class="line"><span style="color: #C9D1D9">    server.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">request</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">response</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">next</span><span style="color: #C9D1D9">)</span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">...</span><span style="color: #8B949E">//process request</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(request.endResponse){</span></span>\n<span class="line"><span style="color: #C9D1D9">        response.</span><span style="color: #D2A8FF">end</span><span style="color: #C9D1D9">();</span><span style="color: #8B949E">//end response</span></span>\n<span class="line"><span style="color: #C9D1D9">      }</span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">next</span><span style="color: #C9D1D9">();</span><span style="color: #8B949E">//go to next middleware</span></span>\n<span class="line"><span style="color: #C9D1D9">      }</span></span>\n<span class="line"><span style="color: #C9D1D9">    });</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//register middleware</span></span>\n<span class="line"><span style="color: #C9D1D9">    server.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">request</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">response</span><span style="color: #C9D1D9">)</span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">      response.</span><span style="color: #D2A8FF">end</span><span style="color: #C9D1D9">();</span><span style="color: #8B949E">//end response</span></span>\n<span class="line"><span style="color: #C9D1D9">    });</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//start server</span></span>\n<span class="line"><span style="color: #C9D1D9">    server.</span><span style="color: #D2A8FF">listen</span><span style="color: #C9D1D9">(</span><span style="color: #8B949E">/*listening address*/</span><span style="color: #C9D1D9">);</span></span></code></pre>\n<p>In addition, express adds additional features such as templating or routing which you may or may not need.</p>\n<h3 id="koa-2"><strong>Koa 2</strong></h3>\n<p><a href="https://github.com/koajs/koa">Koa</a> was created by the same people who create express and is considered to be its spiritual successor. It\u2019s also my server of choice, so you should <a href="http://koajs.com/">take a look at how it works</a> if you haven\u2019t already.</p>\n<p>Koa makes use of <a href="https://github.com/tc39/ecmascript-asyncawait">asynchronous functions</a> and adding middleware works similarly.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//example -- koa</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">server</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">require</span><span style="color: #C9D1D9">(\u201Ckoa\u201D)();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    server.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">context</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">next</span><span style="color: #C9D1D9">)</span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">...</span><span style="color: #8B949E">//process request</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #D2A8FF">next</span><span style="color: #C9D1D9">();</span><span style="color: #8B949E">//go to next middleware</span></span>\n<span class="line"><span style="color: #C9D1D9">    });</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    server.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">context</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">next</span><span style="color: #C9D1D9">)</span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">      context.res.</span><span style="color: #D2A8FF">end</span><span style="color: #C9D1D9">();</span><span style="color: #8B949E">//end response</span></span>\n<span class="line"><span style="color: #C9D1D9">    });</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//start server</span></span>\n<span class="line"><span style="color: #C9D1D9">    server.</span><span style="color: #D2A8FF">listen</span><span style="color: #C9D1D9">(</span><span style="color: #8B949E">/*listening address*/</span><span style="color: #C9D1D9">);</span></span></code></pre>\n<p>Koa also eschews built in routing and templating in favor of including them externally as middleware.</p>\n<p>Please be aware that Koa 2 is still in alpha, but since its API is so much cleaner than Koa 1\u2019s, <a href="https://www.smashingmagazine.com/2016/08/getting-started-koa-2-async-functions/">here\u2019s a tutorial that will help you jump right in</a>,</p>\n<h3 id="rill"><strong>Rill</strong></h3>\n<p><a href="https://github.com/rill-js/rill">Rill</a> is a <a href="https://medium.com/@pierceydylan/isomorphic-javascript-it-just-has-to-work-b9da5b0c8035#.l79bgqqwx">new server</a> that has basically the same API as KOA 2, but works in the browser as well as in node right out of the box.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//example -- rill</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">server</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">require</span><span style="color: #C9D1D9">(\u201Crill\u201D)();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    server.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">context</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">next</span><span style="color: #C9D1D9">)</span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">      context.res.</span><span style="color: #D2A8FF">end</span><span style="color: #C9D1D9">();</span><span style="color: #8B949E">//end response</span></span>\n<span class="line"><span style="color: #C9D1D9">    });</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    server.</span><span style="color: #D2A8FF">listen</span><span style="color: #C9D1D9">(</span><span style="color: #8B949E">/*listening address*/</span><span style="color: #C9D1D9">);</span></span></code></pre>\n<p>Rill may be overkill for my purposes, as it includes routing features that manipulate the web page, in addition to simply processing requests into responses.</p>\n<h3 id="flyweb"><strong>FlyWeb</strong></h3>\n<p>There\u2019s a basic pattern of that all of the other servers follow.</p>\n<p>1 create server</p>\n<p>2 add actions</p>\n<p>3 start server</p>\n<p>While rill or koa would have been a great starting point for a server in the browser, mozilla has taken a different route with their new FlyWeb servers.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//example -- flyweb</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//create and start server</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">server</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> window.navigator.</span><span style="color: #D2A8FF">publishServer</span><span style="color: #C9D1D9">(</span><span style="color: #8B949E">/*listening address*/</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//add actions</span></span>\n<span class="line"><span style="color: #C9D1D9">    server.</span><span style="color: #D2A8FF">onfetch</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">request</span><span style="color: #C9D1D9">)</span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">...</span><span style="color: #8B949E">//process request</span></span>\n<span class="line"><span style="color: #C9D1D9">      request.</span><span style="color: #D2A8FF">end</span><span style="color: #C9D1D9">();</span><span style="color: #8B949E">//end response</span></span>\n<span class="line"><span style="color: #C9D1D9">    };</span></span></code></pre>\n<p>This breaks the pattern of everything we\u2019ve seen so far! Here the server is created and started first. Only afterwards are actions actions added.</p>\n<p>Do we really need an entirely new way of doing basically the same thing?</p>\n<p><img src="https://cdn-images-1.medium.com/max/2000/1*9nMBMt-OugnruBr_M-WuEQ.png" alt="I know. It\u2019s in every article. Perhaps that says something to the importance of the situation. https://xkcd.com/license.html"><em>I know. It\u2019s in every article. Perhaps that says something to the importance of the situation. <a href="https://xkcd.com/license.html">https://xkcd.com/license.html</a></em></p>\n<h2 id="rillhttp-to-the-rescue"><strong>@Rill/http to the Rescue</strong></h2>\n<p><a href="https://medium.com/@pierceydylan/">The creators of rill are</a> pretty smart. When they created rill to work in the browser and in node, they realized the same thing I did at the beginning of this article \u2014 that dissimilar APIs are what make isomorphic code so difficult. So, to ensure that it works in both places, they created their own implementation of node\u2019s low level <a href="https://nodejs.org/api/http.html">http module</a>, <a href="https://github.com/rill-js/http">@rill/http</a>, that works in the browser. Because it follows the same API, it can be, with a few tweaks, swapped into other modules that depend upon http, and allow them to work in the browser.</p>\n<p>And that\u2019s exactly what I\u2019ve done with <a href="https://github.com/johnhenry/koa-2-browser">koa-2-browser</a>. It\u2019s literally koa that works in the browser! It\u2019s a light framework, so it integrates easily with other code. And because the changes are relatively minor, I\u2019m working on landing these changes in an upcoming release of Koa as to make it an isomorphic application out of the box. For now, you can take [nearly] all code that you wrote for a koa server in node, and transfer it to the browser.</p>\n<p>Revisiting the service worker example above, we have:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//example -- koa-2-browser</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">server</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">require</span><span style="color: #C9D1D9">(\u2018koa</span><span style="color: #FF7B72">-</span><span style="color: #79C0FF">2</span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9">browser\u2019)();</span></span>\n<span class="line"><span style="color: #C9D1D9">    server.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(</span><span style="color: #8B949E">/*middleware*/</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"><span style="color: #C9D1D9">    server.</span><span style="color: #D2A8FF">listen</span><span style="color: #C9D1D9">(()</span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9">{</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    self.</span><span style="color: #D2A8FF">onfetch</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">event</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> event.</span><span style="color: #D2A8FF">respondWith</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Promise</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">resolve</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">reject</span><span style="color: #C9D1D9">)</span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">response</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> server.</span><span style="color: #D2A8FF">respondTo</span><span style="color: #C9D1D9">(event.request,{browserResponse:</span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">});</span></span>\n<span class="line"><span style="color: #C9D1D9">          response.</span><span style="color: #D2A8FF">on</span><span style="color: #C9D1D9">(\u201Cfinish\u201D, (</span><span style="color: #FFA657">res</span><span style="color: #C9D1D9">)</span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #D2A8FF">resolve</span><span style="color: #C9D1D9">(res);</span></span>\n<span class="line"><span style="color: #C9D1D9">          });</span></span>\n<span class="line"><span style="color: #C9D1D9">        }));</span></span>\n<span class="line"><span style="color: #C9D1D9">      });</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    });</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">/*</span></span>\n<span class="line"><span style="color: #8B949E">    Note: server.RespondTo returns a response object</span></span>\n<span class="line"><span style="color: #8B949E">    (here identified as &quot;response&quot;)</span></span>\n<span class="line"><span style="color: #8B949E">    that is not a suitable resolution</span></span>\n<span class="line"><span style="color: #8B949E">    for the promise passed to event.respond with.</span></span>\n<span class="line"><span style="color: #8B949E">    Passing the &quot;browserResponse:true&quot; option</span></span>\n<span class="line"><span style="color: #8B949E">    will cause the &quot;finish&quot; event to be resolved</span></span>\n<span class="line"><span style="color: #8B949E">    with a suitable instance of window.Response</span></span>\n<span class="line"><span style="color: #8B949E">    (identified as &quot;res&quot;).</span></span>\n<span class="line"><span style="color: #8B949E">    */</span></span></code></pre>\n<p>It\u2019s important to realize that if we ever want to move towards isomorphic JavaScript, we should really shy away from competing standards within the language itself.</p>\n<p>And this is true for open source software as a whole; if two different APIs do the same thing, they should have the same structure. When we set out to create something new, we should pay attention to and work with others who are already doing similar things in other environments. The less time we spend re-inventing the wheel, the more time we have to invent new and exciting stuff (hover-wheel anyone?).</p>\n<h2 id="et-tu-buffer">Et tu, Buffer?</h2>\n<p>Servers aren\u2019t the only competing standards across environments.</p>\n<p><a href="https://nodejs.org/api/buffer.html">**Buffers</a>** are standardized in node and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer">**ArrayBuffers</a>** are standardized in the browser. They are both containers for binary data, but they work slightly differently. This is particularly annoying when attempting to create isomorphic applications. Even worse, some objects that have a \u201Cbuffer\u201D method, may return an ArrayBuffer instead, meaning that you may have to apply special logic to work with them in different environments.</p>\n<p>After many revisions, <a href="https://nodejs.org/api/stream.html">**Streams</a>** are close to full standardization in node. Unfortunately, <a href="https://streams.spec.whatwg.org/">**Browser Streams</a>**, an emerging standard, introduce new and incompatible parts of the API. Hopefully, the groups involved can come to an agreement at some point.</p>\n<p>There are some other similar topics like <strong>importing modules</strong>, but that situation is way more complicated to go into her.</p>\n<h2 id="bonus-library">Bonus Library!!!</h2>\n<p>But trying new things is fun! I actually prefer the <a href="https://github.com/flyweb/spec">way that FlyWeb creates servers</a>. Since it <a href="https://github.com/koajs/koa/issues/482">it appears that I\u2019m not the only one</a>, I\u2019ve created another library, <a href="https://github.com/johnhenry/flyweb-koa">flyweb-koa</a>. It allows you to use koa in a manner similar to the FlyWeb, while maintaining everything that koa has to offer.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">koa</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">require</span><span style="color: #C9D1D9">(\u201Ckoa</span><span style="color: #FF7B72">-</span><span style="color: #79C0FF">2</span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9">browser\u201D);</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//This also works with koa;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">publishServer</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">require</span><span style="color: #C9D1D9">(\u2018flyweb</span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9">koa\u2019)(\u2018koa\u2019);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">server</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">publishServer</span><span style="color: #C9D1D9">(</span><span style="color: #8B949E">/*listening address*/</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"><span style="color: #C9D1D9">    server.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(</span><span style="color: #8B949E">/*middleware*/</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"><span style="color: #C9D1D9">    server.</span><span style="color: #D2A8FF">onfetch</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">context</span><span style="color: #C9D1D9">)</span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">...</span></span>\n<span class="line"><span style="color: #C9D1D9">    };</span></span>\n<span class="line"><span style="color: #C9D1D9">    server.</span><span style="color: #D2A8FF">respondTo</span><span style="color: #C9D1D9">(</span><span style="color: #8B949E">/*request*/</span><span style="color: #C9D1D9">);</span></span></code></pre>' } };
  return render$1`${renderComponent($$result, "Layout", $$BlogPage, { "content": $$content }, { "default": () => render$1`<p><em>Originally Published: <a href="https://medium.com/@iamjohnhenry/browsers-servers-and-apis-2f7b10523f39">https://medium.com/@iamjohnhenry/browsers-servers-and-apis-2f7b10523f39</a></em></p><p>(Or “The path to Isomorphic Javascript”)</p><p>Note: Examples in the article were tested and run using <a href="https://nodejs.org/en/">node</a> and <a href="http://browserify.org/">browserify</a>.</p><p>If you’re a modern JavaScript enthusiast, you’re familiar with isomorphic code — the idea that you can write code that will run in both browser and node environments. Because JavaScript is a standardized language, you might think that this would be a trivial matter. The problem comes not in the language itself, but in the <a href="https://en.wikipedia.org/wiki/Application_programming_interface">API</a>s, which are specific to each environment and not standardized to play well with others.</p><p>Some actions in one environment do not make sense in the other and so they lack specific APIs. The browser isn’t given access to the file system, so the <a href="https://nodejs.org/api/fs.html">fs object</a> that comes with node would not make sense here. Conversely, when I was younger, I would make copious use of the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/alert">window.alert</a> for debugging, but a popup window won’t show up when you’re looking at a command line.</p><p>There are some actions, however, that can be done both within node and within the browser. One of the most interesting is creating servers.</p><h2 id="standardizing-servers"><strong>Standardizing Servers</strong></h2><p>Traditionally you wouldn’t set up a server within a browser, but considering what a server does — accepts requests and responds asynchronously, we can think of many use cases.</p><p>For instance, a server within a service worker would be able to intercept and respond to requests within the browser, without ever having to make a call across a network.</p><pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//example -- service worker</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">server</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> …;</span><span style="color: #8B949E">//define later</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    self.</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(‘fetch’, </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">event</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">     </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> event.</span><span style="color: #D2A8FF">respondWith</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Promise</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">resolve</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">reject</span><span style="color: #C9D1D9">)</span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9">{</span></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">response</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> server.</span><span style="color: #D2A8FF">respondTo</span><span style="color: #C9D1D9">(event.request);</span></span>
<span class="line"><span style="color: #C9D1D9">       response.</span><span style="color: #D2A8FF">on</span><span style="color: #C9D1D9">(“finish”, ()</span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9">{</span></span>
<span class="line"><span style="color: #C9D1D9">         </span><span style="color: #D2A8FF">resolve</span><span style="color: #C9D1D9">(req);</span></span>
<span class="line"><span style="color: #C9D1D9">       });</span></span>
<span class="line"><span style="color: #C9D1D9">     }));</span></span>
<span class="line"><span style="color: #C9D1D9">    });</span></span></code></pre><p>We’ll come back to this idea…</p><h2 id="competing-standards"><strong>Competing Standards</strong></h2><p>So, I want to put a server in the browser — what are my options? Not long ago, I learned about the new <a href="https://hacks.mozilla.org/2016/09/flyweb-pure-web-cross-device-interaction/">FlyWeb</a> standard that <a href="https://blog.mozilla.org/">Mozilla</a> is pushing for creating servers within the browser. I was pretty excited until i realized how different it was from anything that already existed in node.</p><p>Every other server that I’ve seen follows a particular pattern…</p><h3 id="http"><strong>HTTP</strong></h3><p>Node already has a built in simple API for creating servers via <a href="https://nodejs.org/api/http.html">http</a>.</p><pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//example -- http</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//create server and define action</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">server</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">require</span><span style="color: #C9D1D9">(“http”)</span></span>
<span class="line"><span style="color: #C9D1D9">     .</span><span style="color: #D2A8FF">createServer</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">request</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">response</span><span style="color: #C9D1D9">)</span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9">{</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">...</span><span style="color: #8B949E">//process request</span></span>
<span class="line"><span style="color: #C9D1D9">      response.</span><span style="color: #D2A8FF">end</span><span style="color: #C9D1D9">();</span><span style="color: #8B949E">//end response</span></span>
<span class="line"><span style="color: #C9D1D9">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//start server</span></span>
<span class="line"><span style="color: #C9D1D9">    server.</span><span style="color: #D2A8FF">listen</span><span style="color: #C9D1D9">(</span><span style="color: #8B949E">/*listening address*/</span><span style="color: #C9D1D9">);</span></span></code></pre><p>This might be considered a standard, but many modern server applications are built to handle complex workflows.</p><h3 id="express"><strong>Express</strong></h3><p>As the http module is quite simplistic, the <a href="https://github.com/expressjs/express">express</a> module is the de-facto standard for creating servers within node. It separates creating the server from assigning it actions. It also makes handling complex workflows easier. Express servers have a “use” method. It allows the user to chain together multiple functions to act upon a request before a response is sent. These functions are called “middleware”.</p><pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//example -- express</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//create server</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">server</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">require</span><span style="color: #C9D1D9">(“express”)();</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//register middleware</span></span>
<span class="line"><span style="color: #C9D1D9">    server.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">request</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">response</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">next</span><span style="color: #C9D1D9">)</span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9">{</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">...</span><span style="color: #8B949E">//process request</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #D2A8FF">next</span><span style="color: #C9D1D9">();</span><span style="color: #8B949E">//go to next middleware</span></span>
<span class="line"><span style="color: #C9D1D9">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//register middleware</span></span>
<span class="line"><span style="color: #C9D1D9">    server.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">request</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">response</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">next</span><span style="color: #C9D1D9">)</span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9">{</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">...</span><span style="color: #8B949E">//process request</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(request.endResponse){</span></span>
<span class="line"><span style="color: #C9D1D9">        response.</span><span style="color: #D2A8FF">end</span><span style="color: #C9D1D9">();</span><span style="color: #8B949E">//end response</span></span>
<span class="line"><span style="color: #C9D1D9">      }</span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9">{</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">next</span><span style="color: #C9D1D9">();</span><span style="color: #8B949E">//go to next middleware</span></span>
<span class="line"><span style="color: #C9D1D9">      }</span></span>
<span class="line"><span style="color: #C9D1D9">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//register middleware</span></span>
<span class="line"><span style="color: #C9D1D9">    server.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">request</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">response</span><span style="color: #C9D1D9">)</span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9">{</span></span>
<span class="line"><span style="color: #C9D1D9">      response.</span><span style="color: #D2A8FF">end</span><span style="color: #C9D1D9">();</span><span style="color: #8B949E">//end response</span></span>
<span class="line"><span style="color: #C9D1D9">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//start server</span></span>
<span class="line"><span style="color: #C9D1D9">    server.</span><span style="color: #D2A8FF">listen</span><span style="color: #C9D1D9">(</span><span style="color: #8B949E">/*listening address*/</span><span style="color: #C9D1D9">);</span></span></code></pre><p>In addition, express adds additional features such as templating or routing which you may or may not need.</p><h3 id="koa-2"><strong>Koa 2</strong></h3><p><a href="https://github.com/koajs/koa">Koa</a> was created by the same people who create express and is considered to be its spiritual successor. It’s also my server of choice, so you should <a href="http://koajs.com/">take a look at how it works</a> if you haven’t already.</p><p>Koa makes use of <a href="https://github.com/tc39/ecmascript-asyncawait">asynchronous functions</a> and adding middleware works similarly.</p><pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//example -- koa</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">server</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">require</span><span style="color: #C9D1D9">(“koa”)();</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    server.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">context</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">next</span><span style="color: #C9D1D9">)</span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9">{</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">...</span><span style="color: #8B949E">//process request</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #D2A8FF">next</span><span style="color: #C9D1D9">();</span><span style="color: #8B949E">//go to next middleware</span></span>
<span class="line"><span style="color: #C9D1D9">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    server.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">context</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">next</span><span style="color: #C9D1D9">)</span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9">{</span></span>
<span class="line"><span style="color: #C9D1D9">      context.res.</span><span style="color: #D2A8FF">end</span><span style="color: #C9D1D9">();</span><span style="color: #8B949E">//end response</span></span>
<span class="line"><span style="color: #C9D1D9">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//start server</span></span>
<span class="line"><span style="color: #C9D1D9">    server.</span><span style="color: #D2A8FF">listen</span><span style="color: #C9D1D9">(</span><span style="color: #8B949E">/*listening address*/</span><span style="color: #C9D1D9">);</span></span></code></pre><p>Koa also eschews built in routing and templating in favor of including them externally as middleware.</p><p>Please be aware that Koa 2 is still in alpha, but since its API is so much cleaner than Koa 1’s, <a href="https://www.smashingmagazine.com/2016/08/getting-started-koa-2-async-functions/">here’s a tutorial that will help you jump right in</a>,</p><h3 id="rill"><strong>Rill</strong></h3><p><a href="https://github.com/rill-js/rill">Rill</a> is a <a href="https://medium.com/@pierceydylan/isomorphic-javascript-it-just-has-to-work-b9da5b0c8035#.l79bgqqwx">new server</a> that has basically the same API as KOA 2, but works in the browser as well as in node right out of the box.</p><pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//example -- rill</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">server</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">require</span><span style="color: #C9D1D9">(“rill”)();</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    server.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">context</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">next</span><span style="color: #C9D1D9">)</span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9">{</span></span>
<span class="line"><span style="color: #C9D1D9">      context.res.</span><span style="color: #D2A8FF">end</span><span style="color: #C9D1D9">();</span><span style="color: #8B949E">//end response</span></span>
<span class="line"><span style="color: #C9D1D9">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    server.</span><span style="color: #D2A8FF">listen</span><span style="color: #C9D1D9">(</span><span style="color: #8B949E">/*listening address*/</span><span style="color: #C9D1D9">);</span></span></code></pre><p>Rill may be overkill for my purposes, as it includes routing features that manipulate the web page, in addition to simply processing requests into responses.</p><h3 id="flyweb"><strong>FlyWeb</strong></h3><p>There’s a basic pattern of that all of the other servers follow.</p><p>1 create server</p><p>2 add actions</p><p>3 start server</p><p>While rill or koa would have been a great starting point for a server in the browser, mozilla has taken a different route with their new FlyWeb servers.</p><pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//example -- flyweb</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//create and start server</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">server</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> window.navigator.</span><span style="color: #D2A8FF">publishServer</span><span style="color: #C9D1D9">(</span><span style="color: #8B949E">/*listening address*/</span><span style="color: #C9D1D9">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//add actions</span></span>
<span class="line"><span style="color: #C9D1D9">    server.</span><span style="color: #D2A8FF">onfetch</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">request</span><span style="color: #C9D1D9">)</span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9">{</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">...</span><span style="color: #8B949E">//process request</span></span>
<span class="line"><span style="color: #C9D1D9">      request.</span><span style="color: #D2A8FF">end</span><span style="color: #C9D1D9">();</span><span style="color: #8B949E">//end response</span></span>
<span class="line"><span style="color: #C9D1D9">    };</span></span></code></pre><p>This breaks the pattern of everything we’ve seen so far! Here the server is created and started first. Only afterwards are actions actions added.</p><p>Do we really need an entirely new way of doing basically the same thing?</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*9nMBMt-OugnruBr_M-WuEQ.png" alt="I know. It’s in every article. Perhaps that says something to the importance of the situation. https://xkcd.com/license.html"><em>I know. It’s in every article. Perhaps that says something to the importance of the situation. <a href="https://xkcd.com/license.html">https://xkcd.com/license.html</a></em></p><h2 id="rillhttp-to-the-rescue"><strong>@Rill/http to the Rescue</strong></h2><p><a href="https://medium.com/@pierceydylan/">The creators of rill are</a> pretty smart. When they created rill to work in the browser and in node, they realized the same thing I did at the beginning of this article — that dissimilar APIs are what make isomorphic code so difficult. So, to ensure that it works in both places, they created their own implementation of node’s low level <a href="https://nodejs.org/api/http.html">http module</a>, <a href="https://github.com/rill-js/http">@rill/http</a>, that works in the browser. Because it follows the same API, it can be, with a few tweaks, swapped into other modules that depend upon http, and allow them to work in the browser.</p><p>And that’s exactly what I’ve done with <a href="https://github.com/johnhenry/koa-2-browser">koa-2-browser</a>. It’s literally koa that works in the browser! It’s a light framework, so it integrates easily with other code. And because the changes are relatively minor, I’m working on landing these changes in an upcoming release of Koa as to make it an isomorphic application out of the box. For now, you can take [nearly] all code that you wrote for a koa server in node, and transfer it to the browser.</p><p>Revisiting the service worker example above, we have:</p><pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//example -- koa-2-browser</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">server</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">require</span><span style="color: #C9D1D9">(‘koa</span><span style="color: #FF7B72">-</span><span style="color: #79C0FF">2</span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9">browser’)();</span></span>
<span class="line"><span style="color: #C9D1D9">    server.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(</span><span style="color: #8B949E">/*middleware*/</span><span style="color: #C9D1D9">);</span></span>
<span class="line"><span style="color: #C9D1D9">    server.</span><span style="color: #D2A8FF">listen</span><span style="color: #C9D1D9">(()</span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9">{</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    self.</span><span style="color: #D2A8FF">onfetch</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">event</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> event.</span><span style="color: #D2A8FF">respondWith</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Promise</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">resolve</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">reject</span><span style="color: #C9D1D9">)</span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9">{</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">response</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> server.</span><span style="color: #D2A8FF">respondTo</span><span style="color: #C9D1D9">(event.request,{browserResponse:</span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">});</span></span>
<span class="line"><span style="color: #C9D1D9">          response.</span><span style="color: #D2A8FF">on</span><span style="color: #C9D1D9">(“finish”, (</span><span style="color: #FFA657">res</span><span style="color: #C9D1D9">)</span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9">{</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #D2A8FF">resolve</span><span style="color: #C9D1D9">(res);</span></span>
<span class="line"><span style="color: #C9D1D9">          });</span></span>
<span class="line"><span style="color: #C9D1D9">        }));</span></span>
<span class="line"><span style="color: #C9D1D9">      });</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">/*</span></span>
<span class="line"><span style="color: #8B949E">    Note: server.RespondTo returns a response object</span></span>
<span class="line"><span style="color: #8B949E">    (here identified as &quot;response&quot;)</span></span>
<span class="line"><span style="color: #8B949E">    that is not a suitable resolution</span></span>
<span class="line"><span style="color: #8B949E">    for the promise passed to event.respond with.</span></span>
<span class="line"><span style="color: #8B949E">    Passing the &quot;browserResponse:true&quot; option</span></span>
<span class="line"><span style="color: #8B949E">    will cause the &quot;finish&quot; event to be resolved</span></span>
<span class="line"><span style="color: #8B949E">    with a suitable instance of window.Response</span></span>
<span class="line"><span style="color: #8B949E">    (identified as &quot;res&quot;).</span></span>
<span class="line"><span style="color: #8B949E">    */</span></span></code></pre><p>It’s important to realize that if we ever want to move towards isomorphic JavaScript, we should really shy away from competing standards within the language itself.</p><p>And this is true for open source software as a whole; if two different APIs do the same thing, they should have the same structure. When we set out to create something new, we should pay attention to and work with others who are already doing similar things in other environments. The less time we spend re-inventing the wheel, the more time we have to invent new and exciting stuff (hover-wheel anyone?).</p><h2 id="et-tu-buffer">Et tu, Buffer?</h2><p>Servers aren’t the only competing standards across environments.</p><p><a href="https://nodejs.org/api/buffer.html">**Buffers</a>** are standardized in node and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer">**ArrayBuffers</a>** are standardized in the browser. They are both containers for binary data, but they work slightly differently. This is particularly annoying when attempting to create isomorphic applications. Even worse, some objects that have a “buffer” method, may return an ArrayBuffer instead, meaning that you may have to apply special logic to work with them in different environments.</p><p>After many revisions, <a href="https://nodejs.org/api/stream.html">**Streams</a>** are close to full standardization in node. Unfortunately, <a href="https://streams.spec.whatwg.org/">**Browser Streams</a>**, an emerging standard, introduce new and incompatible parts of the API. Hopefully, the groups involved can come to an agreement at some point.</p><p>There are some other similar topics like <strong>importing modules</strong>, but that situation is way more complicated to go into her.</p><h2 id="bonus-library">Bonus Library!!!</h2><p>But trying new things is fun! I actually prefer the <a href="https://github.com/flyweb/spec">way that FlyWeb creates servers</a>. Since it <a href="https://github.com/koajs/koa/issues/482">it appears that I’m not the only one</a>, I’ve created another library, <a href="https://github.com/johnhenry/flyweb-koa">flyweb-koa</a>. It allows you to use koa in a manner similar to the FlyWeb, while maintaining everything that koa has to offer.</p><pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">koa</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">require</span><span style="color: #C9D1D9">(“koa</span><span style="color: #FF7B72">-</span><span style="color: #79C0FF">2</span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9">browser”);</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//This also works with koa;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">publishServer</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">require</span><span style="color: #C9D1D9">(‘flyweb</span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9">koa’)(‘koa’);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">server</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">publishServer</span><span style="color: #C9D1D9">(</span><span style="color: #8B949E">/*listening address*/</span><span style="color: #C9D1D9">);</span></span>
<span class="line"><span style="color: #C9D1D9">    server.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(</span><span style="color: #8B949E">/*middleware*/</span><span style="color: #C9D1D9">);</span></span>
<span class="line"><span style="color: #C9D1D9">    server.</span><span style="color: #D2A8FF">onfetch</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">context</span><span style="color: #C9D1D9">)</span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9">{</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">...</span></span>
<span class="line"><span style="color: #C9D1D9">    };</span></span>
<span class="line"><span style="color: #C9D1D9">    server.</span><span style="color: #D2A8FF">respondTo</span><span style="color: #C9D1D9">(</span><span style="color: #8B949E">/*request*/</span><span style="color: #C9D1D9">);</span></span></code></pre>` })}`;
});

var _page3 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  metadata: metadata$5,
  frontmatter: frontmatter$5,
  $$metadata: $$metadata$b,
  'default': $$BrowsersServersAndApis
}, Symbol.toStringTag, { value: 'Module' }));

const metadata$4 = { "headers": [{ "depth": 2, "slug": "definitions", "text": "Definitions" }, { "depth": 2, "slug": "pre-requisites", "text": "Pre-Requisites" }, { "depth": 2, "slug": "method-1--code-server", "text": "Method 1 : code-server" }, { "depth": 2, "slug": "method-2--sshcode", "text": "Method 2 : sshcode" }, { "depth": 2, "slug": "method-3--visual-studio-code", "text": "Method 3 : Visual Studio Code" }, { "depth": 2, "slug": "next-steps", "text": "Next Steps" }], "source": "\nThese days, it is easy to set up a web server where you can program remotely using virtually any client device.\n\nIt is not difficult to do this using secure shell alone, but here are a few methods that can enhance this experience using the [Visual Studio Code](https://code.visualstudio.com) editor.\n\n## Definitions\n\n- CL = Command Line\n- FS = File System\n\n## Pre-Requisites\n\nThis tutorial assumes that you are already famaliar with using [secure shell (SSH)](https://en.wikipedia.org/wiki/Secure_Shell).\n\nYou _should_ at least be famaliar with logging into a remote server using [key-based authentication](https://www.ssh.com/ssh/key/).\n\n## Method 1 : code-server\n\n[Code-server](https://github.com/cdr/code-server) creates a web server with an instance of a web version of Visual Studio Code that you can access via a browser.\n\n0. Install code-server on your server.\n1. Access server's CL via SSH.\n2. On server, run `code-server <path to workspace or directory>`.\n3. You can access server's FS and CL through password-secured web interface at <serveraddress>:8443\n\n## Method 2 : sshcode\n\n[Sshcode](https://github.com/cdr/sshcode) works similarly to code-server (it's actually built on top of it) but uses a client program to set up the web server. Additionally, if you're using chrome, it will open a customized window with Visual Studio Code keybinding in tact.\n\n0. Install chrome and sshcode on client\n1. On client, run `sshcode <user>@<serveraddress>`\n2. Access server's FS and CL through chrome window.\n\n## Method 3 : Visual Studio Code\n\n0. Install [Visual Studio Code](https://code.visualstudio.com/) on client\n1. Install [Remote - SSH](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-ssh) extension\n2. From extenison menu, connect <user>@<serveraddress>\n3. Access server's FS and CL through Visual Studio Code\n4. From extension menu, tunnel ports from server to client.\n\n## Next Steps\n\nTo supplement the above methods, you may want to learn about:\n\n- mounting file remote folders locally and using any editor you want using [sshfs](https://github.com/libfuse/sshfs)\n- accessing other resources on your remote maching via [tunneling](https://www.ssh.com/ssh/tunneling/example).\n- mitigating unstable remote [mobile] connections with [mosh](https://mosh.org/).\n- customizations and pitfalls of above programs by reading their documetion.\n", "html": '<p>These days, it is easy to set up a web server where you can program remotely using virtually any client device.</p>\n<p>It is not difficult to do this using secure shell alone, but here are a few methods that can enhance this experience using the <a href="https://code.visualstudio.com">Visual Studio Code</a> editor.</p>\n<h2 id="definitions">Definitions</h2>\n<ul>\n<li>CL = Command Line</li>\n<li>FS = File System</li>\n</ul>\n<h2 id="pre-requisites">Pre-Requisites</h2>\n<p>This tutorial assumes that you are already famaliar with using <a href="https://en.wikipedia.org/wiki/Secure_Shell">secure shell (SSH)</a>.</p>\n<p>You <em>should</em> at least be famaliar with logging into a remote server using <a href="https://www.ssh.com/ssh/key/">key-based authentication</a>.</p>\n<h2 id="method-1--code-server">Method 1 : code-server</h2>\n<p><a href="https://github.com/cdr/code-server">Code-server</a> creates a web server with an instance of a web version of Visual Studio Code that you can access via a browser.</p>\n<ol start="0">\n<li>Install code-server on your server.</li>\n<li>Access server\u2019s CL via SSH.</li>\n<li>On server, run <code is:raw>code-server &#x3C;path to workspace or directory></code>.</li>\n<li>\nYou can access server\u2019s FS and CL through password-secured web interface at \n<serveraddress>\n:8443\n</li>\n</ol>\n<h2 id="method-2--sshcode">Method 2 : sshcode</h2>\n<p><a href="https://github.com/cdr/sshcode">Sshcode</a> works similarly to code-server (it\u2019s actually built on top of it) but uses a client program to set up the web server. Additionally, if you\u2019re using chrome, it will open a customized window with Visual Studio Code keybinding in tact.</p>\n<ol start="0">\n<li>Install chrome and sshcode on client</li>\n<li>On client, run <code is:raw>sshcode &#x3C;user>@&#x3C;serveraddress></code></li>\n<li>Access server\u2019s FS and CL through chrome window.</li>\n</ol>\n<h2 id="method-3--visual-studio-code">Method 3 : Visual Studio Code</h2>\n<ol start="0">\n<li>Install <a href="https://code.visualstudio.com/">Visual Studio Code</a> on client</li>\n<li>Install <a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-ssh">Remote - SSH</a> extension</li>\n<li>\nFrom extenison menu, connect \n<user>\n@\n<serveraddress>\n</li>\n<li>Access server\u2019s FS and CL through Visual Studio Code</li>\n<li>From extension menu, tunnel ports from server to client.</li>\n</ol>\n<h2 id="next-steps">Next Steps</h2>\n<p>To supplement the above methods, you may want to learn about:</p>\n<ul>\n<li>mounting file remote folders locally and using any editor you want using <a href="https://github.com/libfuse/sshfs">sshfs</a></li>\n<li>accessing other resources on your remote maching via <a href="https://www.ssh.com/ssh/tunneling/example">tunneling</a>.</li>\n<li>mitigating unstable remote [mobile] connections with <a href="https://mosh.org/">mosh</a>.</li>\n<li>customizations and pitfalls of above programs by reading their documetion.</li>\n</ul>' };
const frontmatter$4 = { "title": "VS Code on a Remote Server", "description": "How to run Visual Studio Code on a remote server", "date": "7 September 2019", "lastUpdate": "2 October 2019", "author": "John Henry", "heroImage": "/vendor/img/www.pexels.com/pixabay/view-of-street-from-a-glass-window.jpg", "alt": "Astro", "tags": ["programming", "experimenting"], "astro": { "headers": [{ "depth": 2, "slug": "definitions", "text": "Definitions" }, { "depth": 2, "slug": "pre-requisites", "text": "Pre-Requisites" }, { "depth": 2, "slug": "method-1--code-server", "text": "Method 1 : code-server" }, { "depth": 2, "slug": "method-2--sshcode", "text": "Method 2 : sshcode" }, { "depth": 2, "slug": "method-3--visual-studio-code", "text": "Method 3 : Visual Studio Code" }, { "depth": 2, "slug": "next-steps", "text": "Next Steps" }], "source": "\nThese days, it is easy to set up a web server where you can program remotely using virtually any client device.\n\nIt is not difficult to do this using secure shell alone, but here are a few methods that can enhance this experience using the [Visual Studio Code](https://code.visualstudio.com) editor.\n\n## Definitions\n\n- CL = Command Line\n- FS = File System\n\n## Pre-Requisites\n\nThis tutorial assumes that you are already famaliar with using [secure shell (SSH)](https://en.wikipedia.org/wiki/Secure_Shell).\n\nYou _should_ at least be famaliar with logging into a remote server using [key-based authentication](https://www.ssh.com/ssh/key/).\n\n## Method 1 : code-server\n\n[Code-server](https://github.com/cdr/code-server) creates a web server with an instance of a web version of Visual Studio Code that you can access via a browser.\n\n0. Install code-server on your server.\n1. Access server's CL via SSH.\n2. On server, run `code-server <path to workspace or directory>`.\n3. You can access server's FS and CL through password-secured web interface at <serveraddress>:8443\n\n## Method 2 : sshcode\n\n[Sshcode](https://github.com/cdr/sshcode) works similarly to code-server (it's actually built on top of it) but uses a client program to set up the web server. Additionally, if you're using chrome, it will open a customized window with Visual Studio Code keybinding in tact.\n\n0. Install chrome and sshcode on client\n1. On client, run `sshcode <user>@<serveraddress>`\n2. Access server's FS and CL through chrome window.\n\n## Method 3 : Visual Studio Code\n\n0. Install [Visual Studio Code](https://code.visualstudio.com/) on client\n1. Install [Remote - SSH](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-ssh) extension\n2. From extenison menu, connect <user>@<serveraddress>\n3. Access server's FS and CL through Visual Studio Code\n4. From extension menu, tunnel ports from server to client.\n\n## Next Steps\n\nTo supplement the above methods, you may want to learn about:\n\n- mounting file remote folders locally and using any editor you want using [sshfs](https://github.com/libfuse/sshfs)\n- accessing other resources on your remote maching via [tunneling](https://www.ssh.com/ssh/tunneling/example).\n- mitigating unstable remote [mobile] connections with [mosh](https://mosh.org/).\n- customizations and pitfalls of above programs by reading their documetion.\n", "html": '<p>These days, it is easy to set up a web server where you can program remotely using virtually any client device.</p>\n<p>It is not difficult to do this using secure shell alone, but here are a few methods that can enhance this experience using the <a href="https://code.visualstudio.com">Visual Studio Code</a> editor.</p>\n<h2 id="definitions">Definitions</h2>\n<ul>\n<li>CL = Command Line</li>\n<li>FS = File System</li>\n</ul>\n<h2 id="pre-requisites">Pre-Requisites</h2>\n<p>This tutorial assumes that you are already famaliar with using <a href="https://en.wikipedia.org/wiki/Secure_Shell">secure shell (SSH)</a>.</p>\n<p>You <em>should</em> at least be famaliar with logging into a remote server using <a href="https://www.ssh.com/ssh/key/">key-based authentication</a>.</p>\n<h2 id="method-1--code-server">Method 1 : code-server</h2>\n<p><a href="https://github.com/cdr/code-server">Code-server</a> creates a web server with an instance of a web version of Visual Studio Code that you can access via a browser.</p>\n<ol start="0">\n<li>Install code-server on your server.</li>\n<li>Access server\u2019s CL via SSH.</li>\n<li>On server, run <code is:raw>code-server &#x3C;path to workspace or directory></code>.</li>\n<li>\nYou can access server\u2019s FS and CL through password-secured web interface at \n<serveraddress>\n:8443\n</li>\n</ol>\n<h2 id="method-2--sshcode">Method 2 : sshcode</h2>\n<p><a href="https://github.com/cdr/sshcode">Sshcode</a> works similarly to code-server (it\u2019s actually built on top of it) but uses a client program to set up the web server. Additionally, if you\u2019re using chrome, it will open a customized window with Visual Studio Code keybinding in tact.</p>\n<ol start="0">\n<li>Install chrome and sshcode on client</li>\n<li>On client, run <code is:raw>sshcode &#x3C;user>@&#x3C;serveraddress></code></li>\n<li>Access server\u2019s FS and CL through chrome window.</li>\n</ol>\n<h2 id="method-3--visual-studio-code">Method 3 : Visual Studio Code</h2>\n<ol start="0">\n<li>Install <a href="https://code.visualstudio.com/">Visual Studio Code</a> on client</li>\n<li>Install <a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-ssh">Remote - SSH</a> extension</li>\n<li>\nFrom extenison menu, connect \n<user>\n@\n<serveraddress>\n</li>\n<li>Access server\u2019s FS and CL through Visual Studio Code</li>\n<li>From extension menu, tunnel ports from server to client.</li>\n</ol>\n<h2 id="next-steps">Next Steps</h2>\n<p>To supplement the above methods, you may want to learn about:</p>\n<ul>\n<li>mounting file remote folders locally and using any editor you want using <a href="https://github.com/libfuse/sshfs">sshfs</a></li>\n<li>accessing other resources on your remote maching via <a href="https://www.ssh.com/ssh/tunneling/example">tunneling</a>.</li>\n<li>mitigating unstable remote [mobile] connections with <a href="https://mosh.org/">mosh</a>.</li>\n<li>customizations and pitfalls of above programs by reading their documetion.</li>\n</ul>' } };
const $$metadata$a = createMetadata("/src/pages/blog/posts/vscode-on-remote-server.md", { modules: [{ module: $$module1$1, specifier: "../../../components/BlogPage.astro", assert: {} }], hydratedComponents: [], clientOnlyComponents: [], hydrationDirectives: /* @__PURE__ */ new Set([]), hoisted: [] });
const $$Astro$a = createAstro("/src/pages/blog/posts/vscode-on-remote-server.md", "https://astro.build", "file:///home/runner/work/johnhenry.github.io/johnhenry.github.io/");
const $$VscodeOnRemoteServer = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$a, $$props, $$slots);
  Astro2.self = $$VscodeOnRemoteServer;
  const $$content = { "title": "VS Code on a Remote Server", "description": "How to run Visual Studio Code on a remote server", "date": "7 September 2019", "lastUpdate": "2 October 2019", "author": "John Henry", "heroImage": "/vendor/img/www.pexels.com/pixabay/view-of-street-from-a-glass-window.jpg", "alt": "Astro", "tags": ["programming", "experimenting"], "astro": { "headers": [{ "depth": 2, "slug": "definitions", "text": "Definitions" }, { "depth": 2, "slug": "pre-requisites", "text": "Pre-Requisites" }, { "depth": 2, "slug": "method-1--code-server", "text": "Method 1 : code-server" }, { "depth": 2, "slug": "method-2--sshcode", "text": "Method 2 : sshcode" }, { "depth": 2, "slug": "method-3--visual-studio-code", "text": "Method 3 : Visual Studio Code" }, { "depth": 2, "slug": "next-steps", "text": "Next Steps" }], "source": "\nThese days, it is easy to set up a web server where you can program remotely using virtually any client device.\n\nIt is not difficult to do this using secure shell alone, but here are a few methods that can enhance this experience using the [Visual Studio Code](https://code.visualstudio.com) editor.\n\n## Definitions\n\n- CL = Command Line\n- FS = File System\n\n## Pre-Requisites\n\nThis tutorial assumes that you are already famaliar with using [secure shell (SSH)](https://en.wikipedia.org/wiki/Secure_Shell).\n\nYou _should_ at least be famaliar with logging into a remote server using [key-based authentication](https://www.ssh.com/ssh/key/).\n\n## Method 1 : code-server\n\n[Code-server](https://github.com/cdr/code-server) creates a web server with an instance of a web version of Visual Studio Code that you can access via a browser.\n\n0. Install code-server on your server.\n1. Access server's CL via SSH.\n2. On server, run `code-server <path to workspace or directory>`.\n3. You can access server's FS and CL through password-secured web interface at <serveraddress>:8443\n\n## Method 2 : sshcode\n\n[Sshcode](https://github.com/cdr/sshcode) works similarly to code-server (it's actually built on top of it) but uses a client program to set up the web server. Additionally, if you're using chrome, it will open a customized window with Visual Studio Code keybinding in tact.\n\n0. Install chrome and sshcode on client\n1. On client, run `sshcode <user>@<serveraddress>`\n2. Access server's FS and CL through chrome window.\n\n## Method 3 : Visual Studio Code\n\n0. Install [Visual Studio Code](https://code.visualstudio.com/) on client\n1. Install [Remote - SSH](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-ssh) extension\n2. From extenison menu, connect <user>@<serveraddress>\n3. Access server's FS and CL through Visual Studio Code\n4. From extension menu, tunnel ports from server to client.\n\n## Next Steps\n\nTo supplement the above methods, you may want to learn about:\n\n- mounting file remote folders locally and using any editor you want using [sshfs](https://github.com/libfuse/sshfs)\n- accessing other resources on your remote maching via [tunneling](https://www.ssh.com/ssh/tunneling/example).\n- mitigating unstable remote [mobile] connections with [mosh](https://mosh.org/).\n- customizations and pitfalls of above programs by reading their documetion.\n", "html": '<p>These days, it is easy to set up a web server where you can program remotely using virtually any client device.</p>\n<p>It is not difficult to do this using secure shell alone, but here are a few methods that can enhance this experience using the <a href="https://code.visualstudio.com">Visual Studio Code</a> editor.</p>\n<h2 id="definitions">Definitions</h2>\n<ul>\n<li>CL = Command Line</li>\n<li>FS = File System</li>\n</ul>\n<h2 id="pre-requisites">Pre-Requisites</h2>\n<p>This tutorial assumes that you are already famaliar with using <a href="https://en.wikipedia.org/wiki/Secure_Shell">secure shell (SSH)</a>.</p>\n<p>You <em>should</em> at least be famaliar with logging into a remote server using <a href="https://www.ssh.com/ssh/key/">key-based authentication</a>.</p>\n<h2 id="method-1--code-server">Method 1 : code-server</h2>\n<p><a href="https://github.com/cdr/code-server">Code-server</a> creates a web server with an instance of a web version of Visual Studio Code that you can access via a browser.</p>\n<ol start="0">\n<li>Install code-server on your server.</li>\n<li>Access server\u2019s CL via SSH.</li>\n<li>On server, run <code is:raw>code-server &#x3C;path to workspace or directory></code>.</li>\n<li>\nYou can access server\u2019s FS and CL through password-secured web interface at \n<serveraddress>\n:8443\n</li>\n</ol>\n<h2 id="method-2--sshcode">Method 2 : sshcode</h2>\n<p><a href="https://github.com/cdr/sshcode">Sshcode</a> works similarly to code-server (it\u2019s actually built on top of it) but uses a client program to set up the web server. Additionally, if you\u2019re using chrome, it will open a customized window with Visual Studio Code keybinding in tact.</p>\n<ol start="0">\n<li>Install chrome and sshcode on client</li>\n<li>On client, run <code is:raw>sshcode &#x3C;user>@&#x3C;serveraddress></code></li>\n<li>Access server\u2019s FS and CL through chrome window.</li>\n</ol>\n<h2 id="method-3--visual-studio-code">Method 3 : Visual Studio Code</h2>\n<ol start="0">\n<li>Install <a href="https://code.visualstudio.com/">Visual Studio Code</a> on client</li>\n<li>Install <a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-ssh">Remote - SSH</a> extension</li>\n<li>\nFrom extenison menu, connect \n<user>\n@\n<serveraddress>\n</li>\n<li>Access server\u2019s FS and CL through Visual Studio Code</li>\n<li>From extension menu, tunnel ports from server to client.</li>\n</ol>\n<h2 id="next-steps">Next Steps</h2>\n<p>To supplement the above methods, you may want to learn about:</p>\n<ul>\n<li>mounting file remote folders locally and using any editor you want using <a href="https://github.com/libfuse/sshfs">sshfs</a></li>\n<li>accessing other resources on your remote maching via <a href="https://www.ssh.com/ssh/tunneling/example">tunneling</a>.</li>\n<li>mitigating unstable remote [mobile] connections with <a href="https://mosh.org/">mosh</a>.</li>\n<li>customizations and pitfalls of above programs by reading their documetion.</li>\n</ul>' } };
  return render$1`${renderComponent($$result, "Layout", $$BlogPage, { "content": $$content }, { "default": () => render$1`<p>These days, it is easy to set up a web server where you can program remotely using virtually any client device.</p><p>It is not difficult to do this using secure shell alone, but here are a few methods that can enhance this experience using the <a href="https://code.visualstudio.com">Visual Studio Code</a> editor.</p><h2 id="definitions">Definitions</h2><ul>
<li>CL = Command Line</li>
<li>FS = File System</li>
</ul><h2 id="pre-requisites">Pre-Requisites</h2><p>This tutorial assumes that you are already famaliar with using <a href="https://en.wikipedia.org/wiki/Secure_Shell">secure shell (SSH)</a>.</p><p>You <em>should</em> at least be famaliar with logging into a remote server using <a href="https://www.ssh.com/ssh/key/">key-based authentication</a>.</p><h2 id="method-1--code-server">Method 1 : code-server</h2><p><a href="https://github.com/cdr/code-server">Code-server</a> creates a web server with an instance of a web version of Visual Studio Code that you can access via a browser.</p><ol start="0">
<li>Install code-server on your server.</li>
<li>Access server’s CL via SSH.</li>
<li>On server, run <code>code-server &#x3C;path to workspace or directory></code>.</li>
<li>
You can access server’s FS and CL through password-secured web interface at 
<serveraddress>
:8443
</serveraddress></li>
</ol><h2 id="method-2--sshcode">Method 2 : sshcode</h2><p><a href="https://github.com/cdr/sshcode">Sshcode</a> works similarly to code-server (it’s actually built on top of it) but uses a client program to set up the web server. Additionally, if you’re using chrome, it will open a customized window with Visual Studio Code keybinding in tact.</p><ol start="0">
<li>Install chrome and sshcode on client</li>
<li>On client, run <code>sshcode &#x3C;user>@&#x3C;serveraddress></code></li>
<li>Access server’s FS and CL through chrome window.</li>
</ol><h2 id="method-3--visual-studio-code">Method 3 : Visual Studio Code</h2><ol start="0">
<li>Install <a href="https://code.visualstudio.com/">Visual Studio Code</a> on client</li>
<li>Install <a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-ssh">Remote - SSH</a> extension</li>
<li>
From extenison menu, connect 
<user>
@
<serveraddress>
</serveraddress></user></li>
<li>Access server’s FS and CL through Visual Studio Code</li>
<li>From extension menu, tunnel ports from server to client.</li>
</ol><h2 id="next-steps">Next Steps</h2><p>To supplement the above methods, you may want to learn about:</p><ul>
<li>mounting file remote folders locally and using any editor you want using <a href="https://github.com/libfuse/sshfs">sshfs</a></li>
<li>accessing other resources on your remote maching via <a href="https://www.ssh.com/ssh/tunneling/example">tunneling</a>.</li>
<li>mitigating unstable remote [mobile] connections with <a href="https://mosh.org/">mosh</a>.</li>
<li>customizations and pitfalls of above programs by reading their documetion.</li>
</ul>` })}`;
});

var _page4 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  metadata: metadata$4,
  frontmatter: frontmatter$4,
  $$metadata: $$metadata$a,
  'default': $$VscodeOnRemoteServer
}, Symbol.toStringTag, { value: 'Module' }));

const metadata$3 = { "headers": [{ "depth": 3, "slug": "installing-angular", "text": "Installing Angular" }, { "depth": 3, "slug": "bootstrapping", "text": "Bootstrapping" }, { "depth": 3, "slug": "binding", "text": "Binding" }, { "depth": 3, "slug": "a-few-more-directives", "text": "A Few More Directives" }, { "depth": 3, "slug": "conclusion", "text": "Conclusion" }], "source": '\n_Originally Published: https://medium.com/@iamjohnhenry/angular-done-right-part-1-binding-and-directives-6112a43aa1dc_\n\nAuthor\u2019s Note: While I no longer program heavily using angular, in favor of using smaller, more modular libraries, the reader will find the ideas presented in this series useful.\n\nAngular is hard, right?\n\nWell, one thing that\u2019s for sure is that Angular is a massive. It\u2019s a full application framework made of components including directives, controllers, services, and much much more. It\u2019s shrouded in strange new concepts such as \u201C_Dependency Injection_\u201D and \u201C_Transclausion_\u201D. Despite it\u2019s overall allure, anyone creating an angular app for the first time must accept that he or she is in for a steep learning curve due before being able to build anything fun or useful.\n\nThat\u2019s the approach that most tutorials on the web take. In this series we take different approach. We\u2019ll gradually build upon the most basic concepts in angular; first introducing the bare minimum needed to build an application and building upon it as we go along.\n\n### Installing Angular\n\nWe\u2019ll start with a very basic HTML page. Create a basic html page with the following code inside:\n\n```html\n<!DOCTYPE html>\n<html>\n  <body></body>\n</html>\n```\n\nThe next thing that you need to do is to download and include the angular.js file. You can download it directly from the [Angular JS homepage](https://angularjs.org/), or, if you perfer, using the [Bower package manager](http://bower.io/). I won\u2019t go into specifics, on how exactly how to do that, but having made it this far, I doubt that you\u2019ll have any trouble :).\n\nOnce you\u2019ve included the angular file in your app, your file should look something like this:\n\n```html\n    <!doctype html>\n    <html>\n     <body>\n     <script src=\u201Dpath/to/angular.js\u201D><\/script>\n     </body>\n    </html>\n```\n\n### Bootstrapping\n\n**Bootstraping** is a term used for connecting your angular application to the web page. Don\u2019t get it confused with the popular [UI framework](http://getbootstrap.com/).\n\nThere are two ways of bootstrapping an application. The easiest and most reliable way is to add the **ng-app \\***directive\\* to an html element. That element and all of it\u2019s children will be part of your angular app.\n\n\u201C_What are directives?_\u201D, you must be wondering\u2026 Well, for now, just think of them as attibues that you can add to your html that let your app interact with angular. We\u2019ll learn more about directives very soon, and in a later part of the series.\n\nWe could put it on any element \u2014 the **<body>** tag; a **<div>** tag \u2014 but lets go ahead and put it on the top level \u201Chtml\u201D element. This way, the entire page will be available to our application.\n\n```html\n    <!doctype html>\n    <html ng-app>\n     <body>\n     <script src=\u201Dpath/to/angular.js\u201D><\/script>\n     </body>\n    </html>\n```\n\nThere is another way to bootstrap your application (it actually uses the [angular.bootstrap](https://docs.angularjs.org/api/ng/function/angular.bootstrap) method!), but I have found it to be much more error-prone, so I wont at least into that method\u2026 at least not today.\n\n### Binding\n\n\u2014 ng-model and ng-bind\n\nNow that you\u2019ve set up the application, binding data is the simplest thing that you can do in angular. Try modifying your html to look like this:\n\n```html\n    <!doctype html>\n    <html ng-app>\n     <body >\n     <input ng-model=\u201Dinput\u201D> <span ng-bind=\u201Dinput\u201D></span>\n     <script src=\u201Dpath/to/angular.js\u201D><\/script>\n     </body>\n    </html>\n```\n\nYou\u2019ve added two new directives. The** ng-model \\***directives\\* allows you to bind a variable to a standard html element that receives user input. This can be either an input element, a textarea element, or select element. (If you\u2019re familiar with jQuery, this might remind you of the [val](http://api.jquery.com/val/) method.)\n\nThe **ng-bind** directive does something similar, but but it works by replacing the inner html of any html element with the bound variable. (If you\u2019re familiar with jQuery, this might remind you of the [html](http://api.jquery.com/html/) method.)\n\n**input** is the name that we have chosen for the name of the variable to be bound, but we could have chosen pretty much anything.\n\nNote: the variables exist within the scope of the application and not on the page. A variable defined within javascript will not be bound. We\u2019ll learn exactly \u201Cwhere\u201D these variables live in a later chapter on controllers and scope.\n\n```html\n<script>\n  var input = \u201CSorry, I\u2019m not available for binding.\u201D\n<\/script>\n```\n\nYou can also use the double curly braces syntax, `\u201C[[input]]\u201D`, instead of **ng-bind** to add binding anywhere without the need for an HTML element:\n\n```html\n    <!doctype html>\n    <html ng-app>\n     <body >\n     <input ng-model=\u201Dinput\u201D><span>[[input]]</span>\n     <script src=\u201Dpath/to/angular.js\u201D><\/script>\n     </body>\n    </html>\n```\n\nIf you open the page in a browser, you will see an empty box, and when you type box, you\u2019ll see that it\u2019s bound to the span right next to it.\n\nThis might be useful for, say, a form:\n\n```html\n<form>\n  Name:<input ng-model="\u201Duser.name\u201D" ng-required="\u201Dtrue\u201D" />\n  <br />\n  Favorite Color:\n  <select ng-model="\u201Duser.color\u201D">\n    <option value="\u201Dnot" available\u201D>N/A</option>\n    <option value="\u201Dred\u201D">Red</option>\n    <option value="\u201Dgreen\u201D">Green</option>\n    <option value="\u201Dblue\u201D">Blue</option>\n  </select>\n  <div style="\u201Dbackground-color:[[user.color]]\u201D"></div>\n  <button>Submit</button>\n</form>\n<p>\n  Your name is\n  <b ng-bind="\u201Duser.name" || \u2018Blank\u2019\u201D></b>\n  and your favorite color is\n  <b ng-bind="\u201Duser.color\u201D"></b>.\n</p>\n```\n\nNotice that the **user.name** and the **user.color** properties are bound to other parts of the form.\n\nYou may have spotted the **ng-required** directive on the input tag. That\u2019s prevents a form from being submitted unless the required value is filled out. Try submitting the form below without typing in a name. (Be Warned: This may not work in all browsers.)\n\nIt\u2019s also useful to be able to perform calculations on the page. Here\u2019s a simple tip calculator. It a bit off (check out those rounding errors!), but it starts to show you what you can do with an angular app.\n\n```html\n    Bill: <input ng-model=\u201Dbill\u201D>\n    <br/>\n    Tip Percentage: <input type=\u201Dnumber\u201D ng-model=\u201Dtip\u201D> %\n    <br/>\n    Total: $<span ng-bind=\u201D(1 + (tip/100) ) * bill\u201D></span>\n```\n\n### A Few More Directives\n\n\u2014 Showing and Hiding Elements with ng-if, ng-show, ng-hide\n\nConveniently, attaching the **ng-model** to a checkbox or radio allows you to bind to its **checked** property rather than it\u2019s value.\n\n```html\n<input type="\u201Dcheckbox\u201D" ng-init="\u201Dchecked" ="true\u201D" ng-model="\u201Dchecked\u201D" />\n<span ng-show="\u201Dchecked\u201D">The box is checked</span>\n<span ng-hide="\u201Dchecked\u201D">The box is not checked</span>\n<span ng-if="\u201Dchecked\u201D"> :) </span>\n```\n\nAnd we can use this fact to demonstrate a few new directives.\n\nAlthough I\u2019m not using for it\u2019s single recommended [use case](https://docs.angularjs.org/api/ng/directive/ngInit), the **ng-init**\ndirective allows you to initialize a variable\u2019s value \u2014 otherwise it starts off as empty.\n\nThe **ng-if**, **ng-show**, and **ng-hide** directives work to show and hide an element. The difference is that **ng-if** will remove an element from the page, if not visible, while **ng-show** and **ng-hide** will simply hide it.\n\n\u2014 Repeating Elements with ng-repeat\n\nA final useful directive is the **ng-repeat** directive that allows one to iterate through collections.\n\n```html\n<ul\n  ng-init="\u201Dbeatles"\n  ="["\n  [name\n  :\n  \u2018John\u2019],\n  [name\n  :\n  \u2018Paul\u2019],\n  [name\n  :\n  \u2018George\u2019],\n  [name\n  :\n  \u2018Ringo\u2019]\n  ]\u201D\n>\n  <li ng-repeat="\u201Dbeatle" in beatles\u201D>\n    <span ng-bind="\u201D$index\u201D"></span>.<span ng-bind="\u201Dbeatle.name\u201D"></span>\n  </li>\n</ul>\n```\n\nYou\u2019ll notice that in addition to the **_beatle_** property, the **ng-repeat **directive also provides a **_$index_** property that can also be bound to the application. This **_$index_ **is equal to the index of the iteration.\n\n\u2014 Modifying data with filters\n\nJust for the heck of it, let\u2019s take a sneak preview of filters.\n\n```html\n<li ng-repeat="\u201Dbeatle" in beatles | orderBy:\u2019name\u2019\u201D>\n  <span ng-bind="\u201D$index\u201D"></span>.<span ng-bind="\u201Dbeatle.name\u201D"></span>\n</li>\n```\n\n**orderBy** may look similar to a directive, but it\u2019s not, it\u2019s a filter. Filters work within certain directives to modify the data within them. This particular one changes the order of items within an array. You can read more about this and other available filters [here](https://docs.angularjs.org/api/ng/filter). Like directives, filters are one of the nine or so components that make up an angular app and can be woven together with the others to make powerful applications.\n\nFilters, like Directives, are one of the core components of angular. And we\u2019ll learn a lot more about them in an upcoming entry.\n\n### Conclusion\n\nWith just few basic built built in components, you can start creating interesting apps with barely any code. I\u2019ll be back soon with another update to this series, but in the meantime, start using Angular to make something cool!\n', "html": '<p><em>Originally Published: <a href="https://medium.com/@iamjohnhenry/angular-done-right-part-1-binding-and-directives-6112a43aa1dc">https://medium.com/@iamjohnhenry/angular-done-right-part-1-binding-and-directives-6112a43aa1dc</a></em></p>\n<p>Author\u2019s Note: While I no longer program heavily using angular, in favor of using smaller, more modular libraries, the reader will find the ideas presented in this series useful.</p>\n<p>Angular is hard, right?</p>\n<p>Well, one thing that\u2019s for sure is that Angular is a massive. It\u2019s a full application framework made of components including directives, controllers, services, and much much more. It\u2019s shrouded in strange new concepts such as \u201C<em>Dependency Injection</em>\u201D and \u201C<em>Transclausion</em>\u201D. Despite it\u2019s overall allure, anyone creating an angular app for the first time must accept that he or she is in for a steep learning curve due before being able to build anything fun or useful.</p>\n<p>That\u2019s the approach that most tutorials on the web take. In this series we take different approach. We\u2019ll gradually build upon the most basic concepts in angular; first introducing the bare minimum needed to build an application and building upon it as we go along.</p>\n<h3 id="installing-angular">Installing Angular</h3>\n<p>We\u2019ll start with a very basic HTML page. Create a basic html page with the following code inside:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>The next thing that you need to do is to download and include the angular.js file. You can download it directly from the <a href="https://angularjs.org/">Angular JS homepage</a>, or, if you perfer, using the <a href="http://bower.io/">Bower package manager</a>. I won\u2019t go into specifics, on how exactly how to do that, but having made it this far, I doubt that you\u2019ll have any trouble :).</p>\n<p>Once you\u2019ve included the angular file in your app, your file should look something like this:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">    &lt;!</span><span style="color: #7EE787">doctype</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">     &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">     &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">\u201Dpath/to/angular.js\u201D</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">     &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<h3 id="bootstrapping">Bootstrapping</h3>\n<p><strong>Bootstraping</strong> is a term used for connecting your angular application to the web page. Don\u2019t get it confused with the popular <a href="http://getbootstrap.com/">UI framework</a>.</p>\n<p>There are two ways of bootstrapping an application. The easiest and most reliable way is to add the <strong>ng-app *</strong>directive* to an html element. That element and all of it\u2019s children will be part of your angular app.</p>\n<p>\u201C<em>What are directives?</em>\u201D, you must be wondering\u2026 Well, for now, just think of them as attibues that you can add to your html that let your app interact with angular. We\u2019ll learn more about directives very soon, and in a later part of the series.</p>\n<p>We could put it on any element \u2014 the <strong><body></strong> tag; a <strong><div></strong> tag \u2014 but lets go ahead and put it on the top level \u201Chtml\u201D element. This way, the entire page will be available to our application.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">    &lt;!</span><span style="color: #7EE787">doctype</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-app</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">     &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">     &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">\u201Dpath/to/angular.js\u201D</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">     &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>There is another way to bootstrap your application (it actually uses the <a href="https://docs.angularjs.org/api/ng/function/angular.bootstrap">angular.bootstrap</a> method!), but I have found it to be much more error-prone, so I wont at least into that method\u2026 at least not today.</p>\n<h3 id="binding">Binding</h3>\n<p>\u2014 ng-model and ng-bind</p>\n<p>Now that you\u2019ve set up the application, binding data is the simplest thing that you can do in angular. Try modifying your html to look like this:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">    &lt;!</span><span style="color: #7EE787">doctype</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-app</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">     &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9"> &gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">     &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-model</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">\u201Dinput\u201D</span><span style="color: #C9D1D9">&gt; &lt;</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-bind</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">\u201Dinput\u201D</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">     &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">\u201Dpath/to/angular.js\u201D</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">     &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>You\u2019ve added two new directives. The** ng-model ***directives* allows you to bind a variable to a standard html element that receives user input. This can be either an input element, a textarea element, or select element. (If you\u2019re familiar with jQuery, this might remind you of the <a href="http://api.jquery.com/val/">val</a> method.)</p>\n<p>The <strong>ng-bind</strong> directive does something similar, but but it works by replacing the inner html of any html element with the bound variable. (If you\u2019re familiar with jQuery, this might remind you of the <a href="http://api.jquery.com/html/">html</a> method.)</p>\n<p><strong>input</strong> is the name that we have chosen for the name of the variable to be bound, but we could have chosen pretty much anything.</p>\n<p>Note: the variables exist within the scope of the application and not on the page. A variable defined within javascript will not be bound. We\u2019ll learn exactly \u201Cwhere\u201D these variables live in a later chapter on controllers and scope.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">var</span><span style="color: #C9D1D9"> input </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> \u201CSorry, </span><span style="color: #79C0FF">I</span><span style="color: #C9D1D9">\u2019m not available for binding.\u201D</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>You can also use the double curly braces syntax, <code is:raw>\u201C[[input]]\u201D</code>, instead of <strong>ng-bind</strong> to add binding anywhere without the need for an HTML element:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">    &lt;!</span><span style="color: #7EE787">doctype</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-app</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">     &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9"> &gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">     &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-model</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">\u201Dinput\u201D</span><span style="color: #C9D1D9">&gt;&lt;</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;[[input]]&lt;/</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">     &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">\u201Dpath/to/angular.js\u201D</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">     &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>If you open the page in a browser, you will see an empty box, and when you type box, you\u2019ll see that it\u2019s bound to the span right next to it.</p>\n<p>This might be useful for, say, a form:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  Name:&lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-model</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;\u201Duser.name\u201D&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-required</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;\u201Dtrue\u201D&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">br</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  Favorite Color:</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">select</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-model</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;\u201Duser.color\u201D&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">option</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">value</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;\u201Dnot&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">available\u201D</span><span style="color: #C9D1D9">&gt;N/A&lt;/</span><span style="color: #7EE787">option</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">option</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">value</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;\u201Dred\u201D&quot;</span><span style="color: #C9D1D9">&gt;Red&lt;/</span><span style="color: #7EE787">option</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">option</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">value</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;\u201Dgreen\u201D&quot;</span><span style="color: #C9D1D9">&gt;Green&lt;/</span><span style="color: #7EE787">option</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">option</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">value</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;\u201Dblue\u201D&quot;</span><span style="color: #C9D1D9">&gt;Blue&lt;/</span><span style="color: #7EE787">option</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">select</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">style</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;</span><span style="color: #C9D1D9">\u201Dbackground-color:[[user.color]]\u201D&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9">&gt;Submit&lt;/</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  Your name is</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">b</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-bind</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;\u201Duser.name&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">||</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">\u2018Blank\u2019\u201D</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">b</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  and your favorite color is</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">b</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-bind</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;\u201Duser.color\u201D&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">b</span><span style="color: #C9D1D9">&gt;.</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Notice that the <strong>user.name</strong> and the <strong>user.color</strong> properties are bound to other parts of the form.</p>\n<p>You may have spotted the <strong>ng-required</strong> directive on the input tag. That\u2019s prevents a form from being submitted unless the required value is filled out. Try submitting the form below without typing in a name. (Be Warned: This may not work in all browsers.)</p>\n<p>It\u2019s also useful to be able to perform calculations on the page. Here\u2019s a simple tip calculator. It a bit off (check out those rounding errors!), but it starts to show you what you can do with an angular app.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">    Bill: &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-model</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">\u201Dbill\u201D</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">br</span><span style="color: #C9D1D9">/&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    Tip Percentage: &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">\u201Dnumber\u201D</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-model</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">\u201Dtip\u201D</span><span style="color: #C9D1D9">&gt; %</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">br</span><span style="color: #C9D1D9">/&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    Total: $&lt;</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-bind</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">\u201D(1</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">+</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">(tip</span><span style="color: #FFA198; font-style: italic">/100)</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">)</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">*</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">bill\u201D</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<h3 id="a-few-more-directives">A Few More Directives</h3>\n<p>\u2014 Showing and Hiding Elements with ng-if, ng-show, ng-hide</p>\n<p>Conveniently, attaching the <strong>ng-model</strong> to a checkbox or radio allows you to bind to its <strong>checked</strong> property rather than it\u2019s value.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;\u201Dcheckbox\u201D&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-init</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;\u201Dchecked&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198; font-style: italic">=</span><span style="color: #A5D6FF">&quot;true\u201D&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-model</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;\u201Dchecked\u201D&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-show</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;\u201Dchecked\u201D&quot;</span><span style="color: #C9D1D9">&gt;The box is checked&lt;/</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-hide</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;\u201Dchecked\u201D&quot;</span><span style="color: #C9D1D9">&gt;The box is not checked&lt;/</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-if</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;\u201Dchecked\u201D&quot;</span><span style="color: #C9D1D9">&gt; :) &lt;/</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>And we can use this fact to demonstrate a few new directives.</p>\n<p>Although I\u2019m not using for it\u2019s single recommended <a href="https://docs.angularjs.org/api/ng/directive/ngInit">use case</a>, the <strong>ng-init</strong>\ndirective allows you to initialize a variable\u2019s value \u2014 otherwise it starts off as empty.</p>\n<p>The <strong>ng-if</strong>, <strong>ng-show</strong>, and <strong>ng-hide</strong> directives work to show and hide an element. The difference is that <strong>ng-if</strong> will remove an element from the page, if not visible, while <strong>ng-show</strong> and <strong>ng-hide</strong> will simply hide it.</p>\n<p>\u2014 Repeating Elements with ng-repeat</p>\n<p>A final useful directive is the <strong>ng-repeat</strong> directive that allows one to iterate through collections.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">ul</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">ng-init</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;\u201Dbeatles&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">  =</span><span style="color: #A5D6FF">&quot;[&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">[name</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">:</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">\u2018John\u2019],</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">[name</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">:</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">\u2018Paul\u2019],</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">[name</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">:</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">\u2018George\u2019],</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">[name</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">:</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">\u2018Ringo\u2019]</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">]\u201D</span></span>\n<span class="line"><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-repeat</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;\u201Dbeatle&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">in</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">beatles\u201D</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-bind</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;\u201D$index\u201D&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;.&lt;</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-bind</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;\u201Dbeatle.name\u201D&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">ul</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>You\u2019ll notice that in addition to the <strong><em>beatle</em></strong> property, the **ng-repeat **directive also provides a <strong><em>$index</em></strong> property that can also be bound to the application. This **<em>$index</em> **is equal to the index of the iteration.</p>\n<p>\u2014 Modifying data with filters</p>\n<p>Just for the heck of it, let\u2019s take a sneak preview of filters.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-repeat</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;\u201Dbeatle&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">in</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">beatles</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">|</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">orderBy:\u2019name\u2019\u201D</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-bind</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;\u201D$index\u201D&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;.&lt;</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-bind</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;\u201Dbeatle.name\u201D&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p><strong>orderBy</strong> may look similar to a directive, but it\u2019s not, it\u2019s a filter. Filters work within certain directives to modify the data within them. This particular one changes the order of items within an array. You can read more about this and other available filters <a href="https://docs.angularjs.org/api/ng/filter">here</a>. Like directives, filters are one of the nine or so components that make up an angular app and can be woven together with the others to make powerful applications.</p>\n<p>Filters, like Directives, are one of the core components of angular. And we\u2019ll learn a lot more about them in an upcoming entry.</p>\n<h3 id="conclusion">Conclusion</h3>\n<p>With just few basic built built in components, you can start creating interesting apps with barely any code. I\u2019ll be back soon with another update to this series, but in the meantime, start using Angular to make something cool!</p>' };
const frontmatter$3 = { "title": "Angular Done Right: Part 1", "description": "The first in a series on how to use Angular 1.0", "date": "1 August 2013", "author": "John Henry", "heroImage": "/vendor/img/www.pexels.com/pixabay/view-of-street-from-a-glass-window.jpg", "alt": "Astro", "tags": ["programming"], "astro": { "headers": [{ "depth": 3, "slug": "installing-angular", "text": "Installing Angular" }, { "depth": 3, "slug": "bootstrapping", "text": "Bootstrapping" }, { "depth": 3, "slug": "binding", "text": "Binding" }, { "depth": 3, "slug": "a-few-more-directives", "text": "A Few More Directives" }, { "depth": 3, "slug": "conclusion", "text": "Conclusion" }], "source": '\n_Originally Published: https://medium.com/@iamjohnhenry/angular-done-right-part-1-binding-and-directives-6112a43aa1dc_\n\nAuthor\u2019s Note: While I no longer program heavily using angular, in favor of using smaller, more modular libraries, the reader will find the ideas presented in this series useful.\n\nAngular is hard, right?\n\nWell, one thing that\u2019s for sure is that Angular is a massive. It\u2019s a full application framework made of components including directives, controllers, services, and much much more. It\u2019s shrouded in strange new concepts such as \u201C_Dependency Injection_\u201D and \u201C_Transclausion_\u201D. Despite it\u2019s overall allure, anyone creating an angular app for the first time must accept that he or she is in for a steep learning curve due before being able to build anything fun or useful.\n\nThat\u2019s the approach that most tutorials on the web take. In this series we take different approach. We\u2019ll gradually build upon the most basic concepts in angular; first introducing the bare minimum needed to build an application and building upon it as we go along.\n\n### Installing Angular\n\nWe\u2019ll start with a very basic HTML page. Create a basic html page with the following code inside:\n\n```html\n<!DOCTYPE html>\n<html>\n  <body></body>\n</html>\n```\n\nThe next thing that you need to do is to download and include the angular.js file. You can download it directly from the [Angular JS homepage](https://angularjs.org/), or, if you perfer, using the [Bower package manager](http://bower.io/). I won\u2019t go into specifics, on how exactly how to do that, but having made it this far, I doubt that you\u2019ll have any trouble :).\n\nOnce you\u2019ve included the angular file in your app, your file should look something like this:\n\n```html\n    <!doctype html>\n    <html>\n     <body>\n     <script src=\u201Dpath/to/angular.js\u201D><\/script>\n     </body>\n    </html>\n```\n\n### Bootstrapping\n\n**Bootstraping** is a term used for connecting your angular application to the web page. Don\u2019t get it confused with the popular [UI framework](http://getbootstrap.com/).\n\nThere are two ways of bootstrapping an application. The easiest and most reliable way is to add the **ng-app \\***directive\\* to an html element. That element and all of it\u2019s children will be part of your angular app.\n\n\u201C_What are directives?_\u201D, you must be wondering\u2026 Well, for now, just think of them as attibues that you can add to your html that let your app interact with angular. We\u2019ll learn more about directives very soon, and in a later part of the series.\n\nWe could put it on any element \u2014 the **<body>** tag; a **<div>** tag \u2014 but lets go ahead and put it on the top level \u201Chtml\u201D element. This way, the entire page will be available to our application.\n\n```html\n    <!doctype html>\n    <html ng-app>\n     <body>\n     <script src=\u201Dpath/to/angular.js\u201D><\/script>\n     </body>\n    </html>\n```\n\nThere is another way to bootstrap your application (it actually uses the [angular.bootstrap](https://docs.angularjs.org/api/ng/function/angular.bootstrap) method!), but I have found it to be much more error-prone, so I wont at least into that method\u2026 at least not today.\n\n### Binding\n\n\u2014 ng-model and ng-bind\n\nNow that you\u2019ve set up the application, binding data is the simplest thing that you can do in angular. Try modifying your html to look like this:\n\n```html\n    <!doctype html>\n    <html ng-app>\n     <body >\n     <input ng-model=\u201Dinput\u201D> <span ng-bind=\u201Dinput\u201D></span>\n     <script src=\u201Dpath/to/angular.js\u201D><\/script>\n     </body>\n    </html>\n```\n\nYou\u2019ve added two new directives. The** ng-model \\***directives\\* allows you to bind a variable to a standard html element that receives user input. This can be either an input element, a textarea element, or select element. (If you\u2019re familiar with jQuery, this might remind you of the [val](http://api.jquery.com/val/) method.)\n\nThe **ng-bind** directive does something similar, but but it works by replacing the inner html of any html element with the bound variable. (If you\u2019re familiar with jQuery, this might remind you of the [html](http://api.jquery.com/html/) method.)\n\n**input** is the name that we have chosen for the name of the variable to be bound, but we could have chosen pretty much anything.\n\nNote: the variables exist within the scope of the application and not on the page. A variable defined within javascript will not be bound. We\u2019ll learn exactly \u201Cwhere\u201D these variables live in a later chapter on controllers and scope.\n\n```html\n<script>\n  var input = \u201CSorry, I\u2019m not available for binding.\u201D\n<\/script>\n```\n\nYou can also use the double curly braces syntax, `\u201C[[input]]\u201D`, instead of **ng-bind** to add binding anywhere without the need for an HTML element:\n\n```html\n    <!doctype html>\n    <html ng-app>\n     <body >\n     <input ng-model=\u201Dinput\u201D><span>[[input]]</span>\n     <script src=\u201Dpath/to/angular.js\u201D><\/script>\n     </body>\n    </html>\n```\n\nIf you open the page in a browser, you will see an empty box, and when you type box, you\u2019ll see that it\u2019s bound to the span right next to it.\n\nThis might be useful for, say, a form:\n\n```html\n<form>\n  Name:<input ng-model="\u201Duser.name\u201D" ng-required="\u201Dtrue\u201D" />\n  <br />\n  Favorite Color:\n  <select ng-model="\u201Duser.color\u201D">\n    <option value="\u201Dnot" available\u201D>N/A</option>\n    <option value="\u201Dred\u201D">Red</option>\n    <option value="\u201Dgreen\u201D">Green</option>\n    <option value="\u201Dblue\u201D">Blue</option>\n  </select>\n  <div style="\u201Dbackground-color:[[user.color]]\u201D"></div>\n  <button>Submit</button>\n</form>\n<p>\n  Your name is\n  <b ng-bind="\u201Duser.name" || \u2018Blank\u2019\u201D></b>\n  and your favorite color is\n  <b ng-bind="\u201Duser.color\u201D"></b>.\n</p>\n```\n\nNotice that the **user.name** and the **user.color** properties are bound to other parts of the form.\n\nYou may have spotted the **ng-required** directive on the input tag. That\u2019s prevents a form from being submitted unless the required value is filled out. Try submitting the form below without typing in a name. (Be Warned: This may not work in all browsers.)\n\nIt\u2019s also useful to be able to perform calculations on the page. Here\u2019s a simple tip calculator. It a bit off (check out those rounding errors!), but it starts to show you what you can do with an angular app.\n\n```html\n    Bill: <input ng-model=\u201Dbill\u201D>\n    <br/>\n    Tip Percentage: <input type=\u201Dnumber\u201D ng-model=\u201Dtip\u201D> %\n    <br/>\n    Total: $<span ng-bind=\u201D(1 + (tip/100) ) * bill\u201D></span>\n```\n\n### A Few More Directives\n\n\u2014 Showing and Hiding Elements with ng-if, ng-show, ng-hide\n\nConveniently, attaching the **ng-model** to a checkbox or radio allows you to bind to its **checked** property rather than it\u2019s value.\n\n```html\n<input type="\u201Dcheckbox\u201D" ng-init="\u201Dchecked" ="true\u201D" ng-model="\u201Dchecked\u201D" />\n<span ng-show="\u201Dchecked\u201D">The box is checked</span>\n<span ng-hide="\u201Dchecked\u201D">The box is not checked</span>\n<span ng-if="\u201Dchecked\u201D"> :) </span>\n```\n\nAnd we can use this fact to demonstrate a few new directives.\n\nAlthough I\u2019m not using for it\u2019s single recommended [use case](https://docs.angularjs.org/api/ng/directive/ngInit), the **ng-init**\ndirective allows you to initialize a variable\u2019s value \u2014 otherwise it starts off as empty.\n\nThe **ng-if**, **ng-show**, and **ng-hide** directives work to show and hide an element. The difference is that **ng-if** will remove an element from the page, if not visible, while **ng-show** and **ng-hide** will simply hide it.\n\n\u2014 Repeating Elements with ng-repeat\n\nA final useful directive is the **ng-repeat** directive that allows one to iterate through collections.\n\n```html\n<ul\n  ng-init="\u201Dbeatles"\n  ="["\n  [name\n  :\n  \u2018John\u2019],\n  [name\n  :\n  \u2018Paul\u2019],\n  [name\n  :\n  \u2018George\u2019],\n  [name\n  :\n  \u2018Ringo\u2019]\n  ]\u201D\n>\n  <li ng-repeat="\u201Dbeatle" in beatles\u201D>\n    <span ng-bind="\u201D$index\u201D"></span>.<span ng-bind="\u201Dbeatle.name\u201D"></span>\n  </li>\n</ul>\n```\n\nYou\u2019ll notice that in addition to the **_beatle_** property, the **ng-repeat **directive also provides a **_$index_** property that can also be bound to the application. This **_$index_ **is equal to the index of the iteration.\n\n\u2014 Modifying data with filters\n\nJust for the heck of it, let\u2019s take a sneak preview of filters.\n\n```html\n<li ng-repeat="\u201Dbeatle" in beatles | orderBy:\u2019name\u2019\u201D>\n  <span ng-bind="\u201D$index\u201D"></span>.<span ng-bind="\u201Dbeatle.name\u201D"></span>\n</li>\n```\n\n**orderBy** may look similar to a directive, but it\u2019s not, it\u2019s a filter. Filters work within certain directives to modify the data within them. This particular one changes the order of items within an array. You can read more about this and other available filters [here](https://docs.angularjs.org/api/ng/filter). Like directives, filters are one of the nine or so components that make up an angular app and can be woven together with the others to make powerful applications.\n\nFilters, like Directives, are one of the core components of angular. And we\u2019ll learn a lot more about them in an upcoming entry.\n\n### Conclusion\n\nWith just few basic built built in components, you can start creating interesting apps with barely any code. I\u2019ll be back soon with another update to this series, but in the meantime, start using Angular to make something cool!\n', "html": '<p><em>Originally Published: <a href="https://medium.com/@iamjohnhenry/angular-done-right-part-1-binding-and-directives-6112a43aa1dc">https://medium.com/@iamjohnhenry/angular-done-right-part-1-binding-and-directives-6112a43aa1dc</a></em></p>\n<p>Author\u2019s Note: While I no longer program heavily using angular, in favor of using smaller, more modular libraries, the reader will find the ideas presented in this series useful.</p>\n<p>Angular is hard, right?</p>\n<p>Well, one thing that\u2019s for sure is that Angular is a massive. It\u2019s a full application framework made of components including directives, controllers, services, and much much more. It\u2019s shrouded in strange new concepts such as \u201C<em>Dependency Injection</em>\u201D and \u201C<em>Transclausion</em>\u201D. Despite it\u2019s overall allure, anyone creating an angular app for the first time must accept that he or she is in for a steep learning curve due before being able to build anything fun or useful.</p>\n<p>That\u2019s the approach that most tutorials on the web take. In this series we take different approach. We\u2019ll gradually build upon the most basic concepts in angular; first introducing the bare minimum needed to build an application and building upon it as we go along.</p>\n<h3 id="installing-angular">Installing Angular</h3>\n<p>We\u2019ll start with a very basic HTML page. Create a basic html page with the following code inside:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>The next thing that you need to do is to download and include the angular.js file. You can download it directly from the <a href="https://angularjs.org/">Angular JS homepage</a>, or, if you perfer, using the <a href="http://bower.io/">Bower package manager</a>. I won\u2019t go into specifics, on how exactly how to do that, but having made it this far, I doubt that you\u2019ll have any trouble :).</p>\n<p>Once you\u2019ve included the angular file in your app, your file should look something like this:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">    &lt;!</span><span style="color: #7EE787">doctype</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">     &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">     &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">\u201Dpath/to/angular.js\u201D</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">     &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<h3 id="bootstrapping">Bootstrapping</h3>\n<p><strong>Bootstraping</strong> is a term used for connecting your angular application to the web page. Don\u2019t get it confused with the popular <a href="http://getbootstrap.com/">UI framework</a>.</p>\n<p>There are two ways of bootstrapping an application. The easiest and most reliable way is to add the <strong>ng-app *</strong>directive* to an html element. That element and all of it\u2019s children will be part of your angular app.</p>\n<p>\u201C<em>What are directives?</em>\u201D, you must be wondering\u2026 Well, for now, just think of them as attibues that you can add to your html that let your app interact with angular. We\u2019ll learn more about directives very soon, and in a later part of the series.</p>\n<p>We could put it on any element \u2014 the <strong><body></strong> tag; a <strong><div></strong> tag \u2014 but lets go ahead and put it on the top level \u201Chtml\u201D element. This way, the entire page will be available to our application.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">    &lt;!</span><span style="color: #7EE787">doctype</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-app</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">     &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">     &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">\u201Dpath/to/angular.js\u201D</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">     &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>There is another way to bootstrap your application (it actually uses the <a href="https://docs.angularjs.org/api/ng/function/angular.bootstrap">angular.bootstrap</a> method!), but I have found it to be much more error-prone, so I wont at least into that method\u2026 at least not today.</p>\n<h3 id="binding">Binding</h3>\n<p>\u2014 ng-model and ng-bind</p>\n<p>Now that you\u2019ve set up the application, binding data is the simplest thing that you can do in angular. Try modifying your html to look like this:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">    &lt;!</span><span style="color: #7EE787">doctype</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-app</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">     &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9"> &gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">     &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-model</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">\u201Dinput\u201D</span><span style="color: #C9D1D9">&gt; &lt;</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-bind</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">\u201Dinput\u201D</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">     &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">\u201Dpath/to/angular.js\u201D</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">     &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>You\u2019ve added two new directives. The** ng-model ***directives* allows you to bind a variable to a standard html element that receives user input. This can be either an input element, a textarea element, or select element. (If you\u2019re familiar with jQuery, this might remind you of the <a href="http://api.jquery.com/val/">val</a> method.)</p>\n<p>The <strong>ng-bind</strong> directive does something similar, but but it works by replacing the inner html of any html element with the bound variable. (If you\u2019re familiar with jQuery, this might remind you of the <a href="http://api.jquery.com/html/">html</a> method.)</p>\n<p><strong>input</strong> is the name that we have chosen for the name of the variable to be bound, but we could have chosen pretty much anything.</p>\n<p>Note: the variables exist within the scope of the application and not on the page. A variable defined within javascript will not be bound. We\u2019ll learn exactly \u201Cwhere\u201D these variables live in a later chapter on controllers and scope.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">var</span><span style="color: #C9D1D9"> input </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> \u201CSorry, </span><span style="color: #79C0FF">I</span><span style="color: #C9D1D9">\u2019m not available for binding.\u201D</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>You can also use the double curly braces syntax, <code is:raw>\u201C[[input]]\u201D</code>, instead of <strong>ng-bind</strong> to add binding anywhere without the need for an HTML element:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">    &lt;!</span><span style="color: #7EE787">doctype</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-app</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">     &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9"> &gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">     &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-model</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">\u201Dinput\u201D</span><span style="color: #C9D1D9">&gt;&lt;</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;[[input]]&lt;/</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">     &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">\u201Dpath/to/angular.js\u201D</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">     &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>If you open the page in a browser, you will see an empty box, and when you type box, you\u2019ll see that it\u2019s bound to the span right next to it.</p>\n<p>This might be useful for, say, a form:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  Name:&lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-model</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;\u201Duser.name\u201D&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-required</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;\u201Dtrue\u201D&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">br</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  Favorite Color:</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">select</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-model</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;\u201Duser.color\u201D&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">option</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">value</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;\u201Dnot&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">available\u201D</span><span style="color: #C9D1D9">&gt;N/A&lt;/</span><span style="color: #7EE787">option</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">option</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">value</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;\u201Dred\u201D&quot;</span><span style="color: #C9D1D9">&gt;Red&lt;/</span><span style="color: #7EE787">option</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">option</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">value</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;\u201Dgreen\u201D&quot;</span><span style="color: #C9D1D9">&gt;Green&lt;/</span><span style="color: #7EE787">option</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">option</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">value</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;\u201Dblue\u201D&quot;</span><span style="color: #C9D1D9">&gt;Blue&lt;/</span><span style="color: #7EE787">option</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">select</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">style</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;</span><span style="color: #C9D1D9">\u201Dbackground-color:[[user.color]]\u201D&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9">&gt;Submit&lt;/</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  Your name is</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">b</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-bind</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;\u201Duser.name&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">||</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">\u2018Blank\u2019\u201D</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">b</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  and your favorite color is</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">b</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-bind</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;\u201Duser.color\u201D&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">b</span><span style="color: #C9D1D9">&gt;.</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Notice that the <strong>user.name</strong> and the <strong>user.color</strong> properties are bound to other parts of the form.</p>\n<p>You may have spotted the <strong>ng-required</strong> directive on the input tag. That\u2019s prevents a form from being submitted unless the required value is filled out. Try submitting the form below without typing in a name. (Be Warned: This may not work in all browsers.)</p>\n<p>It\u2019s also useful to be able to perform calculations on the page. Here\u2019s a simple tip calculator. It a bit off (check out those rounding errors!), but it starts to show you what you can do with an angular app.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">    Bill: &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-model</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">\u201Dbill\u201D</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">br</span><span style="color: #C9D1D9">/&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    Tip Percentage: &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">\u201Dnumber\u201D</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-model</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">\u201Dtip\u201D</span><span style="color: #C9D1D9">&gt; %</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">br</span><span style="color: #C9D1D9">/&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    Total: $&lt;</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-bind</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">\u201D(1</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">+</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">(tip</span><span style="color: #FFA198; font-style: italic">/100)</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">)</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">*</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">bill\u201D</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<h3 id="a-few-more-directives">A Few More Directives</h3>\n<p>\u2014 Showing and Hiding Elements with ng-if, ng-show, ng-hide</p>\n<p>Conveniently, attaching the <strong>ng-model</strong> to a checkbox or radio allows you to bind to its <strong>checked</strong> property rather than it\u2019s value.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;\u201Dcheckbox\u201D&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-init</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;\u201Dchecked&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198; font-style: italic">=</span><span style="color: #A5D6FF">&quot;true\u201D&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-model</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;\u201Dchecked\u201D&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-show</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;\u201Dchecked\u201D&quot;</span><span style="color: #C9D1D9">&gt;The box is checked&lt;/</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-hide</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;\u201Dchecked\u201D&quot;</span><span style="color: #C9D1D9">&gt;The box is not checked&lt;/</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-if</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;\u201Dchecked\u201D&quot;</span><span style="color: #C9D1D9">&gt; :) &lt;/</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>And we can use this fact to demonstrate a few new directives.</p>\n<p>Although I\u2019m not using for it\u2019s single recommended <a href="https://docs.angularjs.org/api/ng/directive/ngInit">use case</a>, the <strong>ng-init</strong>\ndirective allows you to initialize a variable\u2019s value \u2014 otherwise it starts off as empty.</p>\n<p>The <strong>ng-if</strong>, <strong>ng-show</strong>, and <strong>ng-hide</strong> directives work to show and hide an element. The difference is that <strong>ng-if</strong> will remove an element from the page, if not visible, while <strong>ng-show</strong> and <strong>ng-hide</strong> will simply hide it.</p>\n<p>\u2014 Repeating Elements with ng-repeat</p>\n<p>A final useful directive is the <strong>ng-repeat</strong> directive that allows one to iterate through collections.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">ul</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">ng-init</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;\u201Dbeatles&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">  =</span><span style="color: #A5D6FF">&quot;[&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">[name</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">:</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">\u2018John\u2019],</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">[name</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">:</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">\u2018Paul\u2019],</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">[name</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">:</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">\u2018George\u2019],</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">[name</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">:</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">\u2018Ringo\u2019]</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">]\u201D</span></span>\n<span class="line"><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-repeat</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;\u201Dbeatle&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">in</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">beatles\u201D</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-bind</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;\u201D$index\u201D&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;.&lt;</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-bind</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;\u201Dbeatle.name\u201D&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">ul</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>You\u2019ll notice that in addition to the <strong><em>beatle</em></strong> property, the **ng-repeat **directive also provides a <strong><em>$index</em></strong> property that can also be bound to the application. This **<em>$index</em> **is equal to the index of the iteration.</p>\n<p>\u2014 Modifying data with filters</p>\n<p>Just for the heck of it, let\u2019s take a sneak preview of filters.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-repeat</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;\u201Dbeatle&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">in</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">beatles</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">|</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">orderBy:\u2019name\u2019\u201D</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-bind</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;\u201D$index\u201D&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;.&lt;</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-bind</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;\u201Dbeatle.name\u201D&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p><strong>orderBy</strong> may look similar to a directive, but it\u2019s not, it\u2019s a filter. Filters work within certain directives to modify the data within them. This particular one changes the order of items within an array. You can read more about this and other available filters <a href="https://docs.angularjs.org/api/ng/filter">here</a>. Like directives, filters are one of the nine or so components that make up an angular app and can be woven together with the others to make powerful applications.</p>\n<p>Filters, like Directives, are one of the core components of angular. And we\u2019ll learn a lot more about them in an upcoming entry.</p>\n<h3 id="conclusion">Conclusion</h3>\n<p>With just few basic built built in components, you can start creating interesting apps with barely any code. I\u2019ll be back soon with another update to this series, but in the meantime, start using Angular to make something cool!</p>' } };
const $$metadata$9 = createMetadata("/src/pages/blog/posts/angular-done-right.md", { modules: [{ module: $$module1$1, specifier: "../../../components/BlogPage.astro", assert: {} }], hydratedComponents: [], clientOnlyComponents: [], hydrationDirectives: /* @__PURE__ */ new Set([]), hoisted: [] });
const $$Astro$9 = createAstro("/src/pages/blog/posts/angular-done-right.md", "https://astro.build", "file:///home/runner/work/johnhenry.github.io/johnhenry.github.io/");
const $$AngularDoneRight = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$9, $$props, $$slots);
  Astro2.self = $$AngularDoneRight;
  const $$content = { "title": "Angular Done Right: Part 1", "description": "The first in a series on how to use Angular 1.0", "date": "1 August 2013", "author": "John Henry", "heroImage": "/vendor/img/www.pexels.com/pixabay/view-of-street-from-a-glass-window.jpg", "alt": "Astro", "tags": ["programming"], "astro": { "headers": [{ "depth": 3, "slug": "installing-angular", "text": "Installing Angular" }, { "depth": 3, "slug": "bootstrapping", "text": "Bootstrapping" }, { "depth": 3, "slug": "binding", "text": "Binding" }, { "depth": 3, "slug": "a-few-more-directives", "text": "A Few More Directives" }, { "depth": 3, "slug": "conclusion", "text": "Conclusion" }], "source": '\n_Originally Published: https://medium.com/@iamjohnhenry/angular-done-right-part-1-binding-and-directives-6112a43aa1dc_\n\nAuthor\u2019s Note: While I no longer program heavily using angular, in favor of using smaller, more modular libraries, the reader will find the ideas presented in this series useful.\n\nAngular is hard, right?\n\nWell, one thing that\u2019s for sure is that Angular is a massive. It\u2019s a full application framework made of components including directives, controllers, services, and much much more. It\u2019s shrouded in strange new concepts such as \u201C_Dependency Injection_\u201D and \u201C_Transclausion_\u201D. Despite it\u2019s overall allure, anyone creating an angular app for the first time must accept that he or she is in for a steep learning curve due before being able to build anything fun or useful.\n\nThat\u2019s the approach that most tutorials on the web take. In this series we take different approach. We\u2019ll gradually build upon the most basic concepts in angular; first introducing the bare minimum needed to build an application and building upon it as we go along.\n\n### Installing Angular\n\nWe\u2019ll start with a very basic HTML page. Create a basic html page with the following code inside:\n\n```html\n<!DOCTYPE html>\n<html>\n  <body></body>\n</html>\n```\n\nThe next thing that you need to do is to download and include the angular.js file. You can download it directly from the [Angular JS homepage](https://angularjs.org/), or, if you perfer, using the [Bower package manager](http://bower.io/). I won\u2019t go into specifics, on how exactly how to do that, but having made it this far, I doubt that you\u2019ll have any trouble :).\n\nOnce you\u2019ve included the angular file in your app, your file should look something like this:\n\n```html\n    <!doctype html>\n    <html>\n     <body>\n     <script src=\u201Dpath/to/angular.js\u201D><\/script>\n     </body>\n    </html>\n```\n\n### Bootstrapping\n\n**Bootstraping** is a term used for connecting your angular application to the web page. Don\u2019t get it confused with the popular [UI framework](http://getbootstrap.com/).\n\nThere are two ways of bootstrapping an application. The easiest and most reliable way is to add the **ng-app \\***directive\\* to an html element. That element and all of it\u2019s children will be part of your angular app.\n\n\u201C_What are directives?_\u201D, you must be wondering\u2026 Well, for now, just think of them as attibues that you can add to your html that let your app interact with angular. We\u2019ll learn more about directives very soon, and in a later part of the series.\n\nWe could put it on any element \u2014 the **<body>** tag; a **<div>** tag \u2014 but lets go ahead and put it on the top level \u201Chtml\u201D element. This way, the entire page will be available to our application.\n\n```html\n    <!doctype html>\n    <html ng-app>\n     <body>\n     <script src=\u201Dpath/to/angular.js\u201D><\/script>\n     </body>\n    </html>\n```\n\nThere is another way to bootstrap your application (it actually uses the [angular.bootstrap](https://docs.angularjs.org/api/ng/function/angular.bootstrap) method!), but I have found it to be much more error-prone, so I wont at least into that method\u2026 at least not today.\n\n### Binding\n\n\u2014 ng-model and ng-bind\n\nNow that you\u2019ve set up the application, binding data is the simplest thing that you can do in angular. Try modifying your html to look like this:\n\n```html\n    <!doctype html>\n    <html ng-app>\n     <body >\n     <input ng-model=\u201Dinput\u201D> <span ng-bind=\u201Dinput\u201D></span>\n     <script src=\u201Dpath/to/angular.js\u201D><\/script>\n     </body>\n    </html>\n```\n\nYou\u2019ve added two new directives. The** ng-model \\***directives\\* allows you to bind a variable to a standard html element that receives user input. This can be either an input element, a textarea element, or select element. (If you\u2019re familiar with jQuery, this might remind you of the [val](http://api.jquery.com/val/) method.)\n\nThe **ng-bind** directive does something similar, but but it works by replacing the inner html of any html element with the bound variable. (If you\u2019re familiar with jQuery, this might remind you of the [html](http://api.jquery.com/html/) method.)\n\n**input** is the name that we have chosen for the name of the variable to be bound, but we could have chosen pretty much anything.\n\nNote: the variables exist within the scope of the application and not on the page. A variable defined within javascript will not be bound. We\u2019ll learn exactly \u201Cwhere\u201D these variables live in a later chapter on controllers and scope.\n\n```html\n<script>\n  var input = \u201CSorry, I\u2019m not available for binding.\u201D\n<\/script>\n```\n\nYou can also use the double curly braces syntax, `\u201C[[input]]\u201D`, instead of **ng-bind** to add binding anywhere without the need for an HTML element:\n\n```html\n    <!doctype html>\n    <html ng-app>\n     <body >\n     <input ng-model=\u201Dinput\u201D><span>[[input]]</span>\n     <script src=\u201Dpath/to/angular.js\u201D><\/script>\n     </body>\n    </html>\n```\n\nIf you open the page in a browser, you will see an empty box, and when you type box, you\u2019ll see that it\u2019s bound to the span right next to it.\n\nThis might be useful for, say, a form:\n\n```html\n<form>\n  Name:<input ng-model="\u201Duser.name\u201D" ng-required="\u201Dtrue\u201D" />\n  <br />\n  Favorite Color:\n  <select ng-model="\u201Duser.color\u201D">\n    <option value="\u201Dnot" available\u201D>N/A</option>\n    <option value="\u201Dred\u201D">Red</option>\n    <option value="\u201Dgreen\u201D">Green</option>\n    <option value="\u201Dblue\u201D">Blue</option>\n  </select>\n  <div style="\u201Dbackground-color:[[user.color]]\u201D"></div>\n  <button>Submit</button>\n</form>\n<p>\n  Your name is\n  <b ng-bind="\u201Duser.name" || \u2018Blank\u2019\u201D></b>\n  and your favorite color is\n  <b ng-bind="\u201Duser.color\u201D"></b>.\n</p>\n```\n\nNotice that the **user.name** and the **user.color** properties are bound to other parts of the form.\n\nYou may have spotted the **ng-required** directive on the input tag. That\u2019s prevents a form from being submitted unless the required value is filled out. Try submitting the form below without typing in a name. (Be Warned: This may not work in all browsers.)\n\nIt\u2019s also useful to be able to perform calculations on the page. Here\u2019s a simple tip calculator. It a bit off (check out those rounding errors!), but it starts to show you what you can do with an angular app.\n\n```html\n    Bill: <input ng-model=\u201Dbill\u201D>\n    <br/>\n    Tip Percentage: <input type=\u201Dnumber\u201D ng-model=\u201Dtip\u201D> %\n    <br/>\n    Total: $<span ng-bind=\u201D(1 + (tip/100) ) * bill\u201D></span>\n```\n\n### A Few More Directives\n\n\u2014 Showing and Hiding Elements with ng-if, ng-show, ng-hide\n\nConveniently, attaching the **ng-model** to a checkbox or radio allows you to bind to its **checked** property rather than it\u2019s value.\n\n```html\n<input type="\u201Dcheckbox\u201D" ng-init="\u201Dchecked" ="true\u201D" ng-model="\u201Dchecked\u201D" />\n<span ng-show="\u201Dchecked\u201D">The box is checked</span>\n<span ng-hide="\u201Dchecked\u201D">The box is not checked</span>\n<span ng-if="\u201Dchecked\u201D"> :) </span>\n```\n\nAnd we can use this fact to demonstrate a few new directives.\n\nAlthough I\u2019m not using for it\u2019s single recommended [use case](https://docs.angularjs.org/api/ng/directive/ngInit), the **ng-init**\ndirective allows you to initialize a variable\u2019s value \u2014 otherwise it starts off as empty.\n\nThe **ng-if**, **ng-show**, and **ng-hide** directives work to show and hide an element. The difference is that **ng-if** will remove an element from the page, if not visible, while **ng-show** and **ng-hide** will simply hide it.\n\n\u2014 Repeating Elements with ng-repeat\n\nA final useful directive is the **ng-repeat** directive that allows one to iterate through collections.\n\n```html\n<ul\n  ng-init="\u201Dbeatles"\n  ="["\n  [name\n  :\n  \u2018John\u2019],\n  [name\n  :\n  \u2018Paul\u2019],\n  [name\n  :\n  \u2018George\u2019],\n  [name\n  :\n  \u2018Ringo\u2019]\n  ]\u201D\n>\n  <li ng-repeat="\u201Dbeatle" in beatles\u201D>\n    <span ng-bind="\u201D$index\u201D"></span>.<span ng-bind="\u201Dbeatle.name\u201D"></span>\n  </li>\n</ul>\n```\n\nYou\u2019ll notice that in addition to the **_beatle_** property, the **ng-repeat **directive also provides a **_$index_** property that can also be bound to the application. This **_$index_ **is equal to the index of the iteration.\n\n\u2014 Modifying data with filters\n\nJust for the heck of it, let\u2019s take a sneak preview of filters.\n\n```html\n<li ng-repeat="\u201Dbeatle" in beatles | orderBy:\u2019name\u2019\u201D>\n  <span ng-bind="\u201D$index\u201D"></span>.<span ng-bind="\u201Dbeatle.name\u201D"></span>\n</li>\n```\n\n**orderBy** may look similar to a directive, but it\u2019s not, it\u2019s a filter. Filters work within certain directives to modify the data within them. This particular one changes the order of items within an array. You can read more about this and other available filters [here](https://docs.angularjs.org/api/ng/filter). Like directives, filters are one of the nine or so components that make up an angular app and can be woven together with the others to make powerful applications.\n\nFilters, like Directives, are one of the core components of angular. And we\u2019ll learn a lot more about them in an upcoming entry.\n\n### Conclusion\n\nWith just few basic built built in components, you can start creating interesting apps with barely any code. I\u2019ll be back soon with another update to this series, but in the meantime, start using Angular to make something cool!\n', "html": '<p><em>Originally Published: <a href="https://medium.com/@iamjohnhenry/angular-done-right-part-1-binding-and-directives-6112a43aa1dc">https://medium.com/@iamjohnhenry/angular-done-right-part-1-binding-and-directives-6112a43aa1dc</a></em></p>\n<p>Author\u2019s Note: While I no longer program heavily using angular, in favor of using smaller, more modular libraries, the reader will find the ideas presented in this series useful.</p>\n<p>Angular is hard, right?</p>\n<p>Well, one thing that\u2019s for sure is that Angular is a massive. It\u2019s a full application framework made of components including directives, controllers, services, and much much more. It\u2019s shrouded in strange new concepts such as \u201C<em>Dependency Injection</em>\u201D and \u201C<em>Transclausion</em>\u201D. Despite it\u2019s overall allure, anyone creating an angular app for the first time must accept that he or she is in for a steep learning curve due before being able to build anything fun or useful.</p>\n<p>That\u2019s the approach that most tutorials on the web take. In this series we take different approach. We\u2019ll gradually build upon the most basic concepts in angular; first introducing the bare minimum needed to build an application and building upon it as we go along.</p>\n<h3 id="installing-angular">Installing Angular</h3>\n<p>We\u2019ll start with a very basic HTML page. Create a basic html page with the following code inside:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>The next thing that you need to do is to download and include the angular.js file. You can download it directly from the <a href="https://angularjs.org/">Angular JS homepage</a>, or, if you perfer, using the <a href="http://bower.io/">Bower package manager</a>. I won\u2019t go into specifics, on how exactly how to do that, but having made it this far, I doubt that you\u2019ll have any trouble :).</p>\n<p>Once you\u2019ve included the angular file in your app, your file should look something like this:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">    &lt;!</span><span style="color: #7EE787">doctype</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">     &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">     &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">\u201Dpath/to/angular.js\u201D</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">     &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<h3 id="bootstrapping">Bootstrapping</h3>\n<p><strong>Bootstraping</strong> is a term used for connecting your angular application to the web page. Don\u2019t get it confused with the popular <a href="http://getbootstrap.com/">UI framework</a>.</p>\n<p>There are two ways of bootstrapping an application. The easiest and most reliable way is to add the <strong>ng-app *</strong>directive* to an html element. That element and all of it\u2019s children will be part of your angular app.</p>\n<p>\u201C<em>What are directives?</em>\u201D, you must be wondering\u2026 Well, for now, just think of them as attibues that you can add to your html that let your app interact with angular. We\u2019ll learn more about directives very soon, and in a later part of the series.</p>\n<p>We could put it on any element \u2014 the <strong><body></strong> tag; a <strong><div></strong> tag \u2014 but lets go ahead and put it on the top level \u201Chtml\u201D element. This way, the entire page will be available to our application.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">    &lt;!</span><span style="color: #7EE787">doctype</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-app</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">     &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">     &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">\u201Dpath/to/angular.js\u201D</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">     &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>There is another way to bootstrap your application (it actually uses the <a href="https://docs.angularjs.org/api/ng/function/angular.bootstrap">angular.bootstrap</a> method!), but I have found it to be much more error-prone, so I wont at least into that method\u2026 at least not today.</p>\n<h3 id="binding">Binding</h3>\n<p>\u2014 ng-model and ng-bind</p>\n<p>Now that you\u2019ve set up the application, binding data is the simplest thing that you can do in angular. Try modifying your html to look like this:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">    &lt;!</span><span style="color: #7EE787">doctype</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-app</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">     &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9"> &gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">     &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-model</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">\u201Dinput\u201D</span><span style="color: #C9D1D9">&gt; &lt;</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-bind</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">\u201Dinput\u201D</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">     &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">\u201Dpath/to/angular.js\u201D</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">     &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>You\u2019ve added two new directives. The** ng-model ***directives* allows you to bind a variable to a standard html element that receives user input. This can be either an input element, a textarea element, or select element. (If you\u2019re familiar with jQuery, this might remind you of the <a href="http://api.jquery.com/val/">val</a> method.)</p>\n<p>The <strong>ng-bind</strong> directive does something similar, but but it works by replacing the inner html of any html element with the bound variable. (If you\u2019re familiar with jQuery, this might remind you of the <a href="http://api.jquery.com/html/">html</a> method.)</p>\n<p><strong>input</strong> is the name that we have chosen for the name of the variable to be bound, but we could have chosen pretty much anything.</p>\n<p>Note: the variables exist within the scope of the application and not on the page. A variable defined within javascript will not be bound. We\u2019ll learn exactly \u201Cwhere\u201D these variables live in a later chapter on controllers and scope.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">var</span><span style="color: #C9D1D9"> input </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> \u201CSorry, </span><span style="color: #79C0FF">I</span><span style="color: #C9D1D9">\u2019m not available for binding.\u201D</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>You can also use the double curly braces syntax, <code is:raw>\u201C[[input]]\u201D</code>, instead of <strong>ng-bind</strong> to add binding anywhere without the need for an HTML element:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">    &lt;!</span><span style="color: #7EE787">doctype</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-app</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">     &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9"> &gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">     &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-model</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">\u201Dinput\u201D</span><span style="color: #C9D1D9">&gt;&lt;</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;[[input]]&lt;/</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">     &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">\u201Dpath/to/angular.js\u201D</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">     &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>If you open the page in a browser, you will see an empty box, and when you type box, you\u2019ll see that it\u2019s bound to the span right next to it.</p>\n<p>This might be useful for, say, a form:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  Name:&lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-model</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;\u201Duser.name\u201D&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-required</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;\u201Dtrue\u201D&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">br</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  Favorite Color:</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">select</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-model</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;\u201Duser.color\u201D&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">option</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">value</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;\u201Dnot&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">available\u201D</span><span style="color: #C9D1D9">&gt;N/A&lt;/</span><span style="color: #7EE787">option</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">option</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">value</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;\u201Dred\u201D&quot;</span><span style="color: #C9D1D9">&gt;Red&lt;/</span><span style="color: #7EE787">option</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">option</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">value</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;\u201Dgreen\u201D&quot;</span><span style="color: #C9D1D9">&gt;Green&lt;/</span><span style="color: #7EE787">option</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">option</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">value</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;\u201Dblue\u201D&quot;</span><span style="color: #C9D1D9">&gt;Blue&lt;/</span><span style="color: #7EE787">option</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">select</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">style</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;</span><span style="color: #C9D1D9">\u201Dbackground-color:[[user.color]]\u201D&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9">&gt;Submit&lt;/</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  Your name is</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">b</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-bind</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;\u201Duser.name&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">||</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">\u2018Blank\u2019\u201D</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">b</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  and your favorite color is</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">b</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-bind</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;\u201Duser.color\u201D&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">b</span><span style="color: #C9D1D9">&gt;.</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Notice that the <strong>user.name</strong> and the <strong>user.color</strong> properties are bound to other parts of the form.</p>\n<p>You may have spotted the <strong>ng-required</strong> directive on the input tag. That\u2019s prevents a form from being submitted unless the required value is filled out. Try submitting the form below without typing in a name. (Be Warned: This may not work in all browsers.)</p>\n<p>It\u2019s also useful to be able to perform calculations on the page. Here\u2019s a simple tip calculator. It a bit off (check out those rounding errors!), but it starts to show you what you can do with an angular app.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">    Bill: &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-model</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">\u201Dbill\u201D</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">br</span><span style="color: #C9D1D9">/&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    Tip Percentage: &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">\u201Dnumber\u201D</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-model</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">\u201Dtip\u201D</span><span style="color: #C9D1D9">&gt; %</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">br</span><span style="color: #C9D1D9">/&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    Total: $&lt;</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-bind</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">\u201D(1</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">+</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">(tip</span><span style="color: #FFA198; font-style: italic">/100)</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">)</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">*</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">bill\u201D</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<h3 id="a-few-more-directives">A Few More Directives</h3>\n<p>\u2014 Showing and Hiding Elements with ng-if, ng-show, ng-hide</p>\n<p>Conveniently, attaching the <strong>ng-model</strong> to a checkbox or radio allows you to bind to its <strong>checked</strong> property rather than it\u2019s value.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;\u201Dcheckbox\u201D&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-init</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;\u201Dchecked&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198; font-style: italic">=</span><span style="color: #A5D6FF">&quot;true\u201D&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-model</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;\u201Dchecked\u201D&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-show</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;\u201Dchecked\u201D&quot;</span><span style="color: #C9D1D9">&gt;The box is checked&lt;/</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-hide</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;\u201Dchecked\u201D&quot;</span><span style="color: #C9D1D9">&gt;The box is not checked&lt;/</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-if</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;\u201Dchecked\u201D&quot;</span><span style="color: #C9D1D9">&gt; :) &lt;/</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>And we can use this fact to demonstrate a few new directives.</p>\n<p>Although I\u2019m not using for it\u2019s single recommended <a href="https://docs.angularjs.org/api/ng/directive/ngInit">use case</a>, the <strong>ng-init</strong>\ndirective allows you to initialize a variable\u2019s value \u2014 otherwise it starts off as empty.</p>\n<p>The <strong>ng-if</strong>, <strong>ng-show</strong>, and <strong>ng-hide</strong> directives work to show and hide an element. The difference is that <strong>ng-if</strong> will remove an element from the page, if not visible, while <strong>ng-show</strong> and <strong>ng-hide</strong> will simply hide it.</p>\n<p>\u2014 Repeating Elements with ng-repeat</p>\n<p>A final useful directive is the <strong>ng-repeat</strong> directive that allows one to iterate through collections.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">ul</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">ng-init</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;\u201Dbeatles&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">  =</span><span style="color: #A5D6FF">&quot;[&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">[name</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">:</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">\u2018John\u2019],</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">[name</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">:</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">\u2018Paul\u2019],</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">[name</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">:</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">\u2018George\u2019],</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">[name</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">:</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">\u2018Ringo\u2019]</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">]\u201D</span></span>\n<span class="line"><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-repeat</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;\u201Dbeatle&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">in</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">beatles\u201D</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-bind</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;\u201D$index\u201D&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;.&lt;</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-bind</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;\u201Dbeatle.name\u201D&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">ul</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>You\u2019ll notice that in addition to the <strong><em>beatle</em></strong> property, the **ng-repeat **directive also provides a <strong><em>$index</em></strong> property that can also be bound to the application. This **<em>$index</em> **is equal to the index of the iteration.</p>\n<p>\u2014 Modifying data with filters</p>\n<p>Just for the heck of it, let\u2019s take a sneak preview of filters.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-repeat</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;\u201Dbeatle&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">in</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">beatles</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">|</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">orderBy:\u2019name\u2019\u201D</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-bind</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;\u201D$index\u201D&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;.&lt;</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-bind</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;\u201Dbeatle.name\u201D&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p><strong>orderBy</strong> may look similar to a directive, but it\u2019s not, it\u2019s a filter. Filters work within certain directives to modify the data within them. This particular one changes the order of items within an array. You can read more about this and other available filters <a href="https://docs.angularjs.org/api/ng/filter">here</a>. Like directives, filters are one of the nine or so components that make up an angular app and can be woven together with the others to make powerful applications.</p>\n<p>Filters, like Directives, are one of the core components of angular. And we\u2019ll learn a lot more about them in an upcoming entry.</p>\n<h3 id="conclusion">Conclusion</h3>\n<p>With just few basic built built in components, you can start creating interesting apps with barely any code. I\u2019ll be back soon with another update to this series, but in the meantime, start using Angular to make something cool!</p>' } };
  return render$1`${renderComponent($$result, "Layout", $$BlogPage, { "content": $$content }, { "default": () => render$1`<p><em>Originally Published: <a href="https://medium.com/@iamjohnhenry/angular-done-right-part-1-binding-and-directives-6112a43aa1dc">https://medium.com/@iamjohnhenry/angular-done-right-part-1-binding-and-directives-6112a43aa1dc</a></em></p><p>Author’s Note: While I no longer program heavily using angular, in favor of using smaller, more modular libraries, the reader will find the ideas presented in this series useful.</p><p>Angular is hard, right?</p><p>Well, one thing that’s for sure is that Angular is a massive. It’s a full application framework made of components including directives, controllers, services, and much much more. It’s shrouded in strange new concepts such as “<em>Dependency Injection</em>” and “<em>Transclausion</em>”. Despite it’s overall allure, anyone creating an angular app for the first time must accept that he or she is in for a steep learning curve due before being able to build anything fun or useful.</p><p>That’s the approach that most tutorials on the web take. In this series we take different approach. We’ll gradually build upon the most basic concepts in angular; first introducing the bare minimum needed to build an application and building upon it as we go along.</p><h3 id="installing-angular">Installing Angular</h3><p>We’ll start with a very basic HTML page. Create a basic html page with the following code inside:</p><pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre><p>The next thing that you need to do is to download and include the angular.js file. You can download it directly from the <a href="https://angularjs.org/">Angular JS homepage</a>, or, if you perfer, using the <a href="http://bower.io/">Bower package manager</a>. I won’t go into specifics, on how exactly how to do that, but having made it this far, I doubt that you’ll have any trouble :).</p><p>Once you’ve included the angular file in your app, your file should look something like this:</p><pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">    &lt;!</span><span style="color: #7EE787">doctype</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">     &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">     &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">”path/to/angular.js”</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">     &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre><h3 id="bootstrapping">Bootstrapping</h3><p><strong>Bootstraping</strong> is a term used for connecting your angular application to the web page. Don’t get it confused with the popular <a href="http://getbootstrap.com/">UI framework</a>.</p><p>There are two ways of bootstrapping an application. The easiest and most reliable way is to add the <strong>ng-app *</strong>directive* to an html element. That element and all of it’s children will be part of your angular app.</p><p>“<em>What are directives?</em>”, you must be wondering… Well, for now, just think of them as attibues that you can add to your html that let your app interact with angular. We’ll learn more about directives very soon, and in a later part of the series.</p><p>We could put it on any element — the <strong></strong> tag; a <strong></strong></p><div> tag — but lets go ahead and put it on the top level “html” element. This way, the entire page will be available to our application.
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">    &lt;!</span><span style="color: #7EE787">doctype</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-app</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">     &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">     &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">”path/to/angular.js”</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">     &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>There is another way to bootstrap your application (it actually uses the <a href="https://docs.angularjs.org/api/ng/function/angular.bootstrap">angular.bootstrap</a> method!), but I have found it to be much more error-prone, so I wont at least into that method… at least not today.</p>
<h3 id="binding">Binding</h3>
<p>— ng-model and ng-bind</p>
<p>Now that you’ve set up the application, binding data is the simplest thing that you can do in angular. Try modifying your html to look like this:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">    &lt;!</span><span style="color: #7EE787">doctype</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-app</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">     &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9"> &gt;</span></span>
<span class="line"><span style="color: #C9D1D9">     &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-model</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">”input”</span><span style="color: #C9D1D9">&gt; &lt;</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-bind</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">”input”</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">     &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">”path/to/angular.js”</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">     &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>You’ve added two new directives. The** ng-model ***directives* allows you to bind a variable to a standard html element that receives user input. This can be either an input element, a textarea element, or select element. (If you’re familiar with jQuery, this might remind you of the <a href="http://api.jquery.com/val/">val</a> method.)</p>
<p>The <strong>ng-bind</strong> directive does something similar, but but it works by replacing the inner html of any html element with the bound variable. (If you’re familiar with jQuery, this might remind you of the <a href="http://api.jquery.com/html/">html</a> method.)</p>
<p><strong>input</strong> is the name that we have chosen for the name of the variable to be bound, but we could have chosen pretty much anything.</p>
<p>Note: the variables exist within the scope of the application and not on the page. A variable defined within javascript will not be bound. We’ll learn exactly “where” these variables live in a later chapter on controllers and scope.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">var</span><span style="color: #C9D1D9"> input </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> “Sorry, </span><span style="color: #79C0FF">I</span><span style="color: #C9D1D9">’m not available for binding.”</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>You can also use the double curly braces syntax, <code>“[[input]]”</code>, instead of <strong>ng-bind</strong> to add binding anywhere without the need for an HTML element:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">    &lt;!</span><span style="color: #7EE787">doctype</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-app</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">     &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9"> &gt;</span></span>
<span class="line"><span style="color: #C9D1D9">     &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-model</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">”input”</span><span style="color: #C9D1D9">&gt;&lt;</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;[[input]]&lt;/</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">     &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">”path/to/angular.js”</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">     &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>If you open the page in a browser, you will see an empty box, and when you type box, you’ll see that it’s bound to the span right next to it.</p>
<p>This might be useful for, say, a form:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  Name:&lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-model</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;”user.name”&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-required</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;”true”&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">br</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  Favorite Color:</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">select</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-model</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;”user.color”&quot;</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">option</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">value</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;”not&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">available”</span><span style="color: #C9D1D9">&gt;N/A&lt;/</span><span style="color: #7EE787">option</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">option</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">value</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;”red”&quot;</span><span style="color: #C9D1D9">&gt;Red&lt;/</span><span style="color: #7EE787">option</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">option</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">value</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;”green”&quot;</span><span style="color: #C9D1D9">&gt;Green&lt;/</span><span style="color: #7EE787">option</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">option</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">value</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;”blue”&quot;</span><span style="color: #C9D1D9">&gt;Blue&lt;/</span><span style="color: #7EE787">option</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">select</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">style</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;</span><span style="color: #C9D1D9">”background-color:[[user.color]]”&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9">&gt;Submit&lt;/</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  Your name is</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">b</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-bind</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;”user.name&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">||</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">‘Blank’”</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">b</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  and your favorite color is</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">b</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-bind</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;”user.color”&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">b</span><span style="color: #C9D1D9">&gt;.</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>Notice that the <strong>user.name</strong> and the <strong>user.color</strong> properties are bound to other parts of the form.</p>
<p>You may have spotted the <strong>ng-required</strong> directive on the input tag. That’s prevents a form from being submitted unless the required value is filled out. Try submitting the form below without typing in a name. (Be Warned: This may not work in all browsers.)</p>
<p>It’s also useful to be able to perform calculations on the page. Here’s a simple tip calculator. It a bit off (check out those rounding errors!), but it starts to show you what you can do with an angular app.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">    Bill: &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-model</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">”bill”</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">br</span><span style="color: #C9D1D9">/&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    Tip Percentage: &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">”number”</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-model</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">”tip”</span><span style="color: #C9D1D9">&gt; %</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">br</span><span style="color: #C9D1D9">/&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    Total: $&lt;</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-bind</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">”(1</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">+</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">(tip</span><span style="color: #FFA198; font-style: italic">/100)</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">)</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">*</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">bill”</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<h3 id="a-few-more-directives">A Few More Directives</h3>
<p>— Showing and Hiding Elements with ng-if, ng-show, ng-hide</p>
<p>Conveniently, attaching the <strong>ng-model</strong> to a checkbox or radio allows you to bind to its <strong>checked</strong> property rather than it’s value.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;”checkbox”&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-init</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;”checked&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198; font-style: italic">=</span><span style="color: #A5D6FF">&quot;true”&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-model</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;”checked”&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-show</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;”checked”&quot;</span><span style="color: #C9D1D9">&gt;The box is checked&lt;/</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-hide</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;”checked”&quot;</span><span style="color: #C9D1D9">&gt;The box is not checked&lt;/</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-if</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;”checked”&quot;</span><span style="color: #C9D1D9">&gt; :) &lt;/</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>And we can use this fact to demonstrate a few new directives.</p>
<p>Although I’m not using for it’s single recommended <a href="https://docs.angularjs.org/api/ng/directive/ngInit">use case</a>, the <strong>ng-init</strong>
directive allows you to initialize a variable’s value — otherwise it starts off as empty.</p>
<p>The <strong>ng-if</strong>, <strong>ng-show</strong>, and <strong>ng-hide</strong> directives work to show and hide an element. The difference is that <strong>ng-if</strong> will remove an element from the page, if not visible, while <strong>ng-show</strong> and <strong>ng-hide</strong> will simply hide it.</p>
<p>— Repeating Elements with ng-repeat</p>
<p>A final useful directive is the <strong>ng-repeat</strong> directive that allows one to iterate through collections.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">ul</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">ng-init</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;”beatles&quot;</span></span>
<span class="line"><span style="color: #C9D1D9">  =</span><span style="color: #A5D6FF">&quot;[&quot;</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">[name</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">:</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">‘John’],</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">[name</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">:</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">‘Paul’],</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">[name</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">:</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">‘George’],</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">[name</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">:</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">‘Ringo’]</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">]”</span></span>
<span class="line"><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-repeat</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;”beatle&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">in</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">beatles”</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-bind</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;”$index”&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;.&lt;</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-bind</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;”beatle.name”&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">ul</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>You’ll notice that in addition to the <strong><em>beatle</em></strong> property, the **ng-repeat **directive also provides a <strong><em>$index</em></strong> property that can also be bound to the application. This **<em>$index</em> **is equal to the index of the iteration.</p>
<p>— Modifying data with filters</p>
<p>Just for the heck of it, let’s take a sneak preview of filters.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-repeat</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;”beatle&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">in</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">beatles</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">|</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">orderBy:’name’”</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-bind</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;”$index”&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;.&lt;</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ng-bind</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;”beatle.name”&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p><strong>orderBy</strong> may look similar to a directive, but it’s not, it’s a filter. Filters work within certain directives to modify the data within them. This particular one changes the order of items within an array. You can read more about this and other available filters <a href="https://docs.angularjs.org/api/ng/filter">here</a>. Like directives, filters are one of the nine or so components that make up an angular app and can be woven together with the others to make powerful applications.</p>
<p>Filters, like Directives, are one of the core components of angular. And we’ll learn a lot more about them in an upcoming entry.</p>
<h3 id="conclusion">Conclusion</h3>
<p>With just few basic built built in components, you can start creating interesting apps with barely any code. I’ll be back soon with another update to this series, but in the meantime, start using Angular to make something cool!</p>

</div>` })}`;
});

var _page5 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  metadata: metadata$3,
  frontmatter: frontmatter$3,
  $$metadata: $$metadata$9,
  'default': $$AngularDoneRight
}, Symbol.toStringTag, { value: 'Module' }));

const metadata$2 = { "headers": [{ "depth": 2, "slug": "collections-ul--li", "text": "Collections: ul + li" }, { "depth": 2, "slug": "ordered-collections-ol--li", "text": "Ordered Collections: ol + li" }, { "depth": 2, "slug": "typed-collections-table--trthtd", "text": "Typed Collections: table + tr,(th?),td" }, { "depth": 2, "slug": "key-value-pairs-dldtdd", "text": "Key-Value Pairs: dl+dt,dd" }, { "depth": 2, "slug": "linked-list-tree--a--details--summary", "text": "Linked List, Tree : a | details + summary" }], "source": '\nAs web developers,\nwe often ignore the semantics of HTML tags.\nWe arbitrarily interchange divs, spans, and sections\nas generic containers.\nWe might follow up an h3 tag with a few h1s\nto achieve a desired style.\n\nIt\'s great that we can do this on the web\nwithout having our browsers throw errors like\n`<div> in <li> *not allowed*. aborting render. upsetting user.`;\nbut when displaying data in documents, it may be useful\n\n## Collections: ul + li\n\nSets\n\n## Ordered Collections: ol + li\n\nArrays, Vectors\n\n## Typed Collections: table + tr,(th?),td\n\nTyped Array, Matrix,\n\n## Key-Value Pairs: dl+dt,dd\n\nMaps, Dictionaries, Generic Objects\n\n## Linked List, Tree : a | details + summary\n\nThis is probably going to seem crazy when compared\nto the other items, but you will likely find it intuitive.\n\nThe idean of "linking" objets exists\nin most languages, though it may not be a\nfirst-class concept.\n\nFor instance, in JavaScript you can "link"\ntwo objects by giving one a reference\nto the other.\n\n```javascript\nconst objectA = {};\nconst objectB = {};\na["b"] = objectB;\n// b is now linked to a\n// as it can be rererenced\n// via\n```\n', "html": '<p>As web developers,\nwe often ignore the semantics of HTML tags.\nWe arbitrarily interchange divs, spans, and sections\nas generic containers.\nWe might follow up an h3 tag with a few h1s\nto achieve a desired style.</p>\n<p>It\u2019s great that we can do this on the web\nwithout having our browsers throw errors like\n<code is:raw>&#x3C;div> in &#x3C;li> *not allowed*. aborting render. upsetting user.</code>;\nbut when displaying data in documents, it may be useful</p>\n<h2 id="collections-ul--li">Collections: ul + li</h2>\n<p>Sets</p>\n<h2 id="ordered-collections-ol--li">Ordered Collections: ol + li</h2>\n<p>Arrays, Vectors</p>\n<h2 id="typed-collections-table--trthtd">Typed Collections: table + tr,(th?),td</h2>\n<p>Typed Array, Matrix,</p>\n<h2 id="key-value-pairs-dldtdd">Key-Value Pairs: dl+dt,dd</h2>\n<p>Maps, Dictionaries, Generic Objects</p>\n<h2 id="linked-list-tree--a--details--summary">Linked List, Tree : a | details + summary</h2>\n<p>This is probably going to seem crazy when compared\nto the other items, but you will likely find it intuitive.</p>\n<p>The idean of \u201Clinking\u201D objets exists\nin most languages, though it may not be a\nfirst-class concept.</p>\n<p>For instance, in JavaScript you can \u201Clink\u201D\ntwo objects by giving one a reference\nto the other.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">objectA</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {};</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">objectB</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {};</span></span>\n<span class="line"><span style="color: #C9D1D9">a[</span><span style="color: #A5D6FF">&quot;b&quot;</span><span style="color: #C9D1D9">] </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> objectB;</span></span>\n<span class="line"><span style="color: #8B949E">// b is now linked to a</span></span>\n<span class="line"><span style="color: #8B949E">// as it can be rererenced</span></span>\n<span class="line"><span style="color: #8B949E">// via</span></span></code></pre>' };
const frontmatter$2 = { "title": "HTML Tags for Data", "description": "The first in a series on how to use Angular 1.0", "author": "John Henry", "heroImage": "/vendor/img/www.pexels.com/pixabay/view-of-street-from-a-glass-window.jpg", "alt": "Astro", "tags": ["programming", "semantics"], "astro": { "headers": [{ "depth": 2, "slug": "collections-ul--li", "text": "Collections: ul + li" }, { "depth": 2, "slug": "ordered-collections-ol--li", "text": "Ordered Collections: ol + li" }, { "depth": 2, "slug": "typed-collections-table--trthtd", "text": "Typed Collections: table + tr,(th?),td" }, { "depth": 2, "slug": "key-value-pairs-dldtdd", "text": "Key-Value Pairs: dl+dt,dd" }, { "depth": 2, "slug": "linked-list-tree--a--details--summary", "text": "Linked List, Tree : a | details + summary" }], "source": '\nAs web developers,\nwe often ignore the semantics of HTML tags.\nWe arbitrarily interchange divs, spans, and sections\nas generic containers.\nWe might follow up an h3 tag with a few h1s\nto achieve a desired style.\n\nIt\'s great that we can do this on the web\nwithout having our browsers throw errors like\n`<div> in <li> *not allowed*. aborting render. upsetting user.`;\nbut when displaying data in documents, it may be useful\n\n## Collections: ul + li\n\nSets\n\n## Ordered Collections: ol + li\n\nArrays, Vectors\n\n## Typed Collections: table + tr,(th?),td\n\nTyped Array, Matrix,\n\n## Key-Value Pairs: dl+dt,dd\n\nMaps, Dictionaries, Generic Objects\n\n## Linked List, Tree : a | details + summary\n\nThis is probably going to seem crazy when compared\nto the other items, but you will likely find it intuitive.\n\nThe idean of "linking" objets exists\nin most languages, though it may not be a\nfirst-class concept.\n\nFor instance, in JavaScript you can "link"\ntwo objects by giving one a reference\nto the other.\n\n```javascript\nconst objectA = {};\nconst objectB = {};\na["b"] = objectB;\n// b is now linked to a\n// as it can be rererenced\n// via\n```\n', "html": '<p>As web developers,\nwe often ignore the semantics of HTML tags.\nWe arbitrarily interchange divs, spans, and sections\nas generic containers.\nWe might follow up an h3 tag with a few h1s\nto achieve a desired style.</p>\n<p>It\u2019s great that we can do this on the web\nwithout having our browsers throw errors like\n<code is:raw>&#x3C;div> in &#x3C;li> *not allowed*. aborting render. upsetting user.</code>;\nbut when displaying data in documents, it may be useful</p>\n<h2 id="collections-ul--li">Collections: ul + li</h2>\n<p>Sets</p>\n<h2 id="ordered-collections-ol--li">Ordered Collections: ol + li</h2>\n<p>Arrays, Vectors</p>\n<h2 id="typed-collections-table--trthtd">Typed Collections: table + tr,(th?),td</h2>\n<p>Typed Array, Matrix,</p>\n<h2 id="key-value-pairs-dldtdd">Key-Value Pairs: dl+dt,dd</h2>\n<p>Maps, Dictionaries, Generic Objects</p>\n<h2 id="linked-list-tree--a--details--summary">Linked List, Tree : a | details + summary</h2>\n<p>This is probably going to seem crazy when compared\nto the other items, but you will likely find it intuitive.</p>\n<p>The idean of \u201Clinking\u201D objets exists\nin most languages, though it may not be a\nfirst-class concept.</p>\n<p>For instance, in JavaScript you can \u201Clink\u201D\ntwo objects by giving one a reference\nto the other.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">objectA</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {};</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">objectB</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {};</span></span>\n<span class="line"><span style="color: #C9D1D9">a[</span><span style="color: #A5D6FF">&quot;b&quot;</span><span style="color: #C9D1D9">] </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> objectB;</span></span>\n<span class="line"><span style="color: #8B949E">// b is now linked to a</span></span>\n<span class="line"><span style="color: #8B949E">// as it can be rererenced</span></span>\n<span class="line"><span style="color: #8B949E">// via</span></span></code></pre>' } };
const $$metadata$8 = createMetadata("/src/pages/blog/posts/html-tags-for-data.md", { modules: [{ module: $$module1$1, specifier: "../../../components/BlogPage.astro", assert: {} }], hydratedComponents: [], clientOnlyComponents: [], hydrationDirectives: /* @__PURE__ */ new Set([]), hoisted: [] });
const $$Astro$8 = createAstro("/src/pages/blog/posts/html-tags-for-data.md", "https://astro.build", "file:///home/runner/work/johnhenry.github.io/johnhenry.github.io/");
const $$HtmlTagsForData = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$8, $$props, $$slots);
  Astro2.self = $$HtmlTagsForData;
  const $$content = { "title": "HTML Tags for Data", "description": "The first in a series on how to use Angular 1.0", "author": "John Henry", "heroImage": "/vendor/img/www.pexels.com/pixabay/view-of-street-from-a-glass-window.jpg", "alt": "Astro", "tags": ["programming", "semantics"], "astro": { "headers": [{ "depth": 2, "slug": "collections-ul--li", "text": "Collections: ul + li" }, { "depth": 2, "slug": "ordered-collections-ol--li", "text": "Ordered Collections: ol + li" }, { "depth": 2, "slug": "typed-collections-table--trthtd", "text": "Typed Collections: table + tr,(th?),td" }, { "depth": 2, "slug": "key-value-pairs-dldtdd", "text": "Key-Value Pairs: dl+dt,dd" }, { "depth": 2, "slug": "linked-list-tree--a--details--summary", "text": "Linked List, Tree : a | details + summary" }], "source": '\nAs web developers,\nwe often ignore the semantics of HTML tags.\nWe arbitrarily interchange divs, spans, and sections\nas generic containers.\nWe might follow up an h3 tag with a few h1s\nto achieve a desired style.\n\nIt\'s great that we can do this on the web\nwithout having our browsers throw errors like\n`<div> in <li> *not allowed*. aborting render. upsetting user.`;\nbut when displaying data in documents, it may be useful\n\n## Collections: ul + li\n\nSets\n\n## Ordered Collections: ol + li\n\nArrays, Vectors\n\n## Typed Collections: table + tr,(th?),td\n\nTyped Array, Matrix,\n\n## Key-Value Pairs: dl+dt,dd\n\nMaps, Dictionaries, Generic Objects\n\n## Linked List, Tree : a | details + summary\n\nThis is probably going to seem crazy when compared\nto the other items, but you will likely find it intuitive.\n\nThe idean of "linking" objets exists\nin most languages, though it may not be a\nfirst-class concept.\n\nFor instance, in JavaScript you can "link"\ntwo objects by giving one a reference\nto the other.\n\n```javascript\nconst objectA = {};\nconst objectB = {};\na["b"] = objectB;\n// b is now linked to a\n// as it can be rererenced\n// via\n```\n', "html": '<p>As web developers,\nwe often ignore the semantics of HTML tags.\nWe arbitrarily interchange divs, spans, and sections\nas generic containers.\nWe might follow up an h3 tag with a few h1s\nto achieve a desired style.</p>\n<p>It\u2019s great that we can do this on the web\nwithout having our browsers throw errors like\n<code is:raw>&#x3C;div> in &#x3C;li> *not allowed*. aborting render. upsetting user.</code>;\nbut when displaying data in documents, it may be useful</p>\n<h2 id="collections-ul--li">Collections: ul + li</h2>\n<p>Sets</p>\n<h2 id="ordered-collections-ol--li">Ordered Collections: ol + li</h2>\n<p>Arrays, Vectors</p>\n<h2 id="typed-collections-table--trthtd">Typed Collections: table + tr,(th?),td</h2>\n<p>Typed Array, Matrix,</p>\n<h2 id="key-value-pairs-dldtdd">Key-Value Pairs: dl+dt,dd</h2>\n<p>Maps, Dictionaries, Generic Objects</p>\n<h2 id="linked-list-tree--a--details--summary">Linked List, Tree : a | details + summary</h2>\n<p>This is probably going to seem crazy when compared\nto the other items, but you will likely find it intuitive.</p>\n<p>The idean of \u201Clinking\u201D objets exists\nin most languages, though it may not be a\nfirst-class concept.</p>\n<p>For instance, in JavaScript you can \u201Clink\u201D\ntwo objects by giving one a reference\nto the other.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">objectA</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {};</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">objectB</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {};</span></span>\n<span class="line"><span style="color: #C9D1D9">a[</span><span style="color: #A5D6FF">&quot;b&quot;</span><span style="color: #C9D1D9">] </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> objectB;</span></span>\n<span class="line"><span style="color: #8B949E">// b is now linked to a</span></span>\n<span class="line"><span style="color: #8B949E">// as it can be rererenced</span></span>\n<span class="line"><span style="color: #8B949E">// via</span></span></code></pre>' } };
  return render$1`${renderComponent($$result, "Layout", $$BlogPage, { "content": $$content }, { "default": () => render$1`<p>As web developers,
we often ignore the semantics of HTML tags.
We arbitrarily interchange divs, spans, and sections
as generic containers.
We might follow up an h3 tag with a few h1s
to achieve a desired style.</p><p>It’s great that we can do this on the web
without having our browsers throw errors like
<code>&#x3C;div> in &#x3C;li> *not allowed*. aborting render. upsetting user.</code>;
but when displaying data in documents, it may be useful</p><h2 id="collections-ul--li">Collections: ul + li</h2><p>Sets</p><h2 id="ordered-collections-ol--li">Ordered Collections: ol + li</h2><p>Arrays, Vectors</p><h2 id="typed-collections-table--trthtd">Typed Collections: table + tr,(th?),td</h2><p>Typed Array, Matrix,</p><h2 id="key-value-pairs-dldtdd">Key-Value Pairs: dl+dt,dd</h2><p>Maps, Dictionaries, Generic Objects</p><h2 id="linked-list-tree--a--details--summary">Linked List, Tree : a | details + summary</h2><p>This is probably going to seem crazy when compared
to the other items, but you will likely find it intuitive.</p><p>The idean of “linking” objets exists
in most languages, though it may not be a
first-class concept.</p><p>For instance, in JavaScript you can “link”
two objects by giving one a reference
to the other.</p><pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">objectA</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {};</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">objectB</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {};</span></span>
<span class="line"><span style="color: #C9D1D9">a[</span><span style="color: #A5D6FF">&quot;b&quot;</span><span style="color: #C9D1D9">] </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> objectB;</span></span>
<span class="line"><span style="color: #8B949E">// b is now linked to a</span></span>
<span class="line"><span style="color: #8B949E">// as it can be rererenced</span></span>
<span class="line"><span style="color: #8B949E">// via</span></span></code></pre>` })}`;
});

var _page6 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  metadata: metadata$2,
  frontmatter: frontmatter$2,
  $$metadata: $$metadata$8,
  'default': $$HtmlTagsForData
}, Symbol.toStringTag, { value: 'Module' }));

const metadata$1 = { "headers": [{ "depth": 1, "slug": "component-inheritence", "text": "Component Inheritence" }, { "depth": 2, "slug": "normalize-and-reset", "text": "Normalize and Reset" }, { "depth": 2, "slug": "type-classical-inheritence", "text": "Type: Classical Inheritence" }, { "depth": 3, "slug": "instantiation-and-application", "text": "Instantiation and application" }, { "depth": 3, "slug": "extension", "text": "Extension" }, { "depth": 2, "slug": "type-mixins", "text": "Type: Mixins" }, { "depth": 2, "slug": "prototypal", "text": "Prototypal" }, { "depth": 2, "slug": "summary", "text": "Summary" }, { "depth": 2, "slug": "problems", "text": "Problems" }, { "depth": 2, "slug": "footnotes", "text": "Footnotes" }, { "depth": 2, "slug": "footnote-label", "text": "Footnotes" }], "source": '# Component Inheritence\n\nThis is Part 1 in a series.\nWe learn what it takes to create a framework\nin which we build components using\nclean and uncomplied styles along with organized and meanigful markup.\n\nInheritance is a useful concept.\nIt allows programmers to streamline the way in which they\ndesign objects by reusing code.\n\nIn this article, we take a look at how inheritance works\nthrough the eyes of a JavaScript programmer\nand understand how it applies when applying CSS.\n\n## Normalize and Reset\n\nWhile they mostly work the same,\ndifferent apply some browser-based styles\nto each page.\nFor consistency,\nit is always a good idea to use a [normalize]()\nany time you work with CSS.\n\nWe separate concerns -- meaning and style --\nby handing each with HTML and CSS respectively.\nWe go beyond using a normalize and use a [reset]()\nto strip **all** styles associated with the HTML.\n\n## Type: Classical Inheritence\n\nA _class_ is a basic object that acts as a blueprint\nto crete other objects.\n\nIn javascript we create a class with a number of\nproperty definitions[^1].\n\n```javascript\nconst House = class {\n  // "House" is like a blueprint for an actual house\n  constructor(color = "red") {\n    this.color = color;\n  }\n  paint(color) {\n    this.color = color;\n  }\n  getColor() {\n    return this.color;\n  }\n};\n```\n\nIn a way, _selectors_ in CSS behave like classes.\n\n```css\nsection {\n  background-color: var(--color, red);\n}\n```\n\n### Instantiation and application\n\nMost languages use the "new" keyword to create\nan "instance" of the class.\nThis is an object with the properties defined by the class.\n\n```javascript\nconst house = new Class("red"); // "house" is like the actual house\nconsole.log(house.getColor()); // logs "red"\nhouse.paint("blue");\nconsole.log(house.getColor()); // logs "blue"\n```\n\nRather than creating a new object,\nproperties defined by a selector are\nautomatically applied to HTML elements\nthat they match.\n\n```html\n<section>This has a red background</section>\n<section style="--color:blue">This has a blue background</section>\n```\n\n### Extension\n\nClasses can be "extended".\n\n```javascript\nclass BigRedHouse extends House class {\n  constructor() {\n    super("red");\n    this.isBig === true\n  }\n}\n```\n\nProperty definitons from the original class\nare included in the new class.\nWe say the properties are "inherited".\n\n```javascript\nconst bigRedHouse = new BigRedHouse();\nconsole.log(bigRedHouse.getColor()); // logs "red"\nconsole.log(bigRedHouse.isBig); // logs "true"\n```\n\nSome CSS preprocessors use a similar\n[concept of extension](https://sass-lang.com/documentation/at-rules/extend),\nThis is not a feature of uncompiled CSS,\nso we will find another way.\n\nWe can simulate this by defining and applying\nanother typer of selector, a CSS class.\n(To avoid ambiguity, I always refer to the selector\nas a "CSS class".)\n\nPlacing two selectors together (with no space between)\ncreates a new selector.\nBoth selectors much match an element to be applied.\n\n```css\nsection {\n  background-color: red;\n}\n\nsection.big {\n  font-size: 2rem;\n}\n```\n\n```html\n<section>This has a red background</section>\n<section class="big">This has a red background and big text.</section>\n```\n\nChains of objects can inherit from eachother.\n\n```css\nsection.big.fancy_blue {\n  font-style: italic;\n  background-color: blue;\n}\n```\n\n```html\n<section class="big fancy_blue">\n  This has a blue background and big italicized text.\n</section>\n```\n\n## Type: Mixins\n\nMixins are a way to give an object with properties directly.\nThey are less formal and there is not sanctioned syntax\nin javascript.\n\nWe can use `Object.assign` to give an object properties.\n\n```javascript\nconst collegeStudent = {\n  canRead:true;\n}\nconst surgeon = {\n  preformSurgery(){\n    return Math.random() > 0.9 "success" : "...";\n  }\n}\n\nconst person = new Person();\nObject.assign(person, surgeon, collegeStudent);\nconsole.log(person.canRead); // logs "true"\nconsole.log(person.preformSurgery()); // logs "success" (I hope)\n```\n\nNotice that with mixins, an object can inherit from multiple objects\nwithout them having to inherit from one another.\n\nRecall the styles and markup from the previous "Extension" section:\n\n```css\nsection {\n  background-color: red;\n}\n\nsection.big {\n  font-size: 2rem;\n}\nsection.big.fancy_blue {\n  font-style: italic;\n  background-color: blue;\n}\n```\n\n```html\n<section>This has a red background</section>\n<section class="big">This has a red background and big text.</section>\n<section class="big fancy_blue">\n  This has a blue background and big italicized text.\n</section>\n```\n\nWe used the selectors together forming a heirchy,\nbut we could have split them apart.\nThis would allow them to apply to additional\nelements outside of said heirachy, in additon to the ones we defined\n\n```css\nsection {\n  background-color: red;\n}\n.big {\n  font-size: 2rem;\n}\n.fancy_blue {\n  font-style: italic;\n  background-color: blue;\n}\n```\n\n```html\n<section>This has a red background</section>\n<section class="big">This has a red background and big text.</section>\n<section class="big fancy_blue">\n  This has a blue background and big italicized text.\n</section>\n<div class="big">This has big text, but no background defined.</div>\n<section class="fancy_blue">This has a blue background and italicized, but regular sized text.</div>\n```\n\nDefining CSS selectors separately\nallows properties associated\nwith multiple to be mixed in\nto an HTML element.\n\n## Prototypal\n\nWith prototypal inheritance,\nwe creaete a new object referencing another object --\na "prototype".\nWe give the new object properties.\nWhen we attempt to access properties on the new object,\nif they do not exist; the request is proxied to the prototype.\nObjects that exist on on object\'s prototype, but not on the object itself,\nare considered "inherited".\n\nIn javascript, we use object `Object.create` to create an object,\nwith another object as it\'s prototype.\n\n```javascript\nconst John = {\n  name: "John",\n  age: 30,\n  sayName() {\n    return this.name;\n  },\n};\n\nconst clone = Object.create(John);\nclone.name = "N\'Hoj";\nclone.isEvil = true;\nconsole.log(John.age); // logs "30"\nconsole.log(clone.age); // logs "30"\nconsole.log(John.sayName()); // logs "John"\nconsole.log(clone.sayName()); // logs "N\'Hoj"\nconsole.log(!!John.isEvil); // logs "false"\nconsole.log(!!clone.isEvil); // logs "true"\n```\n\nWhen not defined by a selector targeting an element,\nsome CSS properties assume a default value.\nOthers take on the value of their parent.\n\nIt\'s not completely intuitive to figure out which\nproperties are inherited.\nCheckout [this stackoverflow answer](https://stackoverflow.com/a/5612360/1290781)\nfor guidance.\n\nIn this case elements inherit properties from thier parent elements.\n\n```css\nsection {\n  color: red;\n}\n```\n\n```html\n<section>\n  Text in this section is red as defined.\n  <div>Text is here is red because it\'s inherited from above.</div>\n</section>\n```\n\n## Summary\n\nOnce cleard of initial styles, HTML elements can be applied\n\n    1. via style selector or directly\n    2. via\n\n## Problems\n\nA lot of problems stem from misunderstanings of\ncss specificity and inheritence.\n\nMental tree model for inhheritne and spefificity\nCreate components in increating specificity.\nUse BEM for sub components?\nFrom what I know about rocket science, it\'s honestly a bit harder\nRocket science isn\'t actually that difficult onve\n\nWhen a class extends another class,\nit\'s said to inherit the\n\nWe\'\' learn more about specificity\nand how you can structure your style sheets\nto avoid shooing yousself in the foot.\n\n## Footnotes\n\n[^1]:\n    not "properties",\n    though we often use these interchangeably\n    when dealing whit chasses)\n', "html": '<h1 id="component-inheritence">Component Inheritence</h1>\n<p>This is Part 1 in a series.\nWe learn what it takes to create a framework\nin which we build components using\nclean and uncomplied styles along with organized and meanigful markup.</p>\n<p>Inheritance is a useful concept.\nIt allows programmers to streamline the way in which they\ndesign objects by reusing code.</p>\n<p>In this article, we take a look at how inheritance works\nthrough the eyes of a JavaScript programmer\nand understand how it applies when applying CSS.</p>\n<h2 id="normalize-and-reset">Normalize and Reset</h2>\n<p>While they mostly work the same,\ndifferent apply some browser-based styles\nto each page.\nFor consistency,\nit is always a good idea to use a <a href="">normalize</a>\nany time you work with CSS.</p>\n<p>We separate concerns \u2014 meaning and style \u2014\nby handing each with HTML and CSS respectively.\nWe go beyond using a normalize and use a <a href="">reset</a>\nto strip <strong>all</strong> styles associated with the HTML.</p>\n<h2 id="type-classical-inheritence">Type: Classical Inheritence</h2>\n<p>A <em>class</em> is a basic object that acts as a blueprint\nto crete other objects.</p>\n<p>In javascript we create a class with a number of\nproperty definitions<sup><a href="#user-content-fn-1" id="user-content-fnref-1" data-footnote-ref aria-describedby="footnote-label">1</a></sup>.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">House</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">class</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// &quot;House&quot; is like a blueprint for an actual house</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">constructor</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">color</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;red&quot;</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.color </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> color;</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">paint</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">color</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.color </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> color;</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">getColor</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.color;</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">};</span></span></code></pre>\n<p>In a way, <em>selectors</em> in CSS behave like classes.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #7EE787">section</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">background-color</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">var</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">--color</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">red</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<h3 id="instantiation-and-application">Instantiation and application</h3>\n<p>Most languages use the \u201Cnew\u201D keyword to create\nan \u201Cinstance\u201D of the class.\nThis is an object with the properties defined by the class.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">house</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Class</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;red&quot;</span><span style="color: #C9D1D9">); </span><span style="color: #8B949E">// &quot;house&quot; is like the actual house</span></span>\n<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(house.</span><span style="color: #D2A8FF">getColor</span><span style="color: #C9D1D9">()); </span><span style="color: #8B949E">// logs &quot;red&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">house.</span><span style="color: #D2A8FF">paint</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;blue&quot;</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(house.</span><span style="color: #D2A8FF">getColor</span><span style="color: #C9D1D9">()); </span><span style="color: #8B949E">// logs &quot;blue&quot;</span></span></code></pre>\n<p>Rather than creating a new object,\nproperties defined by a selector are\nautomatically applied to HTML elements\nthat they match.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;This has a red background&lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">style</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;</span><span style="color: #C9D1D9">--color:blue&quot;</span><span style="color: #C9D1D9">&gt;This has a blue background&lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<h3 id="extension">Extension</h3>\n<p>Classes can be \u201Cextended\u201D.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">class</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">BigRedHouse</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">extends</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">House</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">class</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">constructor</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">super</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;red&quot;</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.isBig </span><span style="color: #FF7B72">===</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">true</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Property definitons from the original class\nare included in the new class.\nWe say the properties are \u201Cinherited\u201D.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">bigRedHouse</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">BigRedHouse</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(bigRedHouse.</span><span style="color: #D2A8FF">getColor</span><span style="color: #C9D1D9">()); </span><span style="color: #8B949E">// logs &quot;red&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(bigRedHouse.isBig); </span><span style="color: #8B949E">// logs &quot;true&quot;</span></span></code></pre>\n<p>Some CSS preprocessors use a similar\n<a href="https://sass-lang.com/documentation/at-rules/extend">concept of extension</a>,\nThis is not a feature of uncompiled CSS,\nso we will find another way.</p>\n<p>We can simulate this by defining and applying\nanother typer of selector, a CSS class.\n(To avoid ambiguity, I always refer to the selector\nas a \u201CCSS class\u201D.)</p>\n<p>Placing two selectors together (with no space between)\ncreates a new selector.\nBoth selectors much match an element to be applied.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #7EE787">section</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">background-color</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">red</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #7EE787">section</span><span style="color: #79C0FF">.big</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">font-size</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">2</span><span style="color: #FF7B72">rem</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;This has a red background&lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">class</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;big&quot;</span><span style="color: #C9D1D9">&gt;This has a red background and big text.&lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Chains of objects can inherit from eachother.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #7EE787">section</span><span style="color: #79C0FF">.big.fancy_blue</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">font-style</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">italic</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">background-color</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">blue</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">class</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;big fancy_blue&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  This has a blue background and big italicized text.</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<h2 id="type-mixins">Type: Mixins</h2>\n<p>Mixins are a way to give an object with properties directly.\nThey are less formal and there is not sanctioned syntax\nin javascript.</p>\n<p>We can use <code is:raw>Object.assign</code> to give an object properties.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">collegeStudent</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  canRead:</span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">surgeon</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">preformSurgery</span><span style="color: #C9D1D9">(){</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Math</span><span style="color: #C9D1D9">.</span><span style="color: #79C0FF">random</span><span style="color: #C9D1D9">() </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0.9</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;success&quot;</span><span style="color: #C9D1D9"> : </span><span style="color: #A5D6FF">&quot;...&quot;</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">person</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Person</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #79C0FF">Object</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">assign</span><span style="color: #C9D1D9">(person, surgeon, collegeStudent);</span></span>\n<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(person.canRead); </span><span style="color: #8B949E">// logs &quot;true&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(person.</span><span style="color: #D2A8FF">preformSurgery</span><span style="color: #C9D1D9">()); </span><span style="color: #8B949E">// logs &quot;success&quot; (I hope)</span></span></code></pre>\n<p>Notice that with mixins, an object can inherit from multiple objects\nwithout them having to inherit from one another.</p>\n<p>Recall the styles and markup from the previous \u201CExtension\u201D section:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #7EE787">section</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">background-color</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">red</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #7EE787">section</span><span style="color: #79C0FF">.big</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">font-size</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">2</span><span style="color: #FF7B72">rem</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"><span style="color: #7EE787">section</span><span style="color: #79C0FF">.big.fancy_blue</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">font-style</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">italic</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">background-color</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">blue</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;This has a red background&lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">class</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;big&quot;</span><span style="color: #C9D1D9">&gt;This has a red background and big text.&lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">class</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;big fancy_blue&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  This has a blue background and big italicized text.</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>We used the selectors together forming a heirchy,\nbut we could have split them apart.\nThis would allow them to apply to additional\nelements outside of said heirachy, in additon to the ones we defined</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #7EE787">section</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">background-color</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">red</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"><span style="color: #79C0FF">.big</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">font-size</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">2</span><span style="color: #FF7B72">rem</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"><span style="color: #79C0FF">.fancy_blue</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">font-style</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">italic</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">background-color</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">blue</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;This has a red background&lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">class</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;big&quot;</span><span style="color: #C9D1D9">&gt;This has a red background and big text.&lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">class</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;big fancy_blue&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  This has a blue background and big italicized text.</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">class</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;big&quot;</span><span style="color: #C9D1D9">&gt;This has big text, but no background defined.&lt;/</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">class</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;fancy_blue&quot;</span><span style="color: #C9D1D9">&gt;This has a blue background and italicized, but regular sized text.&lt;/</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Defining CSS selectors separately\nallows properties associated\nwith multiple to be mixed in\nto an HTML element.</p>\n<h2 id="prototypal">Prototypal</h2>\n<p>With prototypal inheritance,\nwe creaete a new object referencing another object \u2014\na \u201Cprototype\u201D.\nWe give the new object properties.\nWhen we attempt to access properties on the new object,\nif they do not exist; the request is proxied to the prototype.\nObjects that exist on on object\u2019s prototype, but not on the object itself,\nare considered \u201Cinherited\u201D.</p>\n<p>In javascript, we use object <code is:raw>Object.create</code> to create an object,\nwith another object as it\u2019s prototype.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">John</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  name: </span><span style="color: #A5D6FF">&quot;John&quot;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  age: </span><span style="color: #79C0FF">30</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">sayName</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.name;</span></span>\n<span class="line"><span style="color: #C9D1D9">  },</span></span>\n<span class="line"><span style="color: #C9D1D9">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">clone</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Object</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">create</span><span style="color: #C9D1D9">(John);</span></span>\n<span class="line"><span style="color: #C9D1D9">clone.name </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;N&#39;Hoj&quot;</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">clone.isEvil </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(John.age); </span><span style="color: #8B949E">// logs &quot;30&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(clone.age); </span><span style="color: #8B949E">// logs &quot;30&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(John.</span><span style="color: #D2A8FF">sayName</span><span style="color: #C9D1D9">()); </span><span style="color: #8B949E">// logs &quot;John&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(clone.</span><span style="color: #D2A8FF">sayName</span><span style="color: #C9D1D9">()); </span><span style="color: #8B949E">// logs &quot;N&#39;Hoj&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">!!</span><span style="color: #C9D1D9">John.isEvil); </span><span style="color: #8B949E">// logs &quot;false&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">!!</span><span style="color: #C9D1D9">clone.isEvil); </span><span style="color: #8B949E">// logs &quot;true&quot;</span></span></code></pre>\n<p>When not defined by a selector targeting an element,\nsome CSS properties assume a default value.\nOthers take on the value of their parent.</p>\n<p>It\u2019s not completely intuitive to figure out which\nproperties are inherited.\nCheckout <a href="https://stackoverflow.com/a/5612360/1290781">this stackoverflow answer</a>\nfor guidance.</p>\n<p>In this case elements inherit properties from thier parent elements.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #7EE787">section</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">color</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">red</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  Text in this section is red as defined.</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9">&gt;Text is here is red because it&#39;s inherited from above.&lt;/</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<h2 id="summary">Summary</h2>\n<p>Once cleard of initial styles, HTML elements can be applied</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">1. via style selector or directly</span></span>\n<span class="line"><span style="color: #c9d1d9">2. via</span></span></code></pre>\n<h2 id="problems">Problems</h2>\n<p>A lot of problems stem from misunderstanings of\ncss specificity and inheritence.</p>\n<p>Mental tree model for inhheritne and spefificity\nCreate components in increating specificity.\nUse BEM for sub components?\nFrom what I know about rocket science, it\u2019s honestly a bit harder\nRocket science isn\u2019t actually that difficult onve</p>\n<p>When a class extends another class,\nit\u2019s said to inherit the</p>\n<p>We\u201D learn more about specificity\nand how you can structure your style sheets\nto avoid shooing yousself in the foot.</p>\n<h2 id="footnotes">Footnotes</h2>\n<section data-footnotes class="footnotes"><h2 id="footnote-label" class="sr-only">Footnotes</h2>\n<ol>\n<li id="user-content-fn-1">\n<p>not \u201Cproperties\u201D,\nthough we often use these interchangeably\nwhen dealing whit chasses) <a href="#user-content-fnref-1" data-footnote-backref class="data-footnote-backref" aria-label="Back to content">\u21A9</a></p>\n</li>\n</ol>\n</section>' };
const frontmatter$1 = { "astro": { "headers": [{ "depth": 1, "slug": "component-inheritence", "text": "Component Inheritence" }, { "depth": 2, "slug": "normalize-and-reset", "text": "Normalize and Reset" }, { "depth": 2, "slug": "type-classical-inheritence", "text": "Type: Classical Inheritence" }, { "depth": 3, "slug": "instantiation-and-application", "text": "Instantiation and application" }, { "depth": 3, "slug": "extension", "text": "Extension" }, { "depth": 2, "slug": "type-mixins", "text": "Type: Mixins" }, { "depth": 2, "slug": "prototypal", "text": "Prototypal" }, { "depth": 2, "slug": "summary", "text": "Summary" }, { "depth": 2, "slug": "problems", "text": "Problems" }, { "depth": 2, "slug": "footnotes", "text": "Footnotes" }, { "depth": 2, "slug": "footnote-label", "text": "Footnotes" }], "source": '# Component Inheritence\n\nThis is Part 1 in a series.\nWe learn what it takes to create a framework\nin which we build components using\nclean and uncomplied styles along with organized and meanigful markup.\n\nInheritance is a useful concept.\nIt allows programmers to streamline the way in which they\ndesign objects by reusing code.\n\nIn this article, we take a look at how inheritance works\nthrough the eyes of a JavaScript programmer\nand understand how it applies when applying CSS.\n\n## Normalize and Reset\n\nWhile they mostly work the same,\ndifferent apply some browser-based styles\nto each page.\nFor consistency,\nit is always a good idea to use a [normalize]()\nany time you work with CSS.\n\nWe separate concerns -- meaning and style --\nby handing each with HTML and CSS respectively.\nWe go beyond using a normalize and use a [reset]()\nto strip **all** styles associated with the HTML.\n\n## Type: Classical Inheritence\n\nA _class_ is a basic object that acts as a blueprint\nto crete other objects.\n\nIn javascript we create a class with a number of\nproperty definitions[^1].\n\n```javascript\nconst House = class {\n  // "House" is like a blueprint for an actual house\n  constructor(color = "red") {\n    this.color = color;\n  }\n  paint(color) {\n    this.color = color;\n  }\n  getColor() {\n    return this.color;\n  }\n};\n```\n\nIn a way, _selectors_ in CSS behave like classes.\n\n```css\nsection {\n  background-color: var(--color, red);\n}\n```\n\n### Instantiation and application\n\nMost languages use the "new" keyword to create\nan "instance" of the class.\nThis is an object with the properties defined by the class.\n\n```javascript\nconst house = new Class("red"); // "house" is like the actual house\nconsole.log(house.getColor()); // logs "red"\nhouse.paint("blue");\nconsole.log(house.getColor()); // logs "blue"\n```\n\nRather than creating a new object,\nproperties defined by a selector are\nautomatically applied to HTML elements\nthat they match.\n\n```html\n<section>This has a red background</section>\n<section style="--color:blue">This has a blue background</section>\n```\n\n### Extension\n\nClasses can be "extended".\n\n```javascript\nclass BigRedHouse extends House class {\n  constructor() {\n    super("red");\n    this.isBig === true\n  }\n}\n```\n\nProperty definitons from the original class\nare included in the new class.\nWe say the properties are "inherited".\n\n```javascript\nconst bigRedHouse = new BigRedHouse();\nconsole.log(bigRedHouse.getColor()); // logs "red"\nconsole.log(bigRedHouse.isBig); // logs "true"\n```\n\nSome CSS preprocessors use a similar\n[concept of extension](https://sass-lang.com/documentation/at-rules/extend),\nThis is not a feature of uncompiled CSS,\nso we will find another way.\n\nWe can simulate this by defining and applying\nanother typer of selector, a CSS class.\n(To avoid ambiguity, I always refer to the selector\nas a "CSS class".)\n\nPlacing two selectors together (with no space between)\ncreates a new selector.\nBoth selectors much match an element to be applied.\n\n```css\nsection {\n  background-color: red;\n}\n\nsection.big {\n  font-size: 2rem;\n}\n```\n\n```html\n<section>This has a red background</section>\n<section class="big">This has a red background and big text.</section>\n```\n\nChains of objects can inherit from eachother.\n\n```css\nsection.big.fancy_blue {\n  font-style: italic;\n  background-color: blue;\n}\n```\n\n```html\n<section class="big fancy_blue">\n  This has a blue background and big italicized text.\n</section>\n```\n\n## Type: Mixins\n\nMixins are a way to give an object with properties directly.\nThey are less formal and there is not sanctioned syntax\nin javascript.\n\nWe can use `Object.assign` to give an object properties.\n\n```javascript\nconst collegeStudent = {\n  canRead:true;\n}\nconst surgeon = {\n  preformSurgery(){\n    return Math.random() > 0.9 "success" : "...";\n  }\n}\n\nconst person = new Person();\nObject.assign(person, surgeon, collegeStudent);\nconsole.log(person.canRead); // logs "true"\nconsole.log(person.preformSurgery()); // logs "success" (I hope)\n```\n\nNotice that with mixins, an object can inherit from multiple objects\nwithout them having to inherit from one another.\n\nRecall the styles and markup from the previous "Extension" section:\n\n```css\nsection {\n  background-color: red;\n}\n\nsection.big {\n  font-size: 2rem;\n}\nsection.big.fancy_blue {\n  font-style: italic;\n  background-color: blue;\n}\n```\n\n```html\n<section>This has a red background</section>\n<section class="big">This has a red background and big text.</section>\n<section class="big fancy_blue">\n  This has a blue background and big italicized text.\n</section>\n```\n\nWe used the selectors together forming a heirchy,\nbut we could have split them apart.\nThis would allow them to apply to additional\nelements outside of said heirachy, in additon to the ones we defined\n\n```css\nsection {\n  background-color: red;\n}\n.big {\n  font-size: 2rem;\n}\n.fancy_blue {\n  font-style: italic;\n  background-color: blue;\n}\n```\n\n```html\n<section>This has a red background</section>\n<section class="big">This has a red background and big text.</section>\n<section class="big fancy_blue">\n  This has a blue background and big italicized text.\n</section>\n<div class="big">This has big text, but no background defined.</div>\n<section class="fancy_blue">This has a blue background and italicized, but regular sized text.</div>\n```\n\nDefining CSS selectors separately\nallows properties associated\nwith multiple to be mixed in\nto an HTML element.\n\n## Prototypal\n\nWith prototypal inheritance,\nwe creaete a new object referencing another object --\na "prototype".\nWe give the new object properties.\nWhen we attempt to access properties on the new object,\nif they do not exist; the request is proxied to the prototype.\nObjects that exist on on object\'s prototype, but not on the object itself,\nare considered "inherited".\n\nIn javascript, we use object `Object.create` to create an object,\nwith another object as it\'s prototype.\n\n```javascript\nconst John = {\n  name: "John",\n  age: 30,\n  sayName() {\n    return this.name;\n  },\n};\n\nconst clone = Object.create(John);\nclone.name = "N\'Hoj";\nclone.isEvil = true;\nconsole.log(John.age); // logs "30"\nconsole.log(clone.age); // logs "30"\nconsole.log(John.sayName()); // logs "John"\nconsole.log(clone.sayName()); // logs "N\'Hoj"\nconsole.log(!!John.isEvil); // logs "false"\nconsole.log(!!clone.isEvil); // logs "true"\n```\n\nWhen not defined by a selector targeting an element,\nsome CSS properties assume a default value.\nOthers take on the value of their parent.\n\nIt\'s not completely intuitive to figure out which\nproperties are inherited.\nCheckout [this stackoverflow answer](https://stackoverflow.com/a/5612360/1290781)\nfor guidance.\n\nIn this case elements inherit properties from thier parent elements.\n\n```css\nsection {\n  color: red;\n}\n```\n\n```html\n<section>\n  Text in this section is red as defined.\n  <div>Text is here is red because it\'s inherited from above.</div>\n</section>\n```\n\n## Summary\n\nOnce cleard of initial styles, HTML elements can be applied\n\n    1. via style selector or directly\n    2. via\n\n## Problems\n\nA lot of problems stem from misunderstanings of\ncss specificity and inheritence.\n\nMental tree model for inhheritne and spefificity\nCreate components in increating specificity.\nUse BEM for sub components?\nFrom what I know about rocket science, it\'s honestly a bit harder\nRocket science isn\'t actually that difficult onve\n\nWhen a class extends another class,\nit\'s said to inherit the\n\nWe\'\' learn more about specificity\nand how you can structure your style sheets\nto avoid shooing yousself in the foot.\n\n## Footnotes\n\n[^1]:\n    not "properties",\n    though we often use these interchangeably\n    when dealing whit chasses)\n', "html": '<h1 id="component-inheritence">Component Inheritence</h1>\n<p>This is Part 1 in a series.\nWe learn what it takes to create a framework\nin which we build components using\nclean and uncomplied styles along with organized and meanigful markup.</p>\n<p>Inheritance is a useful concept.\nIt allows programmers to streamline the way in which they\ndesign objects by reusing code.</p>\n<p>In this article, we take a look at how inheritance works\nthrough the eyes of a JavaScript programmer\nand understand how it applies when applying CSS.</p>\n<h2 id="normalize-and-reset">Normalize and Reset</h2>\n<p>While they mostly work the same,\ndifferent apply some browser-based styles\nto each page.\nFor consistency,\nit is always a good idea to use a <a href="">normalize</a>\nany time you work with CSS.</p>\n<p>We separate concerns \u2014 meaning and style \u2014\nby handing each with HTML and CSS respectively.\nWe go beyond using a normalize and use a <a href="">reset</a>\nto strip <strong>all</strong> styles associated with the HTML.</p>\n<h2 id="type-classical-inheritence">Type: Classical Inheritence</h2>\n<p>A <em>class</em> is a basic object that acts as a blueprint\nto crete other objects.</p>\n<p>In javascript we create a class with a number of\nproperty definitions<sup><a href="#user-content-fn-1" id="user-content-fnref-1" data-footnote-ref aria-describedby="footnote-label">1</a></sup>.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">House</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">class</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// &quot;House&quot; is like a blueprint for an actual house</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">constructor</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">color</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;red&quot;</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.color </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> color;</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">paint</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">color</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.color </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> color;</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">getColor</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.color;</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">};</span></span></code></pre>\n<p>In a way, <em>selectors</em> in CSS behave like classes.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #7EE787">section</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">background-color</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">var</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">--color</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">red</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<h3 id="instantiation-and-application">Instantiation and application</h3>\n<p>Most languages use the \u201Cnew\u201D keyword to create\nan \u201Cinstance\u201D of the class.\nThis is an object with the properties defined by the class.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">house</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Class</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;red&quot;</span><span style="color: #C9D1D9">); </span><span style="color: #8B949E">// &quot;house&quot; is like the actual house</span></span>\n<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(house.</span><span style="color: #D2A8FF">getColor</span><span style="color: #C9D1D9">()); </span><span style="color: #8B949E">// logs &quot;red&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">house.</span><span style="color: #D2A8FF">paint</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;blue&quot;</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(house.</span><span style="color: #D2A8FF">getColor</span><span style="color: #C9D1D9">()); </span><span style="color: #8B949E">// logs &quot;blue&quot;</span></span></code></pre>\n<p>Rather than creating a new object,\nproperties defined by a selector are\nautomatically applied to HTML elements\nthat they match.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;This has a red background&lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">style</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;</span><span style="color: #C9D1D9">--color:blue&quot;</span><span style="color: #C9D1D9">&gt;This has a blue background&lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<h3 id="extension">Extension</h3>\n<p>Classes can be \u201Cextended\u201D.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">class</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">BigRedHouse</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">extends</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">House</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">class</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">constructor</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">super</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;red&quot;</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.isBig </span><span style="color: #FF7B72">===</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">true</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Property definitons from the original class\nare included in the new class.\nWe say the properties are \u201Cinherited\u201D.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">bigRedHouse</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">BigRedHouse</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(bigRedHouse.</span><span style="color: #D2A8FF">getColor</span><span style="color: #C9D1D9">()); </span><span style="color: #8B949E">// logs &quot;red&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(bigRedHouse.isBig); </span><span style="color: #8B949E">// logs &quot;true&quot;</span></span></code></pre>\n<p>Some CSS preprocessors use a similar\n<a href="https://sass-lang.com/documentation/at-rules/extend">concept of extension</a>,\nThis is not a feature of uncompiled CSS,\nso we will find another way.</p>\n<p>We can simulate this by defining and applying\nanother typer of selector, a CSS class.\n(To avoid ambiguity, I always refer to the selector\nas a \u201CCSS class\u201D.)</p>\n<p>Placing two selectors together (with no space between)\ncreates a new selector.\nBoth selectors much match an element to be applied.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #7EE787">section</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">background-color</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">red</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #7EE787">section</span><span style="color: #79C0FF">.big</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">font-size</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">2</span><span style="color: #FF7B72">rem</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;This has a red background&lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">class</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;big&quot;</span><span style="color: #C9D1D9">&gt;This has a red background and big text.&lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Chains of objects can inherit from eachother.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #7EE787">section</span><span style="color: #79C0FF">.big.fancy_blue</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">font-style</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">italic</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">background-color</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">blue</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">class</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;big fancy_blue&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  This has a blue background and big italicized text.</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<h2 id="type-mixins">Type: Mixins</h2>\n<p>Mixins are a way to give an object with properties directly.\nThey are less formal and there is not sanctioned syntax\nin javascript.</p>\n<p>We can use <code is:raw>Object.assign</code> to give an object properties.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">collegeStudent</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  canRead:</span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">surgeon</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">preformSurgery</span><span style="color: #C9D1D9">(){</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Math</span><span style="color: #C9D1D9">.</span><span style="color: #79C0FF">random</span><span style="color: #C9D1D9">() </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0.9</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;success&quot;</span><span style="color: #C9D1D9"> : </span><span style="color: #A5D6FF">&quot;...&quot;</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">person</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Person</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #79C0FF">Object</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">assign</span><span style="color: #C9D1D9">(person, surgeon, collegeStudent);</span></span>\n<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(person.canRead); </span><span style="color: #8B949E">// logs &quot;true&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(person.</span><span style="color: #D2A8FF">preformSurgery</span><span style="color: #C9D1D9">()); </span><span style="color: #8B949E">// logs &quot;success&quot; (I hope)</span></span></code></pre>\n<p>Notice that with mixins, an object can inherit from multiple objects\nwithout them having to inherit from one another.</p>\n<p>Recall the styles and markup from the previous \u201CExtension\u201D section:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #7EE787">section</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">background-color</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">red</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #7EE787">section</span><span style="color: #79C0FF">.big</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">font-size</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">2</span><span style="color: #FF7B72">rem</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"><span style="color: #7EE787">section</span><span style="color: #79C0FF">.big.fancy_blue</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">font-style</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">italic</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">background-color</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">blue</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;This has a red background&lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">class</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;big&quot;</span><span style="color: #C9D1D9">&gt;This has a red background and big text.&lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">class</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;big fancy_blue&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  This has a blue background and big italicized text.</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>We used the selectors together forming a heirchy,\nbut we could have split them apart.\nThis would allow them to apply to additional\nelements outside of said heirachy, in additon to the ones we defined</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #7EE787">section</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">background-color</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">red</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"><span style="color: #79C0FF">.big</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">font-size</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">2</span><span style="color: #FF7B72">rem</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"><span style="color: #79C0FF">.fancy_blue</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">font-style</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">italic</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">background-color</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">blue</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;This has a red background&lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">class</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;big&quot;</span><span style="color: #C9D1D9">&gt;This has a red background and big text.&lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">class</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;big fancy_blue&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  This has a blue background and big italicized text.</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">class</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;big&quot;</span><span style="color: #C9D1D9">&gt;This has big text, but no background defined.&lt;/</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">class</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;fancy_blue&quot;</span><span style="color: #C9D1D9">&gt;This has a blue background and italicized, but regular sized text.&lt;/</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Defining CSS selectors separately\nallows properties associated\nwith multiple to be mixed in\nto an HTML element.</p>\n<h2 id="prototypal">Prototypal</h2>\n<p>With prototypal inheritance,\nwe creaete a new object referencing another object \u2014\na \u201Cprototype\u201D.\nWe give the new object properties.\nWhen we attempt to access properties on the new object,\nif they do not exist; the request is proxied to the prototype.\nObjects that exist on on object\u2019s prototype, but not on the object itself,\nare considered \u201Cinherited\u201D.</p>\n<p>In javascript, we use object <code is:raw>Object.create</code> to create an object,\nwith another object as it\u2019s prototype.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">John</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  name: </span><span style="color: #A5D6FF">&quot;John&quot;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  age: </span><span style="color: #79C0FF">30</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">sayName</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.name;</span></span>\n<span class="line"><span style="color: #C9D1D9">  },</span></span>\n<span class="line"><span style="color: #C9D1D9">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">clone</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Object</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">create</span><span style="color: #C9D1D9">(John);</span></span>\n<span class="line"><span style="color: #C9D1D9">clone.name </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;N&#39;Hoj&quot;</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">clone.isEvil </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(John.age); </span><span style="color: #8B949E">// logs &quot;30&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(clone.age); </span><span style="color: #8B949E">// logs &quot;30&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(John.</span><span style="color: #D2A8FF">sayName</span><span style="color: #C9D1D9">()); </span><span style="color: #8B949E">// logs &quot;John&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(clone.</span><span style="color: #D2A8FF">sayName</span><span style="color: #C9D1D9">()); </span><span style="color: #8B949E">// logs &quot;N&#39;Hoj&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">!!</span><span style="color: #C9D1D9">John.isEvil); </span><span style="color: #8B949E">// logs &quot;false&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">!!</span><span style="color: #C9D1D9">clone.isEvil); </span><span style="color: #8B949E">// logs &quot;true&quot;</span></span></code></pre>\n<p>When not defined by a selector targeting an element,\nsome CSS properties assume a default value.\nOthers take on the value of their parent.</p>\n<p>It\u2019s not completely intuitive to figure out which\nproperties are inherited.\nCheckout <a href="https://stackoverflow.com/a/5612360/1290781">this stackoverflow answer</a>\nfor guidance.</p>\n<p>In this case elements inherit properties from thier parent elements.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #7EE787">section</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">color</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">red</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  Text in this section is red as defined.</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9">&gt;Text is here is red because it&#39;s inherited from above.&lt;/</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<h2 id="summary">Summary</h2>\n<p>Once cleard of initial styles, HTML elements can be applied</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">1. via style selector or directly</span></span>\n<span class="line"><span style="color: #c9d1d9">2. via</span></span></code></pre>\n<h2 id="problems">Problems</h2>\n<p>A lot of problems stem from misunderstanings of\ncss specificity and inheritence.</p>\n<p>Mental tree model for inhheritne and spefificity\nCreate components in increating specificity.\nUse BEM for sub components?\nFrom what I know about rocket science, it\u2019s honestly a bit harder\nRocket science isn\u2019t actually that difficult onve</p>\n<p>When a class extends another class,\nit\u2019s said to inherit the</p>\n<p>We\u201D learn more about specificity\nand how you can structure your style sheets\nto avoid shooing yousself in the foot.</p>\n<h2 id="footnotes">Footnotes</h2>\n<section data-footnotes class="footnotes"><h2 id="footnote-label" class="sr-only">Footnotes</h2>\n<ol>\n<li id="user-content-fn-1">\n<p>not \u201Cproperties\u201D,\nthough we often use these interchangeably\nwhen dealing whit chasses) <a href="#user-content-fnref-1" data-footnote-backref class="data-footnote-backref" aria-label="Back to content">\u21A9</a></p>\n</li>\n</ol>\n</section>' } };
const $$metadata$7 = createMetadata("/src/pages/blog/posts/component.md", { modules: [], hydratedComponents: [], clientOnlyComponents: [], hydrationDirectives: /* @__PURE__ */ new Set([]), hoisted: [] });
const $$Astro$7 = createAstro("/src/pages/blog/posts/component.md", "https://astro.build", "file:///home/runner/work/johnhenry.github.io/johnhenry.github.io/");
const $$Component = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$7, $$props, $$slots);
  Astro2.self = $$Component;
  return render$1`<h1 id="component-inheritence">Component Inheritence</h1>
<p>This is Part 1 in a series.
We learn what it takes to create a framework
in which we build components using
clean and uncomplied styles along with organized and meanigful markup.</p>
<p>Inheritance is a useful concept.
It allows programmers to streamline the way in which they
design objects by reusing code.</p>
<p>In this article, we take a look at how inheritance works
through the eyes of a JavaScript programmer
and understand how it applies when applying CSS.</p>
<h2 id="normalize-and-reset">Normalize and Reset</h2>
<p>While they mostly work the same,
different apply some browser-based styles
to each page.
For consistency,
it is always a good idea to use a <a href="">normalize</a>
any time you work with CSS.</p>
<p>We separate concerns — meaning and style —
by handing each with HTML and CSS respectively.
We go beyond using a normalize and use a <a href="">reset</a>
to strip <strong>all</strong> styles associated with the HTML.</p>
<h2 id="type-classical-inheritence">Type: Classical Inheritence</h2>
<p>A <em>class</em> is a basic object that acts as a blueprint
to crete other objects.</p>
<p>In javascript we create a class with a number of
property definitions<sup><a href="#user-content-fn-1" id="user-content-fnref-1" data-footnote-ref aria-describedby="footnote-label">1</a></sup>.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">House</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">class</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// &quot;House&quot; is like a blueprint for an actual house</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">constructor</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">color</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;red&quot;</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.color </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> color;</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">paint</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">color</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.color </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> color;</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">getColor</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.color;</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"><span style="color: #C9D1D9">};</span></span></code></pre>
<p>In a way, <em>selectors</em> in CSS behave like classes.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #7EE787">section</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">background-color</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">var</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">--color</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">red</span><span style="color: #C9D1D9">);</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<h3 id="instantiation-and-application">Instantiation and application</h3>
<p>Most languages use the “new” keyword to create
an “instance” of the class.
This is an object with the properties defined by the class.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">house</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Class</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;red&quot;</span><span style="color: #C9D1D9">); </span><span style="color: #8B949E">// &quot;house&quot; is like the actual house</span></span>
<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(house.</span><span style="color: #D2A8FF">getColor</span><span style="color: #C9D1D9">()); </span><span style="color: #8B949E">// logs &quot;red&quot;</span></span>
<span class="line"><span style="color: #C9D1D9">house.</span><span style="color: #D2A8FF">paint</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;blue&quot;</span><span style="color: #C9D1D9">);</span></span>
<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(house.</span><span style="color: #D2A8FF">getColor</span><span style="color: #C9D1D9">()); </span><span style="color: #8B949E">// logs &quot;blue&quot;</span></span></code></pre>
<p>Rather than creating a new object,
properties defined by a selector are
automatically applied to HTML elements
that they match.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;This has a red background&lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">style</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;</span><span style="color: #C9D1D9">--color:blue&quot;</span><span style="color: #C9D1D9">&gt;This has a blue background&lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<h3 id="extension">Extension</h3>
<p>Classes can be “extended”.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">class</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">BigRedHouse</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">extends</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">House</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">class</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">constructor</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">super</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;red&quot;</span><span style="color: #C9D1D9">);</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.isBig </span><span style="color: #FF7B72">===</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">true</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>Property definitons from the original class
are included in the new class.
We say the properties are “inherited”.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">bigRedHouse</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">BigRedHouse</span><span style="color: #C9D1D9">();</span></span>
<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(bigRedHouse.</span><span style="color: #D2A8FF">getColor</span><span style="color: #C9D1D9">()); </span><span style="color: #8B949E">// logs &quot;red&quot;</span></span>
<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(bigRedHouse.isBig); </span><span style="color: #8B949E">// logs &quot;true&quot;</span></span></code></pre>
<p>Some CSS preprocessors use a similar
<a href="https://sass-lang.com/documentation/at-rules/extend">concept of extension</a>,
This is not a feature of uncompiled CSS,
so we will find another way.</p>
<p>We can simulate this by defining and applying
another typer of selector, a CSS class.
(To avoid ambiguity, I always refer to the selector
as a “CSS class”.)</p>
<p>Placing two selectors together (with no space between)
creates a new selector.
Both selectors much match an element to be applied.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #7EE787">section</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">background-color</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">red</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7EE787">section</span><span style="color: #79C0FF">.big</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">font-size</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">2</span><span style="color: #FF7B72">rem</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;This has a red background&lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">class</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;big&quot;</span><span style="color: #C9D1D9">&gt;This has a red background and big text.&lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>Chains of objects can inherit from eachother.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #7EE787">section</span><span style="color: #79C0FF">.big.fancy_blue</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">font-style</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">italic</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">background-color</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">blue</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">class</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;big fancy_blue&quot;</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  This has a blue background and big italicized text.</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<h2 id="type-mixins">Type: Mixins</h2>
<p>Mixins are a way to give an object with properties directly.
They are less formal and there is not sanctioned syntax
in javascript.</p>
<p>We can use <code>Object.assign</code> to give an object properties.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">collegeStudent</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  canRead:</span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">surgeon</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">preformSurgery</span><span style="color: #C9D1D9">(){</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Math</span><span style="color: #C9D1D9">.</span><span style="color: #79C0FF">random</span><span style="color: #C9D1D9">() </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0.9</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;success&quot;</span><span style="color: #C9D1D9"> : </span><span style="color: #A5D6FF">&quot;...&quot;</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">person</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Person</span><span style="color: #C9D1D9">();</span></span>
<span class="line"><span style="color: #79C0FF">Object</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">assign</span><span style="color: #C9D1D9">(person, surgeon, collegeStudent);</span></span>
<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(person.canRead); </span><span style="color: #8B949E">// logs &quot;true&quot;</span></span>
<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(person.</span><span style="color: #D2A8FF">preformSurgery</span><span style="color: #C9D1D9">()); </span><span style="color: #8B949E">// logs &quot;success&quot; (I hope)</span></span></code></pre>
<p>Notice that with mixins, an object can inherit from multiple objects
without them having to inherit from one another.</p>
<p>Recall the styles and markup from the previous “Extension” section:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #7EE787">section</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">background-color</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">red</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7EE787">section</span><span style="color: #79C0FF">.big</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">font-size</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">2</span><span style="color: #FF7B72">rem</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"><span style="color: #7EE787">section</span><span style="color: #79C0FF">.big.fancy_blue</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">font-style</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">italic</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">background-color</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">blue</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;This has a red background&lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">class</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;big&quot;</span><span style="color: #C9D1D9">&gt;This has a red background and big text.&lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">class</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;big fancy_blue&quot;</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  This has a blue background and big italicized text.</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>We used the selectors together forming a heirchy,
but we could have split them apart.
This would allow them to apply to additional
elements outside of said heirachy, in additon to the ones we defined</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #7EE787">section</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">background-color</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">red</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"><span style="color: #79C0FF">.big</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">font-size</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">2</span><span style="color: #FF7B72">rem</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"><span style="color: #79C0FF">.fancy_blue</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">font-style</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">italic</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">background-color</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">blue</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;This has a red background&lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">class</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;big&quot;</span><span style="color: #C9D1D9">&gt;This has a red background and big text.&lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">class</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;big fancy_blue&quot;</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  This has a blue background and big italicized text.</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">class</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;big&quot;</span><span style="color: #C9D1D9">&gt;This has big text, but no background defined.&lt;/</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">class</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;fancy_blue&quot;</span><span style="color: #C9D1D9">&gt;This has a blue background and italicized, but regular sized text.&lt;/</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>Defining CSS selectors separately
allows properties associated
with multiple to be mixed in
to an HTML element.</p>
<h2 id="prototypal">Prototypal</h2>
<p>With prototypal inheritance,
we creaete a new object referencing another object —
a “prototype”.
We give the new object properties.
When we attempt to access properties on the new object,
if they do not exist; the request is proxied to the prototype.
Objects that exist on on object’s prototype, but not on the object itself,
are considered “inherited”.</p>
<p>In javascript, we use object <code>Object.create</code> to create an object,
with another object as it’s prototype.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">John</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  name: </span><span style="color: #A5D6FF">&quot;John&quot;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">  age: </span><span style="color: #79C0FF">30</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">sayName</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.name;</span></span>
<span class="line"><span style="color: #C9D1D9">  },</span></span>
<span class="line"><span style="color: #C9D1D9">};</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">clone</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Object</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">create</span><span style="color: #C9D1D9">(John);</span></span>
<span class="line"><span style="color: #C9D1D9">clone.name </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;N&#39;Hoj&quot;</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #C9D1D9">clone.isEvil </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(John.age); </span><span style="color: #8B949E">// logs &quot;30&quot;</span></span>
<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(clone.age); </span><span style="color: #8B949E">// logs &quot;30&quot;</span></span>
<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(John.</span><span style="color: #D2A8FF">sayName</span><span style="color: #C9D1D9">()); </span><span style="color: #8B949E">// logs &quot;John&quot;</span></span>
<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(clone.</span><span style="color: #D2A8FF">sayName</span><span style="color: #C9D1D9">()); </span><span style="color: #8B949E">// logs &quot;N&#39;Hoj&quot;</span></span>
<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">!!</span><span style="color: #C9D1D9">John.isEvil); </span><span style="color: #8B949E">// logs &quot;false&quot;</span></span>
<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">!!</span><span style="color: #C9D1D9">clone.isEvil); </span><span style="color: #8B949E">// logs &quot;true&quot;</span></span></code></pre>
<p>When not defined by a selector targeting an element,
some CSS properties assume a default value.
Others take on the value of their parent.</p>
<p>It’s not completely intuitive to figure out which
properties are inherited.
Checkout <a href="https://stackoverflow.com/a/5612360/1290781">this stackoverflow answer</a>
for guidance.</p>
<p>In this case elements inherit properties from thier parent elements.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #7EE787">section</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">color</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">red</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  Text in this section is red as defined.</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9">&gt;Text is here is red because it&#39;s inherited from above.&lt;/</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">section</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<h2 id="summary">Summary</h2>
<p>Once cleard of initial styles, HTML elements can be applied</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">1. via style selector or directly</span></span>
<span class="line"><span style="color: #c9d1d9">2. via</span></span></code></pre>
<h2 id="problems">Problems</h2>
<p>A lot of problems stem from misunderstanings of
css specificity and inheritence.</p>
<p>Mental tree model for inhheritne and spefificity
Create components in increating specificity.
Use BEM for sub components?
From what I know about rocket science, it’s honestly a bit harder
Rocket science isn’t actually that difficult onve</p>
<p>When a class extends another class,
it’s said to inherit the</p>
<p>We” learn more about specificity
and how you can structure your style sheets
to avoid shooing yousself in the foot.</p>
<h2 id="footnotes">Footnotes</h2>
<section data-footnotes class="footnotes"><h2 id="footnote-label" class="sr-only">Footnotes</h2>
<ol>
<li id="user-content-fn-1">
<p>not “properties”,
though we often use these interchangeably
when dealing whit chasses) <a href="#user-content-fnref-1" data-footnote-backref class="data-footnote-backref" aria-label="Back to content">↩</a></p>
</li>
</ol>
</section>`;
});

var _page7 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  metadata: metadata$1,
  frontmatter: frontmatter$1,
  $$metadata: $$metadata$7,
  'default': $$Component
}, Symbol.toStringTag, { value: 'Module' }));

const metadata = { "headers": [{ "depth": 2, "slug": "introduction-and-openess", "text": "Introduction and Openess" }, { "depth": 2, "slug": "declarative-composable-html", "text": "Declarative Composable HTML" }, { "depth": 1, "slug": "reset", "text": "reset" }, { "depth": 2, "slug": "exceptions", "text": "Exceptions" }, { "depth": 2, "slug": "unansered-questions", "text": "Unansered Questions" }, { "depth": 2, "slug": "future", "text": "Future" }], "source": `
_Author\u2019s Note: This is a **Highly Opinionated** guide. Your experiences and preferences may differ._

## Introduction and Openess

I've learned most of what I have
by looking at what others have built before me.
The ability to select "view source"
from the browser's context menu
has been key to what I've been able to learn.
as a developer.
Being able to use and examine
source code in public repositories
has also been a boon.

With this in mind,
I set out to create a website
with components that are easy to extract
and use in other projects.

To facilitate this,
nearly all of the scripts and styles
are published as importable modules
located in the /lib/ directory.
They can be imported
directly into most modern web
(or [deno](https://deno.land))
applications without modification.
They are uncompressed and feature comments.
As such, they may not be suitable for production;
but using modern tooling,
you can get around this.
They are also available in their
[own github repository](http://github.johnhenry.io/lib)
where I am currently working
on documentation detailing
how you too can use these modules
in your own applications.

## Declarative Composable HTML

Javascript and CSS both natively support
importing modules, but HTML does not.
Though we import scripts and styles directly;
we use a static compiler in place of markup.

For this site, I use [Astro](https://astro.build)
as a framework to compose and compile HTML components
written as "./astro" files.
I don't publish these directly at http://johnhenry.io/lib/
as you can't simply pull them into an application
in the same way you do javascript files;
but they are available on
[this site's github repository](https://github.com/johnhenry.github.io)
and I may publish them elsewhere in the future.

HTML Tags are semantic components.
Classes represent variations

# reset

## Exceptions

For the most part, I try to keep the style separate from the markup.
That said, there are a few exceptions where I use the HTML structure

For example, for the buttons in the .widget components,
I've wrapped each letter in a span then styled those as a flex-box for the desired effect.

## Unansered Questions

## Future

Astro 21 -- embed components into blog posts

/\\*

- style a component primarily by **tag** if it is reusable throughtout
  the application
- add a **class** for slight variations
  _/
  /_
- style components primarily by **class** if its semantic interpretation goes beyond the set of built-in HTML tags
  \\*/
`, "html": '<p><em>Author\u2019s Note: This is a <strong>Highly Opinionated</strong> guide. Your experiences and preferences may differ.</em></p>\n<h2 id="introduction-and-openess">Introduction and Openess</h2>\n<p>I\u2019ve learned most of what I have\nby looking at what others have built before me.\nThe ability to select \u201Cview source\u201D\nfrom the browser\u2019s context menu\nhas been key to what I\u2019ve been able to learn.\nas a developer.\nBeing able to use and examine\nsource code in public repositories\nhas also been a boon.</p>\n<p>With this in mind,\nI set out to create a website\nwith components that are easy to extract\nand use in other projects.</p>\n<p>To facilitate this,\nnearly all of the scripts and styles\nare published as importable modules\nlocated in the /lib/ directory.\nThey can be imported\ndirectly into most modern web\n(or <a href="https://deno.land">deno</a>)\napplications without modification.\nThey are uncompressed and feature comments.\nAs such, they may not be suitable for production;\nbut using modern tooling,\nyou can get around this.\nThey are also available in their\n<a href="http://github.johnhenry.io/lib">own github repository</a>\nwhere I am currently working\non documentation detailing\nhow you too can use these modules\nin your own applications.</p>\n<h2 id="declarative-composable-html">Declarative Composable HTML</h2>\n<p>Javascript and CSS both natively support\nimporting modules, but HTML does not.\nThough we import scripts and styles directly;\nwe use a static compiler in place of markup.</p>\n<p>For this site, I use <a href="https://astro.build">Astro</a>\nas a framework to compose and compile HTML components\nwritten as \u201C./astro\u201D files.\nI don\u2019t publish these directly at <a href="http://johnhenry.io/lib/">http://johnhenry.io/lib/</a>\nas you can\u2019t simply pull them into an application\nin the same way you do javascript files;\nbut they are available on\n<a href="https://github.com/johnhenry.github.io">this site\u2019s github repository</a>\nand I may publish them elsewhere in the future.</p>\n<p>HTML Tags are semantic components.\nClasses represent variations</p>\n<h1 id="reset">reset</h1>\n<h2 id="exceptions">Exceptions</h2>\n<p>For the most part, I try to keep the style separate from the markup.\nThat said, there are a few exceptions where I use the HTML structure</p>\n<p>For example, for the buttons in the .widget components,\nI\u2019ve wrapped each letter in a span then styled those as a flex-box for the desired effect.</p>\n<h2 id="unansered-questions">Unansered Questions</h2>\n<h2 id="future">Future</h2>\n<p>Astro 21 \u2014 embed components into blog posts</p>\n<p>/*</p>\n<ul>\n<li>style a component primarily by <strong>tag</strong> if it is reusable throughtout\nthe application</li>\n<li>add a <strong>class</strong> for slight variations\n<em>/\n/</em></li>\n<li>style components primarily by <strong>class</strong> if its semantic interpretation goes beyond the set of built-in HTML tags\n*/</li>\n</ul>' };
const frontmatter = { "title": "My new website", "description": "A thorough guide to to the techniques and tools used to build my website", "author": "John Henry", "heroImage": "/vendor/img/www.pexels.com/pixabay/view-of-street-from-a-glass-window.jpg", "alt": "Astro", "tags": ["experiment", "programming"], "astro": { "headers": [{ "depth": 2, "slug": "introduction-and-openess", "text": "Introduction and Openess" }, { "depth": 2, "slug": "declarative-composable-html", "text": "Declarative Composable HTML" }, { "depth": 1, "slug": "reset", "text": "reset" }, { "depth": 2, "slug": "exceptions", "text": "Exceptions" }, { "depth": 2, "slug": "unansered-questions", "text": "Unansered Questions" }, { "depth": 2, "slug": "future", "text": "Future" }], "source": `
_Author\u2019s Note: This is a **Highly Opinionated** guide. Your experiences and preferences may differ._

## Introduction and Openess

I've learned most of what I have
by looking at what others have built before me.
The ability to select "view source"
from the browser's context menu
has been key to what I've been able to learn.
as a developer.
Being able to use and examine
source code in public repositories
has also been a boon.

With this in mind,
I set out to create a website
with components that are easy to extract
and use in other projects.

To facilitate this,
nearly all of the scripts and styles
are published as importable modules
located in the /lib/ directory.
They can be imported
directly into most modern web
(or [deno](https://deno.land))
applications without modification.
They are uncompressed and feature comments.
As such, they may not be suitable for production;
but using modern tooling,
you can get around this.
They are also available in their
[own github repository](http://github.johnhenry.io/lib)
where I am currently working
on documentation detailing
how you too can use these modules
in your own applications.

## Declarative Composable HTML

Javascript and CSS both natively support
importing modules, but HTML does not.
Though we import scripts and styles directly;
we use a static compiler in place of markup.

For this site, I use [Astro](https://astro.build)
as a framework to compose and compile HTML components
written as "./astro" files.
I don't publish these directly at http://johnhenry.io/lib/
as you can't simply pull them into an application
in the same way you do javascript files;
but they are available on
[this site's github repository](https://github.com/johnhenry.github.io)
and I may publish them elsewhere in the future.

HTML Tags are semantic components.
Classes represent variations

# reset

## Exceptions

For the most part, I try to keep the style separate from the markup.
That said, there are a few exceptions where I use the HTML structure

For example, for the buttons in the .widget components,
I've wrapped each letter in a span then styled those as a flex-box for the desired effect.

## Unansered Questions

## Future

Astro 21 -- embed components into blog posts

/\\*

- style a component primarily by **tag** if it is reusable throughtout
  the application
- add a **class** for slight variations
  _/
  /_
- style components primarily by **class** if its semantic interpretation goes beyond the set of built-in HTML tags
  \\*/
`, "html": '<p><em>Author\u2019s Note: This is a <strong>Highly Opinionated</strong> guide. Your experiences and preferences may differ.</em></p>\n<h2 id="introduction-and-openess">Introduction and Openess</h2>\n<p>I\u2019ve learned most of what I have\nby looking at what others have built before me.\nThe ability to select \u201Cview source\u201D\nfrom the browser\u2019s context menu\nhas been key to what I\u2019ve been able to learn.\nas a developer.\nBeing able to use and examine\nsource code in public repositories\nhas also been a boon.</p>\n<p>With this in mind,\nI set out to create a website\nwith components that are easy to extract\nand use in other projects.</p>\n<p>To facilitate this,\nnearly all of the scripts and styles\nare published as importable modules\nlocated in the /lib/ directory.\nThey can be imported\ndirectly into most modern web\n(or <a href="https://deno.land">deno</a>)\napplications without modification.\nThey are uncompressed and feature comments.\nAs such, they may not be suitable for production;\nbut using modern tooling,\nyou can get around this.\nThey are also available in their\n<a href="http://github.johnhenry.io/lib">own github repository</a>\nwhere I am currently working\non documentation detailing\nhow you too can use these modules\nin your own applications.</p>\n<h2 id="declarative-composable-html">Declarative Composable HTML</h2>\n<p>Javascript and CSS both natively support\nimporting modules, but HTML does not.\nThough we import scripts and styles directly;\nwe use a static compiler in place of markup.</p>\n<p>For this site, I use <a href="https://astro.build">Astro</a>\nas a framework to compose and compile HTML components\nwritten as \u201C./astro\u201D files.\nI don\u2019t publish these directly at <a href="http://johnhenry.io/lib/">http://johnhenry.io/lib/</a>\nas you can\u2019t simply pull them into an application\nin the same way you do javascript files;\nbut they are available on\n<a href="https://github.com/johnhenry.github.io">this site\u2019s github repository</a>\nand I may publish them elsewhere in the future.</p>\n<p>HTML Tags are semantic components.\nClasses represent variations</p>\n<h1 id="reset">reset</h1>\n<h2 id="exceptions">Exceptions</h2>\n<p>For the most part, I try to keep the style separate from the markup.\nThat said, there are a few exceptions where I use the HTML structure</p>\n<p>For example, for the buttons in the .widget components,\nI\u2019ve wrapped each letter in a span then styled those as a flex-box for the desired effect.</p>\n<h2 id="unansered-questions">Unansered Questions</h2>\n<h2 id="future">Future</h2>\n<p>Astro 21 \u2014 embed components into blog posts</p>\n<p>/*</p>\n<ul>\n<li>style a component primarily by <strong>tag</strong> if it is reusable throughtout\nthe application</li>\n<li>add a <strong>class</strong> for slight variations\n<em>/\n/</em></li>\n<li>style components primarily by <strong>class</strong> if its semantic interpretation goes beyond the set of built-in HTML tags\n*/</li>\n</ul>' } };
const $$metadata$6 = createMetadata("/src/pages/blog/posts/new-site.md", { modules: [{ module: $$module1$1, specifier: "../../../components/BlogPage.astro", assert: {} }], hydratedComponents: [], clientOnlyComponents: [], hydrationDirectives: /* @__PURE__ */ new Set([]), hoisted: [] });
const $$Astro$6 = createAstro("/src/pages/blog/posts/new-site.md", "https://astro.build", "file:///home/runner/work/johnhenry.github.io/johnhenry.github.io/");
const $$NewSite = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$6, $$props, $$slots);
  Astro2.self = $$NewSite;
  const $$content = { "title": "My new website", "description": "A thorough guide to to the techniques and tools used to build my website", "author": "John Henry", "heroImage": "/vendor/img/www.pexels.com/pixabay/view-of-street-from-a-glass-window.jpg", "alt": "Astro", "tags": ["experiment", "programming"], "astro": { "headers": [{ "depth": 2, "slug": "introduction-and-openess", "text": "Introduction and Openess" }, { "depth": 2, "slug": "declarative-composable-html", "text": "Declarative Composable HTML" }, { "depth": 1, "slug": "reset", "text": "reset" }, { "depth": 2, "slug": "exceptions", "text": "Exceptions" }, { "depth": 2, "slug": "unansered-questions", "text": "Unansered Questions" }, { "depth": 2, "slug": "future", "text": "Future" }], "source": `
_Author\u2019s Note: This is a **Highly Opinionated** guide. Your experiences and preferences may differ._

## Introduction and Openess

I've learned most of what I have
by looking at what others have built before me.
The ability to select "view source"
from the browser's context menu
has been key to what I've been able to learn.
as a developer.
Being able to use and examine
source code in public repositories
has also been a boon.

With this in mind,
I set out to create a website
with components that are easy to extract
and use in other projects.

To facilitate this,
nearly all of the scripts and styles
are published as importable modules
located in the /lib/ directory.
They can be imported
directly into most modern web
(or [deno](https://deno.land))
applications without modification.
They are uncompressed and feature comments.
As such, they may not be suitable for production;
but using modern tooling,
you can get around this.
They are also available in their
[own github repository](http://github.johnhenry.io/lib)
where I am currently working
on documentation detailing
how you too can use these modules
in your own applications.

## Declarative Composable HTML

Javascript and CSS both natively support
importing modules, but HTML does not.
Though we import scripts and styles directly;
we use a static compiler in place of markup.

For this site, I use [Astro](https://astro.build)
as a framework to compose and compile HTML components
written as "./astro" files.
I don't publish these directly at http://johnhenry.io/lib/
as you can't simply pull them into an application
in the same way you do javascript files;
but they are available on
[this site's github repository](https://github.com/johnhenry.github.io)
and I may publish them elsewhere in the future.

HTML Tags are semantic components.
Classes represent variations

# reset

## Exceptions

For the most part, I try to keep the style separate from the markup.
That said, there are a few exceptions where I use the HTML structure

For example, for the buttons in the .widget components,
I've wrapped each letter in a span then styled those as a flex-box for the desired effect.

## Unansered Questions

## Future

Astro 21 -- embed components into blog posts

/\\*

- style a component primarily by **tag** if it is reusable throughtout
  the application
- add a **class** for slight variations
  _/
  /_
- style components primarily by **class** if its semantic interpretation goes beyond the set of built-in HTML tags
  \\*/
`, "html": '<p><em>Author\u2019s Note: This is a <strong>Highly Opinionated</strong> guide. Your experiences and preferences may differ.</em></p>\n<h2 id="introduction-and-openess">Introduction and Openess</h2>\n<p>I\u2019ve learned most of what I have\nby looking at what others have built before me.\nThe ability to select \u201Cview source\u201D\nfrom the browser\u2019s context menu\nhas been key to what I\u2019ve been able to learn.\nas a developer.\nBeing able to use and examine\nsource code in public repositories\nhas also been a boon.</p>\n<p>With this in mind,\nI set out to create a website\nwith components that are easy to extract\nand use in other projects.</p>\n<p>To facilitate this,\nnearly all of the scripts and styles\nare published as importable modules\nlocated in the /lib/ directory.\nThey can be imported\ndirectly into most modern web\n(or <a href="https://deno.land">deno</a>)\napplications without modification.\nThey are uncompressed and feature comments.\nAs such, they may not be suitable for production;\nbut using modern tooling,\nyou can get around this.\nThey are also available in their\n<a href="http://github.johnhenry.io/lib">own github repository</a>\nwhere I am currently working\non documentation detailing\nhow you too can use these modules\nin your own applications.</p>\n<h2 id="declarative-composable-html">Declarative Composable HTML</h2>\n<p>Javascript and CSS both natively support\nimporting modules, but HTML does not.\nThough we import scripts and styles directly;\nwe use a static compiler in place of markup.</p>\n<p>For this site, I use <a href="https://astro.build">Astro</a>\nas a framework to compose and compile HTML components\nwritten as \u201C./astro\u201D files.\nI don\u2019t publish these directly at <a href="http://johnhenry.io/lib/">http://johnhenry.io/lib/</a>\nas you can\u2019t simply pull them into an application\nin the same way you do javascript files;\nbut they are available on\n<a href="https://github.com/johnhenry.github.io">this site\u2019s github repository</a>\nand I may publish them elsewhere in the future.</p>\n<p>HTML Tags are semantic components.\nClasses represent variations</p>\n<h1 id="reset">reset</h1>\n<h2 id="exceptions">Exceptions</h2>\n<p>For the most part, I try to keep the style separate from the markup.\nThat said, there are a few exceptions where I use the HTML structure</p>\n<p>For example, for the buttons in the .widget components,\nI\u2019ve wrapped each letter in a span then styled those as a flex-box for the desired effect.</p>\n<h2 id="unansered-questions">Unansered Questions</h2>\n<h2 id="future">Future</h2>\n<p>Astro 21 \u2014 embed components into blog posts</p>\n<p>/*</p>\n<ul>\n<li>style a component primarily by <strong>tag</strong> if it is reusable throughtout\nthe application</li>\n<li>add a <strong>class</strong> for slight variations\n<em>/\n/</em></li>\n<li>style components primarily by <strong>class</strong> if its semantic interpretation goes beyond the set of built-in HTML tags\n*/</li>\n</ul>' } };
  return render$1`${renderComponent($$result, "Layout", $$BlogPage, { "content": $$content }, { "default": () => render$1`<p><em>Author’s Note: This is a <strong>Highly Opinionated</strong> guide. Your experiences and preferences may differ.</em></p><h2 id="introduction-and-openess">Introduction and Openess</h2><p>I’ve learned most of what I have
by looking at what others have built before me.
The ability to select “view source”
from the browser’s context menu
has been key to what I’ve been able to learn.
as a developer.
Being able to use and examine
source code in public repositories
has also been a boon.</p><p>With this in mind,
I set out to create a website
with components that are easy to extract
and use in other projects.</p><p>To facilitate this,
nearly all of the scripts and styles
are published as importable modules
located in the /lib/ directory.
They can be imported
directly into most modern web
(or <a href="https://deno.land">deno</a>)
applications without modification.
They are uncompressed and feature comments.
As such, they may not be suitable for production;
but using modern tooling,
you can get around this.
They are also available in their
<a href="http://github.johnhenry.io/lib">own github repository</a>
where I am currently working
on documentation detailing
how you too can use these modules
in your own applications.</p><h2 id="declarative-composable-html">Declarative Composable HTML</h2><p>Javascript and CSS both natively support
importing modules, but HTML does not.
Though we import scripts and styles directly;
we use a static compiler in place of markup.</p><p>For this site, I use <a href="https://astro.build">Astro</a>
as a framework to compose and compile HTML components
written as “./astro” files.
I don’t publish these directly at <a href="http://johnhenry.io/lib/">http://johnhenry.io/lib/</a>
as you can’t simply pull them into an application
in the same way you do javascript files;
but they are available on
<a href="https://github.com/johnhenry.github.io">this site’s github repository</a>
and I may publish them elsewhere in the future.</p><p>HTML Tags are semantic components.
Classes represent variations</p><h1 id="reset">reset</h1><h2 id="exceptions">Exceptions</h2><p>For the most part, I try to keep the style separate from the markup.
That said, there are a few exceptions where I use the HTML structure</p><p>For example, for the buttons in the .widget components,
I’ve wrapped each letter in a span then styled those as a flex-box for the desired effect.</p><h2 id="unansered-questions">Unansered Questions</h2><h2 id="future">Future</h2><p>Astro 21 — embed components into blog posts</p><p>/*</p><ul>
<li>style a component primarily by <strong>tag</strong> if it is reusable throughtout
the application</li>
<li>add a <strong>class</strong> for slight variations
<em>/
/</em></li>
<li>style components primarily by <strong>class</strong> if its semantic interpretation goes beyond the set of built-in HTML tags
*/</li>
</ul>` })}`;
});

var _page8 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  metadata: metadata,
  frontmatter: frontmatter,
  $$metadata: $$metadata$6,
  'default': $$NewSite
}, Symbol.toStringTag, { value: 'Module' }));

const $$metadata$5 = createMetadata("/src/components/BlogPreview.astro", { modules: [], hydratedComponents: [], clientOnlyComponents: [], hydrationDirectives: /* @__PURE__ */ new Set([]), hoisted: [] });
const $$Astro$5 = createAstro("/src/components/BlogPreview.astro", "https://astro.build", "file:///home/runner/work/johnhenry.github.io/johnhenry.github.io/");
const $$BlogPreview = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$5, $$props, $$slots);
  Astro2.self = $$BlogPreview;
  const { url, date, title, heroImage, description, author = "", tags = [] } = Astro2.props;
  return render$1`<section class="blog-preview glowey-background">
  <header>
    ${date}
    <a class="link-contents"${addAttribute(url, "href")}><img${addAttribute(heroImage, "src")}></a>
  </header>
  <article>
    <header>
      <a class="link-untracked"${addAttribute(url, "href")}>
        <p>${title}</p>
      </a>
    </header>
    <p>${description}</p>
    <footer><a${addAttribute(url, "href")}>Read more</a></footer>
  </article>
</section>
`;
});

var $$module4 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  $$metadata: $$metadata$5,
  'default': $$BlogPreview
}, Symbol.toStringTag, { value: 'Module' }));

const $$metadata$4 = createMetadata("/src/pages/blog/tags/[tag].astro", { modules: [{ module: SETTINGS, specifier: "../../../SETTINGS.mjs", assert: {} }, { module: $$module2$2, specifier: "../../../utils/sort-posts.mjs", assert: {} }, { module: $$module3$2, specifier: "../../../components/jh/index.astro", assert: {} }, { module: $$module5$1, specifier: "../../../components/SitePage.astro", assert: {} }, { module: $$module4, specifier: "../../../components/BlogPreview.astro", assert: {} }, { module: $$module7, specifier: "../../../content/headerlinks.mjs", assert: {} }], hydratedComponents: [], clientOnlyComponents: [], hydrationDirectives: /* @__PURE__ */ new Set([]), hoisted: [] });
const $$Astro$4 = createAstro("/src/pages/blog/tags/[tag].astro", "https://astro.build", "file:///home/runner/work/johnhenry.github.io/johnhenry.github.io/");
const Astro$1 = $$Astro$4;
async function getStaticPaths$1() {
  const { byTag } = sortPosts(await Astro$1.glob({ "../posts/angular-done-right.md": () => import('./chunks/chunk.dedae6f4.mjs'), "../posts/browsers-servers-and-apis.md": () => import('./chunks/chunk.2dcf8975.mjs'), "../posts/component.md": () => import('./chunks/chunk.1e3bc757.mjs'), "../posts/html-tags-for-data.md": () => import('./chunks/chunk.c5d32592.mjs'), "../posts/manage-websites-like-docker.md": () => import('./chunks/chunk.cf97fcd4.mjs'), "../posts/new-site.md": () => import('./chunks/chunk.c8b43e89.mjs'), "../posts/semantics-vs-accessibility.md": () => import('./chunks/chunk.4281c820.mjs'), "../posts/vscode-on-remote-server.md": () => import('./chunks/chunk.0a3e96ff.mjs'),}, () => "../posts/*.md"));
  return byTag.map(([tag, posts]) => ({
    params: { tag },
    props: {
      posts,
      tag
    }
  }));
}
const $$tag = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$4, $$props, $$slots);
  Astro2.self = $$tag;
  const { tag } = Astro2.params;
  const { posts } = Astro2.props;
  return render$1`${renderComponent($$result, "SitePage", $$SitePage, { "title": `Blog -- [${tag}]`, "description": SITE_DESCRIPTION, "keywords": SITE_KEYWORDS, "author": SITE_AUTHOR, "canonical": SITE_CANONICAL_URL, "headerLinks": headerLinks }, { "default": () => render$1`<section class="blog-top">
    <header>
      ${renderComponent($$result, "JH", $$Index$1, { "class": "logo" })}
    </header>
    <header>
      <p>
        [${tag}]
      </p>
    </header>
    <p>This is the place where I muse about technology.</p>
  </section>${posts.map(({ url, frontmatter: { date, title, description, heroImage, author, tags } }) => render$1`${renderComponent($$result, "BlogPreview", $$BlogPreview, { "url": url, "date": date, "title": title, "heroImage": heroImage, "description": description, "author": author, "tags": tags })}`)}` })}
`;
});

var _page9 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  $$metadata: $$metadata$4,
  getStaticPaths: getStaticPaths$1,
  'default': $$tag
}, Symbol.toStringTag, { value: 'Module' }));

const $$metadata$3 = createMetadata("/src/components/Pagination.astro", { modules: [], hydratedComponents: [], clientOnlyComponents: [], hydrationDirectives: /* @__PURE__ */ new Set([]), hoisted: [] });
const $$Astro$3 = createAstro("/src/components/Pagination.astro", "https://astro.build", "file:///home/runner/work/johnhenry.github.io/johnhenry.github.io/");
const $$Pagination = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$3, $$props, $$slots);
  Astro2.self = $$Pagination;
  const { prefix, page, start = "" } = Astro2.props;
  const { currentPage, lastPage, url } = page;
  const { prev, next } = url;
  const nums = Array.from(new Array(lastPage)).map((_, i) => i + 1);
  return render$1`<a${addAttribute(prev, "href")}>${prev ? "prev" : null}</a>
${nums.map((i) => start ? render$1`<a${addAttribute(i === currentPage ? null : `${prefix}${i}`, "href")}>${i}</a>` : render$1`<a${addAttribute(i === currentPage ? null : `${prefix}${i - 1 ? i : ""}`, "href")}>${i}</a>`)}
<a${addAttribute(next, "href")}>${next ? "next" : null}</a>`;
});

var $$module6 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  $$metadata: $$metadata$3,
  'default': $$Pagination
}, Symbol.toStringTag, { value: 'Module' }));

const $$metadata$2 = createMetadata("/src/pages/blog/[...page].astro", { modules: [{ module: SETTINGS, specifier: "../../SETTINGS.mjs", assert: {} }, { module: $$module2$2, specifier: "../../utils/sort-posts.mjs", assert: {} }, { module: $$module3$2, specifier: "../../components/jh/index.astro", assert: {} }, { module: $$module4, specifier: "../../components/BlogPreview.astro", assert: {} }, { module: $$module5$1, specifier: "../../components/SitePage.astro", assert: {} }, { module: $$module6, specifier: "../../components/Pagination.astro", assert: {} }, { module: $$module7, specifier: "../../content/headerlinks.mjs", assert: {} }], hydratedComponents: [], clientOnlyComponents: [], hydrationDirectives: /* @__PURE__ */ new Set([]), hoisted: [] });
const $$Astro$2 = createAstro("/src/pages/blog/[...page].astro", "https://astro.build", "file:///home/runner/work/johnhenry.github.io/johnhenry.github.io/");
const Astro = $$Astro$2;
async function getStaticPaths({ paginate }) {
  const { sorted } = sortPosts(await Astro.glob({ "./posts/angular-done-right.md": () => import('./chunks/chunk.dedae6f4.mjs'), "./posts/browsers-servers-and-apis.md": () => import('./chunks/chunk.2dcf8975.mjs'), "./posts/component.md": () => import('./chunks/chunk.1e3bc757.mjs'), "./posts/html-tags-for-data.md": () => import('./chunks/chunk.c5d32592.mjs'), "./posts/manage-websites-like-docker.md": () => import('./chunks/chunk.cf97fcd4.mjs'), "./posts/new-site.md": () => import('./chunks/chunk.c8b43e89.mjs'), "./posts/semantics-vs-accessibility.md": () => import('./chunks/chunk.4281c820.mjs'), "./posts/vscode-on-remote-server.md": () => import('./chunks/chunk.0a3e96ff.mjs'),}, () => "./posts/*.md"));
  return paginate(sorted, { pageSize: SITE_BLOG_PAGE_SIZE });
}
const $$ = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$2, $$props, $$slots);
  Astro2.self = $$;
  const { page } = Astro2.props;
  return render$1`${renderComponent($$result, "SitePage", $$SitePage, { "title": `Blog -- #${page.currentPage}`, "description": SITE_DESCRIPTION, "keywords": SITE_KEYWORDS, "author": SITE_AUTHOR, "canonical": SITE_CANONICAL_URL, "headerLinks": headerLinks }, { "default": () => render$1`<section class="blog-top">
    <header>${renderComponent($$result, "JH", $$Index$1, { "class": "logo" })}</header>
    <p>This is the place where I muse about technology.</p>
    <p>Page : ${page.currentPage}</p>
  </section>${page.data.map(({ url, frontmatter: { date, title: title2, description, heroImage, author, tags } }) => render$1`${renderComponent($$result, "BlogPreview", $$BlogPreview, { "url": url, "date": date, "title": title2, "heroImage": heroImage, "description": description, "author": author, "tags": tags })}`)}${page.lastPage > 1 ? render$1`<section class="blog-nav">${renderComponent($$result, "Pagination", $$Pagination, { "prefix": "/blog/", "page": page })}</section>` : ""}` })}
`;
});

var _page10 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  $$metadata: $$metadata$2,
  getStaticPaths: getStaticPaths,
  'default': $$
}, Symbol.toStringTag, { value: 'Module' }));

const $$metadata$1 = createMetadata("/src/components/SettingsMeta.astro", { modules: [{ module: SETTINGS, specifier: "../SETTINGS.mjs", assert: {} }, { module: SETTINGS, specifier: "../SETTINGS.mjs", assert: {} }], hydratedComponents: [], clientOnlyComponents: [], hydrationDirectives: /* @__PURE__ */ new Set([]), hoisted: [] });
const $$Astro$1 = createAstro("/src/components/SettingsMeta.astro", "https://astro.build", "file:///home/runner/work/johnhenry.github.io/johnhenry.github.io/");
const $$SettingsMeta = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$1, $$props, $$slots);
  Astro2.self = $$SettingsMeta;
  const { class: className = null } = Astro2.props;
  return render$1`<table${addAttribute(className, "class")}>
  <tr>
    <th>KEY</th>
    <th>DEFAULT</th>
    <th>ENV</th>
    <th>FINAL</th>
  </tr>
  ${Object.keys(defaults).map((key) => render$1`<tr>
      <td>${key}</td>
      ${[defaults[key], {"BASE_URL":"/","MODE":"production","DEV":false,"PROD":true}[key], SETTINGS[key]].map((value) => render$1`<td>${Array.isArray(value) ? render$1`<ul>${value.map((v) => render$1`<li>${v}</li>`)}</ul>` : typeof value === "string" ? `"` + value + `"` : value}</td>`)}
    </tr>`)}
</table>


<!-- {Array.isArray(value)
    ? <ul>{value.map(v=><li>{v}</li>)}</ul>
    : typeof value === "string" ?
      (\`"\`+value+\`"\`)
      : value} -->
`;
});

var $$module1 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  $$metadata: $$metadata$1,
  'default': $$SettingsMeta
}, Symbol.toStringTag, { value: 'Module' }));

const $$metadata = createMetadata("/src/pages/meta.astro", { modules: [{ module: $$module1, specifier: "../components/SettingsMeta.astro", assert: {} }], hydratedComponents: [], clientOnlyComponents: [], hydrationDirectives: /* @__PURE__ */ new Set([]), hoisted: [] });
const $$Astro = createAstro("/src/pages/meta.astro", "https://astro.build", "file:///home/runner/work/johnhenry.github.io/johnhenry.github.io/");
const $$Meta = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Meta;
  return render$1`<!DOCTYPE html><html>
  <head>
    <link rel="stylesheet" href="/style/classes/settings-meta.css">
  <!--astro:head--></head>
  <body>
    <h1>Settings Meta</h1>
    <p>Metadata passed to the build process.</p>
    ${renderComponent($$result, "SettingsMeta", $$SettingsMeta, { "class": "settings-meta" })}
  </body></html>`;
});

var _page11 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  $$metadata: $$metadata,
  'default': $$Meta
}, Symbol.toStringTag, { value: 'Module' }));

const pageMap = new Map([['src/pages/index.astro', _page0],['src/pages/blog/posts/manage-websites-like-docker.md', _page1],['src/pages/blog/posts/semantics-vs-accessibility.md', _page2],['src/pages/blog/posts/browsers-servers-and-apis.md', _page3],['src/pages/blog/posts/vscode-on-remote-server.md', _page4],['src/pages/blog/posts/angular-done-right.md', _page5],['src/pages/blog/posts/html-tags-for-data.md', _page6],['src/pages/blog/posts/component.md', _page7],['src/pages/blog/posts/new-site.md', _page8],['src/pages/blog/tags/[tag].astro', _page9],['src/pages/blog/[...page].astro', _page10],['src/pages/meta.astro', _page11],]);
const renderers = [];

const _manifest = Object.assign(deserializeManifest({"routes":[{"file":"","links":[],"scripts":[],"routeData":{"type":"page","pattern":"^\\/$","segments":[],"params":[],"component":"src/pages/index.astro","pathname":"/"}},{"file":"","links":[],"scripts":[],"routeData":{"type":"page","pattern":"^\\/blog\\/posts\\/manage-websites-like-docker\\/?$","segments":[[{"content":"blog","dynamic":false,"spread":false}],[{"content":"posts","dynamic":false,"spread":false}],[{"content":"manage-websites-like-docker","dynamic":false,"spread":false}]],"params":[],"component":"src/pages/blog/posts/manage-websites-like-docker.md","pathname":"/blog/posts/manage-websites-like-docker"}},{"file":"","links":[],"scripts":[],"routeData":{"type":"page","pattern":"^\\/blog\\/posts\\/semantics-vs-accessibility\\/?$","segments":[[{"content":"blog","dynamic":false,"spread":false}],[{"content":"posts","dynamic":false,"spread":false}],[{"content":"semantics-vs-accessibility","dynamic":false,"spread":false}]],"params":[],"component":"src/pages/blog/posts/semantics-vs-accessibility.md","pathname":"/blog/posts/semantics-vs-accessibility"}},{"file":"","links":[],"scripts":[],"routeData":{"type":"page","pattern":"^\\/blog\\/posts\\/browsers-servers-and-apis\\/?$","segments":[[{"content":"blog","dynamic":false,"spread":false}],[{"content":"posts","dynamic":false,"spread":false}],[{"content":"browsers-servers-and-apis","dynamic":false,"spread":false}]],"params":[],"component":"src/pages/blog/posts/browsers-servers-and-apis.md","pathname":"/blog/posts/browsers-servers-and-apis"}},{"file":"","links":[],"scripts":[],"routeData":{"type":"page","pattern":"^\\/blog\\/posts\\/vscode-on-remote-server\\/?$","segments":[[{"content":"blog","dynamic":false,"spread":false}],[{"content":"posts","dynamic":false,"spread":false}],[{"content":"vscode-on-remote-server","dynamic":false,"spread":false}]],"params":[],"component":"src/pages/blog/posts/vscode-on-remote-server.md","pathname":"/blog/posts/vscode-on-remote-server"}},{"file":"","links":[],"scripts":[],"routeData":{"type":"page","pattern":"^\\/blog\\/posts\\/angular-done-right\\/?$","segments":[[{"content":"blog","dynamic":false,"spread":false}],[{"content":"posts","dynamic":false,"spread":false}],[{"content":"angular-done-right","dynamic":false,"spread":false}]],"params":[],"component":"src/pages/blog/posts/angular-done-right.md","pathname":"/blog/posts/angular-done-right"}},{"file":"","links":[],"scripts":[],"routeData":{"type":"page","pattern":"^\\/blog\\/posts\\/html-tags-for-data\\/?$","segments":[[{"content":"blog","dynamic":false,"spread":false}],[{"content":"posts","dynamic":false,"spread":false}],[{"content":"html-tags-for-data","dynamic":false,"spread":false}]],"params":[],"component":"src/pages/blog/posts/html-tags-for-data.md","pathname":"/blog/posts/html-tags-for-data"}},{"file":"","links":[],"scripts":[],"routeData":{"type":"page","pattern":"^\\/blog\\/posts\\/component\\/?$","segments":[[{"content":"blog","dynamic":false,"spread":false}],[{"content":"posts","dynamic":false,"spread":false}],[{"content":"component","dynamic":false,"spread":false}]],"params":[],"component":"src/pages/blog/posts/component.md","pathname":"/blog/posts/component"}},{"file":"","links":[],"scripts":[],"routeData":{"type":"page","pattern":"^\\/blog\\/posts\\/new-site\\/?$","segments":[[{"content":"blog","dynamic":false,"spread":false}],[{"content":"posts","dynamic":false,"spread":false}],[{"content":"new-site","dynamic":false,"spread":false}]],"params":[],"component":"src/pages/blog/posts/new-site.md","pathname":"/blog/posts/new-site"}},{"file":"","links":[],"scripts":[],"routeData":{"type":"page","pattern":"^\\/blog\\/tags\\/([^/]+?)\\/?$","segments":[[{"content":"blog","dynamic":false,"spread":false}],[{"content":"tags","dynamic":false,"spread":false}],[{"content":"tag","dynamic":true,"spread":false}]],"params":["tag"],"component":"src/pages/blog/tags/[tag].astro"}},{"file":"","links":[],"scripts":[],"routeData":{"type":"page","pattern":"^\\/blog(?:\\/(.*?))?\\/?$","segments":[[{"content":"blog","dynamic":false,"spread":false}],[{"content":"...page","dynamic":true,"spread":true}]],"params":["...page"],"component":"src/pages/blog/[...page].astro"}},{"file":"","links":[],"scripts":[],"routeData":{"type":"page","pattern":"^\\/meta\\/?$","segments":[[{"content":"meta","dynamic":false,"spread":false}]],"params":[],"component":"src/pages/meta.astro","pathname":"/meta"}}],"markdown":{"mode":"mdx","drafts":false,"syntaxHighlight":"shiki","shikiConfig":{"langs":[],"theme":"github-dark","wrap":false},"remarkPlugins":[],"rehypePlugins":[]},"pageMap":null,"renderers":[],"entryModules":{"\u0000@astrojs-ssr-virtual-entry":"entry.mjs","/home/runner/work/johnhenry.github.io/johnhenry.github.io/src/pages/blog/posts/angular-done-right.md?mdImport":"chunks/chunk.dedae6f4.mjs","/home/runner/work/johnhenry.github.io/johnhenry.github.io/src/pages/blog/posts/browsers-servers-and-apis.md?mdImport":"chunks/chunk.2dcf8975.mjs","/home/runner/work/johnhenry.github.io/johnhenry.github.io/src/pages/blog/posts/component.md?mdImport":"chunks/chunk.1e3bc757.mjs","/home/runner/work/johnhenry.github.io/johnhenry.github.io/src/pages/blog/posts/html-tags-for-data.md?mdImport":"chunks/chunk.c5d32592.mjs","/home/runner/work/johnhenry.github.io/johnhenry.github.io/src/pages/blog/posts/manage-websites-like-docker.md?mdImport":"chunks/chunk.cf97fcd4.mjs","/home/runner/work/johnhenry.github.io/johnhenry.github.io/src/pages/blog/posts/new-site.md?mdImport":"chunks/chunk.c8b43e89.mjs","/home/runner/work/johnhenry.github.io/johnhenry.github.io/src/pages/blog/posts/semantics-vs-accessibility.md?mdImport":"chunks/chunk.4281c820.mjs","/home/runner/work/johnhenry.github.io/johnhenry.github.io/src/pages/blog/posts/vscode-on-remote-server.md?mdImport":"chunks/chunk.0a3e96ff.mjs","astro:scripts/before-hydration.js":"data:text/javascript;charset=utf-8,//[no before-hydration script]"}}), {
	pageMap: pageMap,
	renderers: renderers
});
const _args = {};

const _exports = createExports(_manifest, _args);
const stop = _exports['stop'];
const handle = _exports['handle'];
const start = _exports['start'];
const running = _exports['running'];

const _start = 'start';
if(_start in adapter) {
	adapter[_start](_manifest, _args);
}

export { _page1 as _, _page2 as a, _page3 as b, _page4 as c, _page5 as d, _page6 as e, _page7 as f, _page8 as g, handle, running, start, stop };
